(include "lib/asm/func.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")
(include "sys/pii/class.inc")
(include "sys/task/class.inc")
(include "sys/math/class.inc")

(def-func 'apps/netspeed/vops)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(defmacro test-block (n &rest _)
		(while (< (length _) n) (setq _ (cat _ _)))
		`(progn ~(copy (slice 0 n _))))

	(defmacro test-block-s (n &rest _)
		(while (< (length _) n) (setq _ (cat _ _)))
		`(progn ~(shuffle (copy (slice 0 n _)))))

	(def-vars
		(ptr this args mem1 mem2)
		(ulong regs_vops memory_vops reals_vops start end cnt))

	(push-scope)
	(entry {this, args})

(errorcases
	(call 'lisp :env_args_sig {args, $sig, 0} '(tmp))
	(gotoif `(,tmp = 0) 'error))

	;reg ops test
	(call 'sys_pii :time :nil {start})
	(assign {0} {cnt})
	(loop-start)

		;this mix allows up to oct issue opertunities !
		;we shuffle the mix to give some spice to life.
		(vp-def (loop rt1 rt2 rt3 rt4 rt5 rt6 rt7 rt8 rt9 ))
		(vp-cpy-cr 0 loop)
		(loop-start)
			(vp-vec vp-cpy-cr '(1 2 3 4 5 6 7 8 9) `(,rt1 ,rt2 ,rt3 ,rt4 ,rt5 ,rt6 ,rt7 ,rt8 ,rt9))
			(test-block-s 990
				(vp-add-cr 3 rt2) (vp-add-cr 3 rt3) (vp-add-cr 3 rt4) (vp-add-cr 3 rt5)
				(vp-add-cr 3 rt6) (vp-add-cr 3 rt7) (vp-add-cr 3 rt8) (vp-add-cr 3 rt9)
				(vp-sub-cr 4 rt2) (vp-sub-cr 4 rt3) (vp-sub-cr 4 rt4) (vp-sub-cr 4 rt5)
				(vp-sub-cr 4 rt6) (vp-sub-cr 4 rt7) (vp-sub-cr 4 rt8) (vp-sub-cr 4 rt9)
				(vp-and-cr 5 rt2) (vp-and-cr 5 rt3) (vp-and-cr 5 rt4) (vp-and-cr 5 rt5)
				(vp-and-cr 5 rt6) (vp-and-cr 5 rt7) (vp-and-cr 5 rt8) (vp-and-cr 5 rt9)
				(vp-or-cr 6 rt2) (vp-or-cr 6 rt3) (vp-or-cr 6 rt4) (vp-or-cr 6 rt5)
				(vp-or-cr 6 rt6) (vp-or-cr 6 rt7) (vp-or-cr 6 rt8) (vp-or-cr 6 rt9)
				(vp-xor-cr 7 rt2) (vp-xor-cr 7 rt3) (vp-xor-cr 7 rt4) (vp-xor-cr 7 rt5)
				(vp-xor-cr 7 rt6) (vp-xor-cr 7 rt7) (vp-xor-cr 7 rt8) (vp-xor-cr 7 rt9)
				(vp-add-rr rt1 rt2) (vp-add-rr rt1 rt3) (vp-add-rr rt1 rt4) (vp-add-rr rt1 rt5)
				(vp-add-rr rt1 rt6) (vp-add-rr rt1 rt7) (vp-add-rr rt1 rt8) (vp-add-rr rt1 rt9)
				(vp-sub-rr rt1 rt2) (vp-sub-rr rt1 rt3) (vp-sub-rr rt1 rt4) (vp-sub-rr rt1 rt5)
				(vp-sub-rr rt1 rt6) (vp-sub-rr rt1 rt7) (vp-sub-rr rt1 rt8) (vp-sub-rr rt1 rt9)
				(vp-and-rr rt1 rt2) (vp-and-rr rt1 rt3) (vp-and-rr rt1 rt4) (vp-and-rr rt1 rt5)
				(vp-and-rr rt1 rt6) (vp-and-rr rt1 rt7) (vp-and-rr rt1 rt8) (vp-and-rr rt1 rt9)
				(vp-or-rr rt1 rt2) (vp-or-rr rt1 rt3) (vp-or-rr rt1 rt4) (vp-or-rr rt1 rt5)
				(vp-or-rr rt1 rt6) (vp-or-rr rt1 rt7) (vp-or-rr rt1 rt8) (vp-or-rr rt1 rt9)
				(vp-xor-rr rt1 rt2) (vp-xor-rr rt1 rt3) (vp-xor-rr rt1 rt4) (vp-xor-rr rt1 rt5)
				(vp-xor-rr rt1 rt6) (vp-xor-rr rt1 rt7) (vp-xor-rr rt1 rt8) (vp-xor-rr rt1 rt9)
				(vp-shl-cr 3 rt2) (vp-shl-cr 3 rt3) (vp-shl-cr 3 rt4) (vp-shl-cr 3 rt5)
				(vp-shl-cr 3 rt6) (vp-shl-cr 3 rt7) (vp-shl-cr 3 rt8) (vp-shl-cr 3 rt9)
				(vp-shr-cr 2 rt2) (vp-shr-cr 2 rt3) (vp-shr-cr 2 rt4) (vp-shr-cr 2 rt5)
				(vp-shr-cr 2 rt6) (vp-shr-cr 2 rt7) (vp-shr-cr 2 rt8) (vp-shr-cr 2 rt9)
				(vp-asr-cr 1 rt2) (vp-asr-cr 1 rt3) (vp-asr-cr 1 rt4) (vp-asr-cr 1 rt5)
				(vp-asr-cr 1 rt6) (vp-asr-cr 1 rt7) (vp-asr-cr 1 rt8) (vp-asr-cr 1 rt9)
				(vp-shl-rr rt1 rt2) (vp-shl-rr rt1 rt3) (vp-shl-rr rt1 rt4) (vp-shl-rr rt1 rt5)
				(vp-shl-rr rt1 rt6) (vp-shl-rr rt1 rt7) (vp-shl-rr rt1 rt8) (vp-shl-rr rt1 rt9)
				(vp-shr-rr rt1 rt2) (vp-shr-rr rt1 rt3) (vp-shr-rr rt1 rt4) (vp-shr-rr rt1 rt5)
				(vp-shr-rr rt1 rt6) (vp-shr-rr rt1 rt7) (vp-shr-rr rt1 rt8) (vp-shr-rr rt1 rt9)
				(vp-asr-rr rt1 rt2) (vp-asr-rr rt1 rt3) (vp-asr-rr rt1 rt4) (vp-asr-rr rt1 rt5)
				(vp-asr-rr rt1 rt6) (vp-asr-rr rt1 rt7) (vp-asr-rr rt1 rt8) (vp-asr-rr rt1 rt9))
			(vp-add-cr 1 loop)
		(loop-until `(,loop = 1000))
		(call 'sys_task :sleep '(0))

		(call 'sys_pii :time :nil {end})
		(assign {end - start, 1000 * 1000 + cnt} {end, cnt})
	(loop-until {end >= 100000})
	(call 'num :create {1000000 * cnt / end} {regs_vops})

	;memory ops test
	(call 'sys_pii :time :nil {start})
	(assign {0} {cnt})
	(loop-start)

		(vp-def (loop rt1 rt2 rt3 rt4))
		(assign {&mem1, &mem2} `(,rt1 ,rt2))
		(vp-cpy-cr 0 loop)
		(loop-start)
			(test-block 1000
				(vp-cpy-ir rt1 0 rt3)
				(vp-cpy-ir rt2 0 rt4)
				(vp-cpy-ri rt3 rt2 0)
				(vp-cpy-ri rt4 rt1 0)
				(vp-cpy-ir-i rt1 0 rt3)
				(vp-cpy-ir-i rt2 0 rt4)
				(vp-cpy-ri-i rt3 rt2 0)
				(vp-cpy-ri-i rt4 rt1 0)
				(vp-cpy-ir-s rt1 0 rt3)
				(vp-cpy-ir-s rt2 0 rt4)
				(vp-cpy-ri-s rt3 rt2 0)
				(vp-cpy-ri-s rt4 rt1 0)
				(vp-cpy-ir-b rt1 0 rt3)
				(vp-cpy-ir-b rt2 0 rt4)
				(vp-cpy-ri-b rt3 rt2 0)
				(vp-cpy-ri-b rt4 rt1 0))
			(vp-add-cr 1 loop)
		(loop-until `(,loop = 1000))
		(call 'sys_task :sleep '(0))

		(call 'sys_pii :time :nil {end})
		(assign {end - start, 1000 * 1000 + cnt} {end, cnt})
	(loop-until {end >= 100000})
	(call 'num :create {1000000 * cnt / end} {memory_vops})

	;reals ops test
	(call 'sys_pii :time :nil {start})
	(assign {0} {cnt})
	(loop-start)

		(vp-def (loop rt1 rt2))
		(vp-cpy-cr 0 loop)
		(loop-start)
			(test-block 6
				(call 'sys_math :r_i2r '(1000) `(,rt1))
				(call 'sys_math :r_add `(,rt1 ,rt1) `(,rt2))
				(call 'sys_math :r_sub `(,rt2 ,rt1) `(,rt1))
				(call 'sys_math :r_mul `(,rt2 ,rt1) `(,rt2))
				(call 'sys_math :r_div `(,rt1 ,rt1) `(,rt2))
				(call 'sys_math :r_r2i `(,rt2) `(,rt1)))
			(vp-add-cr 1 loop)
		(loop-until `(,loop = 100))
		(call 'sys_task :sleep '(0))

		(call 'sys_pii :time :nil {end})
		(assign {end - start, 6 * 100 + cnt} {end, cnt})
	(loop-until {end >= 100000})
	(call 'num :create {1000000 * cnt / end} {reals_vops})

	(call 'list :create :nil {args})
	(call 'list :push_back2 {args, regs_vops, memory_vops})
	(call 'list :push_back {args, reals_vops})

	(exit {this, args})
	(return)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error {this, "(vops)", +error_msg_wrong_types, args})
	(signature '()))

	(pop-scope-syms)

(def-func-end)
