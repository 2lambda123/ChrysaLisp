(include 'sys/func.inc)
(include 'gui/gui/class.inc)
(include 'sys/string/class.inc)
(include 'gui/window/class.inc)
(include 'gui/button/class.inc)
(include 'class/string/class.inc)
(include 'class/vector/class.inc)
(include 'class/msg_out/class.inc)
(include 'class/msg_in/class.inc)
(include 'class/pipe/class.inc)
(include 'gui/vdu/class.inc)
(include 'gui/ctx/class.inc)

(def-func 'apps/terminal/app)

	(defcvar 'buf_size 256)

	(def-struct 'local)
		(ptr 'pipe 'vdu 'history 'window)
		(ulong 'history_index)
		(pubyte 'bufp)
		(struct 'buffer buf_size)
		(uint 'closed)
	(def-struct-end)

	(struct 'myapp 'local)
	(ptr 'msg 'data 'my_mbox_addr 'stream)
	(long 'state)
	(int 'width 'height 'index 'my_mbox_id)

	;init app vars
	(push-scope)
	(call 'vector 'create nil {myapp.local_history})
	(assign {0} {myapp.local_pipe})

	;create my window
	(call 'window 'create {window_flag_status | window_flag_close} {myapp.local_window})
	(call 'window 'set_title {myapp.local_window, "Terminal"})
	(call 'window 'set_status {myapp.local_window, "Ready"})
	(call 'window 'set_long_prop {myapp.local_window, prop_color, 0xc0000000})

	;add my vdu
	(call 'vdu 'create nil {myapp.local_vdu})
	(call 'vdu 'set_long_prop {myapp.local_vdu, prop_ink_color, argb_green})
	(call 'vdu 'set_long_prop {myapp.local_vdu, prop_vdu_width, 60})
	(call 'vdu 'set_long_prop {myapp.local_vdu, prop_vdu_height, 40})
	(call 'vdu 'set_font_prop {myapp.local_vdu, prop_font, "fonts/Hack-Regular.ttf", 16})
	(call 'window 'add_child {myapp.local_window, myapp.local_vdu})

	;set to pref size
	(call 'window 'pref_size {myapp.local_window} {_, width, height})
	(call 'window 'change {myapp.local_window, 0, 0, width, height})

	;set close action
	(call 'window 'connect_close {myapp.local_window, 0})

	;add to screen and print sign on
	(call 'gui 'add {myapp.local_window})
	(call 'vdu 'print_cstr {myapp.local_vdu, "ChrysaLisp Terminal 1.3"})
	(call 'vdu 'print_char {myapp.local_vdu, char_lf})
	(call 'vdu 'print_char {myapp.local_vdu, char_gt})

	;set up term buffer
	(assign {&myapp.local_buffer} {myapp.local_bufp})

	;app event loop
	(call 'sys_task 'mailbox nil {my_mbox_id})
	(call 'sys_mail 'mbox_addr {my_mbox_id} {my_mbox_addr})
	(loop-start 'loopexit)
		(vpif {myapp.local_pipe})
			;select on multiple mailboxes
			(call 'pipe 'select {myapp.local_pipe, my_mbox_addr} {_, index})

			;which mailbox has mail ?
			(gotoif {index == 0} 'from_mymailbox)

			;output from a pipe element
			(call 'vector 'get_element {myapp.local_pipe->pipe_streams, index} {_, stream})
			(call 'pipe_output {&myapp, stream} {state})
			(vpif {state == -1})
				;EOF
				(call 'pipe 'deref {myapp.local_pipe})
				(assign {0} {myapp.local_pipe})
				(call 'vdu 'print_char {myapp.local_vdu, char_lf})
				(call 'vdu 'print_char {myapp.local_vdu, char_gt})

				;update status
				(call 'window 'set_status {myapp.local_window, "Ready"})
			(endif)
		(else)
		(vp-label 'from_mymailbox)
			(call 'sys_mail 'read {my_mbox_addr} {msg, data})
			(breakifnot {data->ev_msg_target_id} loopexit)
			(call 'view 'event {myapp.local_window, data})
			(vpif {data->ev_msg_type == ev_type_key && data->ev_msg_key_keycode > 0})
				(call 'terminal_input {&myapp, data->ev_msg_key_key})
			(endif)
			(call 'sys_mail 'free {msg})
		(endif)
		(call 'sys_task 'yield)
	(loop-until {myapp.local_closed})
	(call 'sys_mail 'free {msg})

	;clean up
	(call 'pipe 'deref_if {myapp.local_pipe})
	(call 'vector 'deref {myapp.local_history})
	(call 'window 'deref {myapp.local_window})
	(pop-scope)
	(return)

(vp-label 'pipe_output)
	;inputs
	;r0 = local
	;r1 = stream object (ptr)
	;outputs
	;r0 = -1 if EOF

	(ptr 'local 'stream)
	(int 'char 'ready)

	(push-scope)
	(entry {local, stream})

	(loop-start)
		(call 'stream 'read_char {stream} {_, char})
		(breakif {char == -1})
		(call 'terminal_output {local, char})
		(call 'stream 'read_ready {stream} {_, ready})
	(loop-untilnot {ready})

	(exit {char})
	(pop-scope)
	(return)

(vp-label 'terminal_input)
	;inputs
	;r0 = local
	;r1 = char input

	(ptr 'local 'string 'last 'stream)
	(ulong 'length 'notsame)
	(int 'char)

	(push-scope)
	(entry {local, char})

	;echo char to terminal
	(call 'terminal_output {local, char})

	;buffer char
	(assign {char} {*local->local_bufp})
	(assign {local->local_bufp - &local->local_buffer} {length})

	;send line ?
	(vpif {char == char_lf || char == char_cr})
		;what state ?
		(vpifnot {local->local_pipe})
			;start new pipe
			(switch 'newpipe)
			(case {length})
				;push new history entry if not same as last entry
				(call 'string 'create_from_buffer {&local->local_buffer, length} {string})
				(d-call 'vector 'get_length {local->local_history} {_, local->local_history_index})
				(vpifnot {local->local_history_index})
				(vp-label 'new_entry)
					(call 'vector 'push_back {local->local_history, string})
					(assign {local->local_history_index + 1} {local->local_history_index})
				(else)
					(d-call 'vector 'ref_back {local->local_history} {_, last})
					(call 'string 'same {string, last} {_, notsame})
					(call 'string 'deref {last})
					(gotoif {notsame} 'new_entry)
					(call 'string 'deref {string})
				(endif)

				;start new pipe
				(call 'pipe 'create {&local->local_buffer, length} {local->local_pipe})
				(vpif {local->local_pipe})
					(call 'window 'set_status {local->local_window, "Busy"})
					(break newpipe)
				(endif)
			(default)
				(call 'vdu 'print_char {local->local_vdu, char_gt})
			(endswitch)
		(else)
			;feed active pipe
			(call 'pipe 'get_input {local->local_pipe} {_, stream})
			(call 'stream 'write {stream, &local->local_buffer, length})
			(call 'stream 'write_char {stream, char_lf})
			(call 'stream 'write_flush {stream})
		(endif)
		(assign {&local->local_buffer} {local->local_bufp})
	(elseif {char == char_backspace})
		;backspace
		(vpif {length})
			(assign {local->local_bufp - 1} {local->local_bufp})
		(endif)
	(elseif {char == 0x40000052})
		;cursor up
		(vpifnot {local->local_pipe})
			(d-call 'vector 'get_length {local->local_history} {_, length})
			(vpifnot {length})
				(call 'vdu 'print_char {local->local_vdu, char_gt})
			(else)
				(vpif {local->local_history_index})
					(assign {local->local_history_index - 1} {local->local_history_index})
				(endif)
				(d-call 'vector 'ref_element {local->local_history, local->local_history_index} {_, string})
				(call 'sys_mem 'copy {&string->string_data, &local->local_buffer, string->string_length} {_, local->local_bufp})
				(call 'stream 'create {string, 0, &string->string_data, string->string_length} {stream})
				(call 'vdu 'print_char {local->local_vdu, char_gt})
				(call 'pipe_output {local, stream})
				(call 'stream 'deref {stream})
			(endif)
		(endif)
	(elseif {char == 0x40000051})
		;cursor down
		(vpifnot {local->local_pipe})
			(d-call 'vector 'get_length {local->local_history} {_, length})
			(vpif {(local->local_history_index = local->local_history_index + 1) > length})
				(assign {length} {local->local_history_index})
			(endif)
			(vpif {local->local_history_index == length})
				(call 'string 'create_from_cstr {""} {string})
			(else)
				(d-call 'vector 'ref_element {local->local_history, local->local_history_index} {_, string})
			(endif)
			(call 'sys_mem 'copy {&string->string_data, &local->local_buffer, string->string_length} {_, local->local_bufp})
			(call 'stream 'create {string, 0, &string->string_data, string->string_length} {stream})
			(call 'vdu 'print_char {local->local_vdu, char_gt})
			(call 'pipe_output {local, stream})
			(call 'stream 'deref {stream})
		(endif)
	(elseif {char == char_esc})
		;esc
		(vpif {local->local_pipe})
			;feed active pipe, then EOF
			(call 'pipe 'get_input {local->local_pipe} {_, stream})
			(call 'stream 'write {stream, &local->local_buffer, length})
			(call 'stream 'write_flush {stream})
			(assign {&local->local_buffer} {local->local_bufp})

			;stop pipe
			(call 'pipe 'deref {local->local_pipe})
			(assign {0} {local->local_pipe})
			(call 'vdu 'print_char {local->local_vdu, char_lf})
			(call 'vdu 'print_char {local->local_vdu, char_gt})

			;update status
			(call 'window 'set_status {local->local_window, "Ready"})
		(endif)
	(elseifnot {char < char_space || char >= 127 || length == buf_size})
		;next char
		(assign {local->local_bufp + 1} {local->local_bufp})
	(endif)
	(pop-scope)
	(return)

(vp-label 'terminal_output)
	;inputs
	;r0 = local
	;r1 = char output

	(ptr 'local)
	(int 'char)

	(push-scope)
	(entry {local, char})

	(vpif {char == char_cr})
		(assign {char_lf} {char})
	(endif)
	(vpif {char == 0x40000052 || char == 0x40000051})
		;cursor up/down
		(call 'vdu 'print_char {local->local_vdu, 129})
	(else)
		;print char
		(call 'vdu 'print_char {local->local_vdu, char})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
