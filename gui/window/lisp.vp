(include 'sys/func.inc)
(include 'gui/window/class.inc)
(include 'class/string/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'window 'lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(entry 'window 'lisp_create {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'window 'create {arg0} {value})

	(exit 'window 'lisp_create {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(create-window flags)", error_msg_wrong_types, args})
	(signature 'sig 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'window 'lisp_connect_layout)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'window 'lisp_connect_layout {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'window 'connect_layout {arg0, arg1})
	(call 'window 'ref {arg0} {value})

	(exit 'window 'lisp_connect_layout {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(window-connect-layout window id)", error_msg_wrong_types, args})
	(signature 'sig 'window 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'window 'lisp_connect_close)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'window 'lisp_connect_close {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'window 'connect_close {arg0, arg1})
	(call 'window 'ref {arg0} {value})

	(exit 'window 'lisp_connect_close {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(window-connect-close window id)", error_msg_wrong_types, args})
	(signature 'sig 'window 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'window 'lisp_connect_min)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'window 'lisp_connect_min {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'window 'connect_min {arg0, arg1})
	(call 'window 'ref {arg0} {value})

	(exit 'window 'lisp_connect_min {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(window-connect-min window id)", error_msg_wrong_types, args})
	(signature 'sig 'window 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'window 'lisp_connect_max)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'window 'lisp_connect_max {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'window 'connect_max {arg0, arg1})
	(call 'window 'ref {arg0} {value})

	(exit 'window 'lisp_connect_max {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(window-connect-max window id)", error_msg_wrong_types, args})
	(signature 'sig 'window 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'window 'lisp_set_status)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'window 'lisp_set_status {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'window 'set_status {arg0, &arg1->string_data})
	(call 'window 'ref {arg0} {value})

	(exit 'window 'lisp_set_status {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(window-set-status window str)", error_msg_wrong_types, args})
	(signature 'sig 'window 'string))

	(pop-scope-syms)

(def-func-end)

(def-method 'window 'lisp_set_title)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'window 'lisp_set_title {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'window 'set_title {arg0, &arg1->string_data})
	(call 'window 'ref {arg0} {value})

	(exit 'window 'lisp_set_title {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(window-set-title window str)", error_msg_wrong_types, args})
	(signature 'sig 'window 'string))

	(pop-scope-syms)

(def-func-end)
