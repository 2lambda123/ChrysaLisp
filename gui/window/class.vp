(include 'sys/func.inc)
(include 'gui/gui/class.inc)
(include 'gui/region/class.inc)
(include 'gui/window/class.inc)
(include 'gui/title/class.inc)
(include 'gui/button/class.inc)
(include 'gui/flow/class.inc)
(include 'gui/ctx/class.inc)
(include 'class/str/class.inc)
(include 'class/array/class.inc)

(gen-create 'window)
(gen-vtable 'window)

(def-method 'window 'init)
	;inputs
	;r0 = window object (ptr)
	;r1 = vtable (pptr)
	;r2 = options flags (ulong)
	;outputs
	;r0 = window object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(ptr 'this 'title_flow)
	(ulong 'flags)

	(push-scope)
	(entry 'window 'init '(r0 r1 r2))
	(assign '(r2) {flags})

	;init parent
	(s-call 'window 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(assign '(r0) {this})
		(call 'window 'set_font_prop '(r0 prop_font "fonts/OpenSans-Regular.ttf" 18) '(r0))
		(call 'window 'set_long_prop '(r0 prop_ink_color argb_black) '(r0))
		(call 'window 'set_long_prop '(r0 prop_color 0xffc0c0c0) '(r0))
		(call 'window 'set_long_prop '(r0 prop_border 5) '(r0))
		(call 'window 'set_long_prop '(r0 prop_min_width 0) '(r0))
		(call 'window 'set_long_prop '(r0 prop_min_height 0) '(r0))
		(call 'sys_mem 'clear '((& r0 window_start) (sub window_size window_start)))
		(call 'array 'create nil {this->window_layout_targets})

		;add flow panel
		(call 'flow 'create nil {this->window_flow})
		(call 'flow 'set_long_prop {this->window_flow, prop_flow_flags, flow_flag_down | flow_flag_fillw | flow_flag_lasth})
		(call 'window 'add_back {this, this->window_flow})

		;add title flow panel
		(call 'flow 'create nil {title_flow})
		(call 'flow 'set_long_prop {title_flow, prop_flow_flags, flow_flag_left | flow_flag_fillh | flow_flag_lastw} '(r0))
		(call 'flow 'set_long_prop '(r0 prop_color 0xffd0d0d0))
		(call 'flow 'add_child {this->window_flow, title_flow})

		;add close button ?
		(vpif {flags & window_flag_close})
			(call 'button 'create nil {this->window_close})
			(call 'button 'set_font_prop {this->window_close, prop_font, "fonts/Entypo.otf", 22} '(r0))
			(call 'button 'set_str_prop '(r0 prop_text ""))
			(call 'flow 'add_child {title_flow, this->window_close})
		(endif)

		;add max button
		(vpif {flags & window_flag_max})
			(call 'button 'create nil {this->window_max})
			(call 'button 'set_font_prop {this->window_max, prop_font, "fonts/Entypo.otf", 22} '(r0))
			(call 'button 'set_str_prop '(r0 prop_text ""))
			(call 'flow 'add_child {title_flow, this->window_max})
		(endif)

		;add min button
		(vpif {flags & window_flag_min})
			(call 'button 'create nil {this->window_min})
			(call 'button 'set_font_prop {this->window_min, prop_font, "fonts/Entypo.otf", 22} '(r0))
			(call 'button 'set_str_prop '(r0 prop_text ""))
			(call 'flow 'add_child {title_flow, this->window_min})
		(endif)

		;add title
		(call 'title 'create nil {this->window_title})
		(call 'title 'set_long_prop {this->window_title, prop_color, 0xffc0c0c0})
		(call 'flow 'add_child {title_flow, this->window_title})

		;add status panel
		(call 'flow 'create nil {this->window_panel})
		(call 'flow 'set_long_prop {this->window_panel, prop_flow_flags, flow_flag_up | flow_flag_fillw | flow_flag_lasth})
		(call 'flow 'add_child {this->window_flow, this->window_panel})

		;add status label ?
		(vpif {flags & window_flag_status})
			(call 'label 'create nil {this->window_status})
			(call 'label 'set_long_prop {this->window_status, prop_color, 0xff808080})
			(call 'flow 'add_child {this->window_panel, this->window_status})
		(endif)

		(assign {this, 1} '(r0 r1))
	(endif)

	(exit 'window 'init '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)

(def-method 'window 'deinit)
	;inputs
	;r0 = window object (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;all but r0

	(entry 'window 'deinit '(r0))

	;dirty my area on parent
	(vp-push r0)
	(call 'window 'get_parent '(r0) '(_ r1))
	(vpif '(r1 != 0))
		(call 'view 'dirty_all '(r1))
		(vp-cpy-ir rsp 0 r0)
	(endif)
	(call 'array 'deref '((r0 window_layout_targets)))
	(vp-pop r0)
	(s-jump 'window 'deinit '(r0))

(def-func-end)

(def-method 'window 'add_child)
	;inputs
	;r0 = window object (ptr)
	;r1 = child view object (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;all but r0

	(entry 'window 'add_child '(r0 r1))

	(vp-push r0)
	(call 'flow 'add_child '((r0 window_panel) r1))
	(vp-pop r0)

	(exit 'window 'add_child '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'draw)
	;inputs
	;r0 = window object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;all but r0

	(entry 'window 'draw '(r0 r1))

	;draw panel
	(vp-push r1)
	(call 'window 'get_long_prop '(r0 prop_border) '(r0 r3))
	(vp-pop r1)
	(call 'window 'draw_panel '(r0 r1 1 r3) '(r0))

	(exit 'window 'draw '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'layout)
	;inputs
	;r0 = window object (ptr)
	;trashes
	;all but r0

	(entry 'window 'layout '(r0))

	(call 'window 'get_long_prop '(r0 prop_border) '(r0 r1))
	(vp-cpy-ir-ui r0 view_w r9)
	(vp-cpy-ir-ui r0 view_h r10)
	(vp-sub-rr r1 r9)
	(vp-sub-rr r1 r10)
	(vp-sub-rr r1 r9)
	(vp-sub-rr r1 r10)
	(vp-push r0)
	(call 'flow 'change '((r0 window_flow) r1 r1 r9 r10))
	(vp-pop r0)
	(call 'window 'get_long_prop '(r0 prop_color) '(r0 r1))
	(vp-shr-cr 24 r1)
	(vpif '(r1 == 0xff))
		(call 'window 'opaque '(r0) '(r0))
	(endif)
	(call 'window 'emit '(r0 (r0 window_layout_targets)) '(r0))

	(exit 'window 'layout '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'mouse_down)
	;inputs
	;r0 = window object (ptr)
	;r1 = mouse event data (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;all but r0

	(entry 'window 'mouse_down '(r0 r1))

	(vp-push r1)
	(call 'window 'get_long_prop '(r0 prop_border) '(r0 r1))
	(vp-pop r2)
	(vp-cpy-ir-i r2 ev_msg_mouse_rx r3)
	(vp-cpy-ir-i r2 ev_msg_mouse_ry r4)
	(vp-xor-rr r2 r2)
	(vpif '(r3 < r1))
		;left edge
		(vp-or-cr window_drag_left r2)
	(endif)
	(vp-cpy-ir-ui r0 view_w r5)
	(vp-cpy-rr r5 r6)
	(vp-sub-rr r1 r6)
	(vpif '(r3 >= r6))
		;right edge
		(vp-or-cr window_drag_right r2)
		(vp-sub-rr r5 r3)
	(endif)
	(vpif '(r4 < r1))
		;top edge
		(vp-or-cr window_drag_top r2)
	(endif)
	(vp-cpy-ir-ui r0 view_h r5)
	(vp-cpy-rr r5 r6)
	(vp-sub-rr r1 r6)
	(vpif '(r4 >= r6))
		;right edge
		(vp-or-cr window_drag_bottom r2)
		(vp-sub-rr r5 r4)
	(endif)
	(vp-cpy-ri-i r2 r0 window_drag_mode)
	(vp-cpy-ri-i r3 r0 window_offset_x)
	(vp-cpy-ri-i r4 r0 window_offset_y)

	(exit 'window 'mouse_down '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'mouse_move)
	;inputs
	;r0 = window object (ptr)
	;r1 = mouse event data (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(ptr 'event)
		(int 'old_x)
		(int 'old_y)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'window 'mouse_move '(r0 (rsp local_event)))
	(vp-cpy-ri r0 rsp local_this)

	;dirty old area
	(call 'window 'dirty '(r0))

	;get smallest size
	(call 'window 'pref_size '(r0) '(r0 r9 r10))
	(vp-cpy-rr r9 r11)
	(vp-cpy-rr r10 r12)

	;save old bounds
	(call 'window 'get_bounds '(r0) '(r0 (rsp local_old_x i) (rsp local_old_y i) r9 r10))

	;get abolute cords of corners
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)

	;drag edges
	(vp-cpy-ir rsp local_event r1)
	(vp-cpy-ir-ui r0 window_drag_mode r14)
	(vp-and-cr window_drag_left r14)
	(vpif '(r14 != 0))
		;drag left edge
		(vp-cpy-ir-i r1 ev_msg_mouse_x r7)
		(vp-cpy-ir-i r0 window_offset_x r14)
		(vp-sub-rr r14 r7)
		(vp-cpy-rr r9 r14)
		(vp-sub-rr r7 r14)
		(vpif '(r14 < r11))
			(vp-cpy-rr r9 r7)
			(vp-sub-rr r11 r7)
		(endif)
	(endif)
	(vp-cpy-ir-ui r0 window_drag_mode r14)
	(vp-and-cr window_drag_right r14)
	(vpif '(r14 != 0))
		;drag right edge
		(vp-cpy-ir-i r1 ev_msg_mouse_x r9)
		(vp-cpy-ir-i r0 window_offset_x r14)
		(vp-sub-rr r14 r9)
		(vp-cpy-rr r9 r14)
		(vp-sub-rr r7 r14)
		(vpif '(r14 < r11))
			(vp-cpy-rr r7 r9)
			(vp-add-rr r11 r9)
		(endif)
	(endif)
	(vp-cpy-ir-ui r0 window_drag_mode r14)
	(vp-and-cr window_drag_top r14)
	(vpif '(r14 != 0))
		;drag top edge
		(vp-cpy-ir-i r1 ev_msg_mouse_y r8)
		(vp-cpy-ir-i r0 window_offset_y r14)
		(vp-sub-rr r14 r8)
		(vp-cpy-rr r10 r14)
		(vp-sub-rr r8 r14)
		(vpif '(r14 < r12))
			(vp-cpy-rr r10 r8)
			(vp-sub-rr r12 r8)
		(endif)
	(endif)
	(vp-cpy-ir-ui r0 window_drag_mode r14)
	(vp-and-cr window_drag_bottom r14)
	(vpif '(r14 != 0))
		;drag bottom edge
		(vp-cpy-ir-i r1 ev_msg_mouse_y r10)
		(vp-cpy-ir-i r0 window_offset_y r14)
		(vp-sub-rr r14 r10)
		(vp-cpy-rr r10 r14)
		(vp-sub-rr r8 r14)
		(vpif '(r14 < r12))
			(vp-cpy-rr r8 r10)
			(vp-add-rr r12 r10)
		(endif)
	(endif)
	(vp-sub-rr r7 r9)
	(vp-sub-rr r8 r10)

	;change window size
	(call 'window 'change '(r0 r7 r8 r9 r10))

	;translate old dirty area and dirty all
	(vp-cpy-ir-i rsp local_old_x r7)
	(vp-cpy-ir-i rsp local_old_y r8)
	(vp-cpy-ir-i r0 view_x r9)
	(vp-cpy-ir-i r0 view_y r10)
	(vp-sub-rr r9 r7)
	(vp-sub-rr r10 r8)
	(vp-lea-i r0 view_dirty_region r1)
	(call 'region 'translate '(r1 r7 r8))

	(vp-cpy-ir rsp local_this r0)
	(vp-free local_size)
	(jump 'window 'dirty_all '(r0))

(def-func-end)

(def-method 'window 'pref_size)
	;inputs
	;r0 = window object (ptr)
	;outputs
	;r0 = window object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;all but r0

	(entry 'window 'pref_size '(r0))

	(call 'window 'get_long_prop '(r0 prop_border) '(r0 r1))
	(vp-push r0 r1)
	(call 'flow 'pref_size '((r0 window_flow)) '(_ r9 r10))
	(vp-pop r0 r1)
	(vp-add-rr r1 r1)
	(vp-add-rr r1 r9)
	(vp-add-rr r1 r10)

	(exit 'window 'pref_size '(r0 r9 r10))
	(vp-ret)

(def-func-end)

(def-method 'window 'set_status)
	;inputs
	;r0 = window object (ptr)
	;r1 = status c string (pubyte)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;all but r0

	(entry 'window 'set_status '(r0 r1))

	(vp-cpy-ir r0 window_status r2)
	(vpif '(r2 != 0))
		(vp-push r0)
		(call 'title 'set_str_prop '(r2 prop_text r1) '(r0))
		(call 'title 'layout '(r0))
		(vp-pop r0)
	(endif)

	(exit 'window 'set_status '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'set_title)
	;inputs
	;r0 = window object (ptr)
	;r1 = title c string (pubyte)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;all but r0

	(entry 'window 'set_title '(r0 r1))

	(vp-push r0)
	(call 'title 'set_str_prop '((r0 window_title) prop_text r1) '(r0))
	(call 'title 'layout '(r0))
	(vp-pop r0)

	(exit 'window 'set_title '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'connect_layout)
	;inputs
	;r0 = window object (ptr)
	;r1 = reciever id (long)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r2-r5

	(entry 'window 'connect_layout '(r0 r1))

	(vp-push r0)
	(call 'array 'push_back '((r0 window_layout_targets) r1))
	(vp-pop r0)

	(exit 'window 'connect_layout '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'connect_close)
	;inputs
	;r0 = window object (ptr)
	;r1 = reciever id (long)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r2-r5

	(entry 'window 'connect_close '(r0 r1))

	(vp-push r0)
	(vp-cpy-ir r0 window_close r0)
	(vpif '(r0 != 0))
		(call 'button 'connect_click '(r0 r1))
	(endif)
	(vp-pop r0)

	(exit 'window 'connect_close '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'connect_max)
	;inputs
	;r0 = window object (ptr)
	;r1 = reciever id (long)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r2-r5

	(entry 'window 'connect_max '(r0 r1))

	(vp-push r0)
	(vp-cpy-ir r0 window_max r0)
	(vpif '(r0 != 0))
		(call 'button 'connect_click '(r0 r1))
	(endif)
	(vp-pop r0)

	(exit 'window 'connect_max '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'connect_min)
	;inputs
	;r0 = window object (ptr)
	;r1 = reciever id (long)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r2-r5

	(entry 'window 'connect_min '(r0 r1))

	(vp-push r0)
	(vp-cpy-ir r0 window_min r0)
	(vpif '(r0 != 0))
		(call 'button 'connect_click '(r0 r1))
	(endif)
	(vp-pop r0)

	(exit 'window 'connect_min '(r0))
	(vp-ret)

(def-func-end)
