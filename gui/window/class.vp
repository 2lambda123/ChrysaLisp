(include "sys/func.inc")
(include "gui/gui/class.inc")
(include "gui/region/class.inc")
(include "gui/window/class.inc")
(include "gui/title/class.inc")
(include "gui/button/class.inc")
(include "gui/flow/class.inc")
(include "gui/ctx/class.inc")
(include "class/sym/class.inc")

(gen-create 'window)
(gen-vtable 'window)

(def-method 'window :init)
	;inputs
	;r0 = window object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = window object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	(entry 'window :init '(r0 r1))

	;init parent
	(s-call 'window :init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(vp-xor-rr r2 r2)
		(assign '(r2 r2 r2 r2)
			'((r0 window_offset_x) (r0 window_offset_y) (r0 window_drag_mode) (r0 window_child)))
	(endif)

	(exit 'window :init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'window :add_child)
	;inputs
	;r0 = window object (ptr)
	;r1 = child view object (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(entry 'window :add_child '(r0 r1))

	(assign '((r0 window_child)) '(r2))
	(vpif '(r2 /= 0))
		(vp-push r0 r1)
		(call 'view :sub '(r2) '(r0))
		(call 'view :deref '(r0))
		(vp-pop r0 r1)
	(endif)
	(assign '(r1) '((r0 window_child)))
	(call 'view :add_back '(r0 r1) '(r0))

	(exit 'window :add_child '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window :draw)
	;inputs
	;r0 = window object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'ctx)
		(int 'border 'shadow)
		(uint 'color)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'window :draw '(r0 r1))
	(assign '(r0 r1) '((rsp local_this) (rsp local_ctx)))

	;draw panel
	(call 'window :get_long_prop '(r0 static_sym_border) '(r0 (rsp local_border)))
	(call 'window :get_long_prop '(r0 static_sym_color) '(r0 (rsp local_color)))
	(call 'window :get_long_prop '(r0 static_sym_shadow) '(r0 r1))
	(assign '(r1) '((rsp local_shadow)))
	(assign '((r0 view_w) (r0 view_h)) '(r9 r10))
	(vp-sub-rr r1 r9)
	(vp-sub-rr r1 r9)
	(vp-sub-rr r1 r10)
	(vp-sub-rr r1 r10)
	(call 'ctx :panel '((rsp local_ctx) (rsp local_color) 1 (rsp local_border) r1 r1 r9 r10))
	(assign '(0x80000000) '(r1))
	(assign '(r1) '((rsp local_color)))
	(loop-start)
		(assign '((rsp local_shadow)) '(r7))
		(breakif '(r7 <= 0))
		(call 'ctx :set_color '((rsp local_ctx) (rsp local_color)))
		(assign '((rsp local_color) 0xff000000 (rsp local_this) (rsp local_shadow)) '(r1 r2 r0 r7))
		(vp-sub-cr 1 r7)
		(vp-cpy-rr r1 r3)
		(vp-shr-cr 1 r1)
		(vp-shr-cr 4 r3)
		(vp-add-rr r3 r1)
		(vp-and-rr r2 r1)
		(assign '(r1 r7) '((rsp local_color) (rsp local_shadow)))

		(assign '((r0 view_w) (r0 view_h)) '(r9 r10))
		(vp-add-cr 1 r7)
		(vp-sub-rr r7 r9)
		(vp-sub-rr r7 r9)
		(vp-sub-rr r7 r10)
		(vp-sub-rr r7 r10)
		(call 'ctx :box '((rsp local_ctx) r7 r7 r9 r10))
	(loop-end)

	(exit 'window :draw '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'window :layout)
	;inputs
	;r0 = window object (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this)
		(int 'border 'shadow)
		(uint 'color)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'window :layout '(r0))
	(assign '(r0) '((rsp local_this)))

	(call 'window :get_long_prop '(r0 static_sym_border) '(r0 (rsp local_border)))
	(call 'window :get_long_prop '(r0 static_sym_shadow) '(r0 (rsp local_shadow)))
	(call 'window :get_long_prop '(r0 static_sym_color) '(r0 (rsp local_color)))

	;position any child
	(assign '((r0 window_child)) '(r0))
	(vpif '(r0 /= 0))
		(assign '((rsp local_this) (rsp local_border) (rsp local_shadow)) '(r0 r1 r2))
		(assign '((r0 view_w) (r0 view_h)) '(r9 r10))
		(vp-add-rr r2 r1)
		(vp-sub-rr r1 r9)
		(vp-sub-rr r1 r10)
		(vp-sub-rr r1 r9)
		(vp-sub-rr r1 r10)
		(call 'view :change '((r0 window_child) r1 r1 r9 r10))
	(endif)

	;adjust window transparetncy details based on color and shadow
	(assign '((rsp local_this) (rsp local_color)) '(r0 r1))
	(vp-shr-cr 24 r1)
	(vpif '(r1 = 0xff))
		(assign '((rsp local_shadow)) '(r1))
		(vpif '(r1 = 0))
			(call 'view :set_flags '(r0 view_flag_opaque view_flag_opaque) '(r0 _))
		(else)
			(call 'view :clr_opaque '((rsp local_this)) '(r0))
			(assign '((rsp local_this) (rsp local_shadow)) '(r1 r7))
			(assign '((r0 view_w) (r0 view_h)) '(r9 r10))
			(vp-sub-rr r7 r9)
			(vp-sub-rr r7 r10)
			(vp-sub-rr r7 r9)
			(vp-sub-rr r7 r10)
			(call 'view :add_opaque '((rsp local_this) r7 r7 r9 r10))
		(endif)
	(endif)

	(exit 'window :layout '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'window :mouse_down)
	;inputs
	;r0 = window object (ptr)
	;r1 = mouse event data (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(entry 'window :mouse_down '(r0 r1))

	(vp-push r1)
	(call 'window :get_long_prop '(r0 static_sym_border) '(r0 r1))
	(vp-push r1)
	(call 'window :get_long_prop '(r0 static_sym_shadow) '(r0 r2))
	(vp-pop r1)
	(vp-add-rr r2 r1)
	(vp-pop r2)
	(assign '((r2 ev_msg_mouse_rx) (r2 ev_msg_mouse_ry)) '(r3 r4))
	(vp-xor-rr r2 r2)
	(vpif '(r3 < r1))
		;left edge
		(vp-or-cr window_drag_left r2)
	(endif)
	(assign '((r0 view_w)) '(r5))
	(vp-cpy-rr r5 r6)
	(vp-sub-rr r1 r6)
	(vpif '(r3 >= r6))
		;right edge
		(vp-or-cr window_drag_right r2)
		(vp-sub-rr r5 r3)
	(endif)
	(vpif '(r4 < r1))
		;top edge
		(vp-or-cr window_drag_top r2)
	(endif)
	(assign '((r0 view_h)) '(r5))
	(vp-cpy-rr r5 r6)
	(vp-sub-rr r1 r6)
	(vpif '(r4 >= r6))
		;right edge
		(vp-or-cr window_drag_bottom r2)
		(vp-sub-rr r5 r4)
	(endif)
	(assign '(r2 r3 r4) '((r0 window_drag_mode) (r0 window_offset_x) (r0 window_offset_y)))

	(exit 'window :mouse_down '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window :mouse_move)
	;inputs
	;r0 = window object (ptr)
	;r1 = mouse event data (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(entry 'window :mouse_move '(r0 r1))

	;get smallest size
	(vp-push r1)
	(call 'window :pref_size '(r0) '(r0 r9 r10))
	(vp-cpy-rr r9 r11)
	(vp-cpy-rr r10 r12)

	;save old bounds
	(call 'window :get_bounds '(r0) '(r0 r7 r8 r9 r10))

	;get abolute cords of corners
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)

	;drag edges
	(vp-pop r1)
	(assign '((r0 window_drag_mode)) '(r14))
	(vp-and-cr window_drag_left r14)
	(vpif '(r14 /= 0))
		;drag left edge
		(assign '((r1 ev_msg_mouse_x) (r0 window_offset_x)) '(r7 r14))
		(vp-sub-rr r14 r7)
		(vp-cpy-rr r9 r14)
		(vp-sub-rr r7 r14)
		(vpif '(r14 < r11))
			(vp-cpy-rr r9 r7)
			(vp-sub-rr r11 r7)
		(endif)
	(endif)
	(assign '((r0 window_drag_mode)) '(r14))
	(vp-and-cr window_drag_right r14)
	(vpif '(r14 /= 0))
		;drag right edge
		(assign '((r1 ev_msg_mouse_x) (r0 window_offset_x)) '(r9 r14))
		(vp-sub-rr r14 r9)
		(vp-cpy-rr r9 r14)
		(vp-sub-rr r7 r14)
		(vpif '(r14 < r11))
			(vp-cpy-rr r7 r9)
			(vp-add-rr r11 r9)
		(endif)
	(endif)
	(assign '((r0 window_drag_mode)) '(r14))
	(vp-and-cr window_drag_top r14)
	(vpif '(r14 /= 0))
		;drag top edge
		(assign '((r1 ev_msg_mouse_y) (r0 window_offset_y)) '(r8 r14))
		(vp-sub-rr r14 r8)
		(vp-cpy-rr r10 r14)
		(vp-sub-rr r8 r14)
		(vpif '(r14 < r12))
			(vp-cpy-rr r10 r8)
			(vp-sub-rr r12 r8)
		(endif)
	(endif)
	(assign '((r0 window_drag_mode)) '(r14))
	(vp-and-cr window_drag_bottom r14)
	(vpif '(r14 /= 0))
		;drag bottom edge
		(assign '((r1 ev_msg_mouse_y) (r0 window_offset_y)) '(r10 r14))
		(vp-sub-rr r14 r10)
		(vp-cpy-rr r10 r14)
		(vp-sub-rr r8 r14)
		(vpif '(r14 < r12))
			(vp-cpy-rr r8 r10)
			(vp-add-rr r12 r10)
		(endif)
	(endif)
	(vp-sub-rr r7 r9)
	(vp-sub-rr r8 r10)

	;change window size and dirty
	(call 'window :change_dirty '(r0 r7 r8 r9 r10) '(r0))
	(jump 'window :emit '(r0))

(def-func-end)

(def-method 'window :pref_size)
	;inputs
	;r0 = window object (ptr)
	;outputs
	;r0 = window object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this)
		(int 'border 'shadow)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'window :pref_size '(r0))
	(assign '(r0) '((rsp local_this)))

	(call 'window :get_long_prop '(r0 static_sym_border) '(r0 (rsp local_border)))
	(call 'window :get_long_prop '(r0 static_sym_shadow) '(r0 (rsp local_shadow)))
	(assign '((r0 window_child) 0 0) '(r0 r9 r10))
	(vpif '(r0 /= 0))
		(call 'flow :pref_size '(r0) '(_ r9 r10))
	(endif)
	(assign '((rsp local_border) (rsp local_shadow)) '(r1 r2))
	(vp-add-rr r2 r1)
	(vp-add-rr r1 r9)
	(vp-add-rr r1 r10)
	(vp-add-rr r1 r9)
	(vp-add-rr r1 r10)

	(exit 'window :pref_size '((rsp local_this) r9 r10))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
