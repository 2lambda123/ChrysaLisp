(include 'sys/func.inc)
(include 'gui/canvas/class.inc)
(include 'class/str/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(def-method 'canvas 'lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(entry 'canvas 'lisp_create {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 3} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'create {arg0, arg1, arg2} {value})

	(exit 'canvas 'lisp_create {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(create-canvas width height aa_scale)", error_msg_wrong_types, args})
	(signature 'sig 'num 'num 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_load)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'canvas 'lisp_load {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'load {&arg0->str_data, arg1} {value})
	(vpifnot {value})
		(call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

	(exit 'canvas 'lisp_load {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-load path flags)", error_msg_wrong_types, args})
	(signature 'sig 'str 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_fill)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'canvas 'lisp_fill {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'fill {arg0, arg1})
	(call 'obj 'ref {arg0} {value})

	(exit 'canvas 'lisp_fill {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-fill canvas argb)", error_msg_wrong_types, args})
	(signature 'sig 'canvas 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_set_color)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'canvas 'lisp_set_color {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'set_color {arg0, arg1})
	(call 'obj 'ref {arg0} {value})

	(exit 'canvas 'lisp_set_color {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-set-color canvas argb)", error_msg_wrong_types, args})
	(signature 'sig 'canvas 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_set_flags)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'canvas 'lisp_set_flags {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'set_flags {arg0, arg1})
	(call 'obj 'ref {arg0} {value})

	(exit 'canvas 'lisp_set_flags {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-set-flags canvas flags)", error_msg_wrong_types, args})
	(signature 'sig 'canvas 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_swap)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(entry 'canvas 'lisp_swap {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'swap {arg0})
	(call 'canvas 'dirty {arg0})
	(call 'obj 'ref {arg0} {value})

	(exit 'canvas 'lisp_swap {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-swap canvas)", error_msg_wrong_types, args})
	(signature 'sig 'canvas))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_next_frame)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(entry 'canvas 'lisp_next_frame {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'next_frame {arg0})
	(call 'obj 'ref {arg0} {value})

	(exit 'canvas 'lisp_next_frame {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-next-frame canvas)", error_msg_wrong_types, args})
	(signature 'sig 'canvas))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_plot)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(entry 'canvas 'lisp_plot {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 3} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'plot {arg0, arg1, arg2})
	(call 'obj 'ref {arg0} {value})

	(exit 'canvas 'lisp_plot {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-plot canvas x y)", error_msg_wrong_types, args})
	(signature 'sig 'canvas 'num 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_fbox)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(entry 'canvas 'lisp_fbox {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 5} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'fbox {arg0, arg1, arg2, arg3, arg4})
	(call 'obj 'ref {arg0} {value})

	(exit 'canvas 'lisp_fbox {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-fbox canvas x y w h)", error_msg_wrong_types, args})
	(signature 'sig 'canvas 'num 'num 'num 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'canvas 'lisp_fpoly)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(entry 'canvas 'lisp_fpoly {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 5} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'canvas 'fpoly {arg0, arg1, arg2, arg3, arg4})
	(call 'obj 'ref {arg0} {value})

	(exit 'canvas 'lisp_fpoly {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(canvas-fpoly canvas x y mode list)", error_msg_wrong_types, args})
	(signature 'sig 'canvas 'num 'num 'num 'vector))

	(pop-scope-syms)

(def-func-end)
