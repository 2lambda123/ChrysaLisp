(include 'sys/func.inc)
(include 'gui/canvas/class.inc)
(include 'class/str/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(def-method 'canvas 'lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_create '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 3) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r7 array_array r2)
	(vp-cpy-ir r2 0 r0)
	(vp-cpy-ir r2 ptr_size r1)
	(vp-cpy-ir r2 (mul ptr_size 2) r2)
	(call 'canvas 'create '((r0 num_value) (r1 num_value) (r2 num_value)) '(r1))
	(vp-pop r0)

	(exit 'canvas 'lisp_create '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(create-canvas width height scale)" error_msg_wrong_types r7))
	(signature 'sig 'num 'num 'num))

(def-func-end)

(def-method 'canvas 'lisp_load)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_load '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r7 array_array r2)
	(vp-cpy-ir r2 0 r0)
	(vp-cpy-ir r2 ptr_size r1)
	(call 'canvas 'load '((& r0 str_data) (r1 num_value)) '(r0))
	(vpif '(r0 == 0))
		(vp-cpy-ir rsp 0 r0)
		(call 'obj 'ref '((r0 lisp_sym_nil)) '(r0))
	(endif)
	(vp-cpy-rr r0 r1)
	(vp-pop r0)

	(exit 'canvas 'lisp_load '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-load path flags)" error_msg_wrong_types r7))
	(signature 'sig 'str 'num))

(def-func-end)

(def-method 'canvas 'lisp_fill)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_fill '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-cpy-ir r7 array_array r2)
	(vp-cpy-ir r2 0 r0)
	(vp-cpy-ir r2 ptr_size r1)
	(call 'canvas 'fill '(r0 (r1 num_value)) '(r0))
	(call 'obj 'ref '(r0) '(r0))

	(exit 'canvas 'lisp_fill '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-fill canvas argb)" error_msg_wrong_types r7))
	(signature 'sig 'canvas 'num))

(def-func-end)

(def-method 'canvas 'lisp_set_color)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_set_color '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-cpy-ir r7 array_array r2)
	(vp-cpy-ir r2 0 r0)
	(vp-cpy-ir r2 ptr_size r1)
	(call 'canvas 'set_color '(r0 (r1 num_value)) '(r0 _))
	(call 'obj 'ref '(r0) '(r0))

	(exit 'canvas 'lisp_set_color '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-set-color canvas argb)" error_msg_wrong_types r7))
	(signature 'sig 'canvas 'num))

(def-func-end)

(def-method 'canvas 'lisp_set_flags)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_set_flags '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-cpy-ir r7 array_array r2)
	(vp-cpy-ir r2 0 r0)
	(vp-cpy-ir r2 ptr_size r1)
	(call 'canvas 'set_flags '(r0 (r1 num_value)) '(r0 _))
	(call 'obj 'ref '(r0) '(r0))

	(exit 'canvas 'lisp_set_flags '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-set-flags canvas flags)" error_msg_wrong_types r7))
	(signature 'sig 'canvas 'num))

(def-func-end)

(def-method 'canvas 'lisp_swap)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_swap '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r7 array_array r2)
	(vp-cpy-ir r2 0 r0)
	(call 'canvas 'swap '(r0) '(r0))
	(call 'canvas 'dirty '(r0) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas 'lisp_swap '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-swap canvas)" error_msg_wrong_types r7))
	(signature 'sig 'canvas))

(def-func-end)

(def-method 'canvas 'lisp_next_frame)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_next_frame '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-cpy-ir r7 array_array r2)
	(vp-cpy-ir r2 0 r0)
	(call 'canvas 'next_frame '(r0) '(r0))
	(call 'obj 'ref '(r0) '(r0))

	(exit 'canvas 'lisp_next_frame '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-next-frame canvas)" error_msg_wrong_types r7))
	(signature 'sig 'canvas))

(def-func-end)

(def-method 'canvas 'lisp_plot)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_plot '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 3) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r7 array_array r2)
	(vp-cpy-ir r2 0 r0)
	(vp-cpy-ir r2 ptr_size r1)
	(vp-cpy-ir r2 (mul ptr_size 2) r2)
	(call 'canvas 'plot '(r0 (r1 num_value) (r2 num_value)) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas 'lisp_plot '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-plot canvas x y)" error_msg_wrong_types r7))
	(signature 'sig 'canvas 'num 'num))

(def-func-end)

(def-method 'canvas 'lisp_fbox)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_fbox '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 5) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r7 array_array r4)
	(vp-cpy-ir r4 0 r0)
	(vp-cpy-ir r4 ptr_size r1)
	(vp-cpy-ir r4 (mul ptr_size 2) r2)
	(vp-cpy-ir r4 (mul ptr_size 3) r3)
	(vp-cpy-ir r4 (mul ptr_size 4) r4)
	(call 'canvas 'fbox '(r0 (r1 num_value) (r2 num_value) (r3 num_value) (r4 num_value)) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas 'lisp_fbox '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-fbox canvas x y w h)" error_msg_wrong_types r7))
	(signature 'sig 'canvas 'num 'num 'num 'num))

(def-func-end)

(def-method 'canvas 'lisp_fpoly)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'lisp_fpoly '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 5) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r7 array_array r4)
	(vp-cpy-ir r4 0 r0)
	(vp-cpy-ir r4 ptr_size r1)
	(vp-cpy-ir r4 (mul ptr_size 2) r2)
	(vp-cpy-ir r4 (mul ptr_size 3) r3)
	(vp-cpy-ir r4 (mul ptr_size 4) r4)
	(call 'canvas 'fpoly '(r0 (r1 num_value) (r2 num_value) (r3 num_value) r4) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas 'lisp_fpoly '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(canvas-fpoly canvas x y mode list)" error_msg_wrong_types r7))
	(signature 'sig 'canvas 'num 'num 'num 'vector))

(def-func-end)
