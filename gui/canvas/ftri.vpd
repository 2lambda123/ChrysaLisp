(include "sys/func.inc")
(include "gui/canvas/class.inc")

(def-method 'canvas :ftri)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = x0 (fixed)
	;r2 = y0 (fixed)
	;r3 = x1 (fixed)
	;r4 = y1 (fixed)
	;r5 = x2 (fixed)
	;r6 = y2 (fixed)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r14

	(defun op3 (op a b c x y z) (op a x) (op b y) (op c z))
	(defun op2 (op a b x y) (op a x) (op b y))
	(defun opmin (a b) (vpif (list a '< b)) (vp-cpy-rr a b) (endif))
	(defun opmax (a b) (vpif (list a '> b)) (vp-cpy-rr a b) (endif))

	(def-vars
		(ptr this)
		(int a0 a1 a2 b0 b1 b2)
		(int x0 x1 x2 y0 y1 y2)
		(int bx by bx1 by1 bxf byf))

	(push-scope)
	(entry 'canvas :ftri {this, x0, y0, x1, y1, x2, y2})

	(vp-def (this bx by x1 y1 x2 y2 bx1 by1 cx cy cx1 cy1 bxf byf) (method-input 'canvas :ftri))
	(assign {x0, y0, x0, y0, x1, y1, x2, y2,
			this->canvas_cx, this->canvas_cy, this->canvas_cx1, this->canvas_cy1}
		(list bx by bx1 by1 x1 y1 x2 y2 cx cy cx1 cy1))
	(opmin x1 bx) (opmax x1 bx1)
	(opmin x2 bx) (opmax x2 bx1)
	(opmin y1 by) (opmax y1 by1)
	(opmin y2 by) (opmax y2 by1)
	(op2 vp-asr-cr +fp_shift +fp_shift bx by)
	(op2 vp-asr-cr +fp_shift +fp_shift bx1 by1)
	(op2 vp-add-cr 1 1 bx1 by1)

	(vpif (list bx '< cx1) (list by '< cy1) (list bx1 '> cx) (list by1 '> cy))
		(opmax cx bx) (opmax cy by)
		(opmin cx1 bx1) (opmin cy1 by1)
		(op2 vp-cpy-rr bx by bxf byf)
		(op2 vp-shl-cr +fp_shift +fp_shift bxf byf)
		(op2 vp-add-cr 0.5 0.5 bxf byf)
		(assign (list bx by bx1 by1 bxf byf) {bx, by, bx1, by1, bxf, byf})

		; aX + bY + c = 0. a, b terms
		(vp-def (a0 a1 a2 c0 c1 c2 b0 b1 b2 x0 x1 x2 y0 y1 y2))
		(assign {x0, x1, x2, y0, y1 ,y2} (list x0 x1 x2 y0 y1 y2))
		(op3 vp-cpy-rr y1 y2 y0 a0 a1 a2)
		(op3 vp-cpy-rr x0 x1 x2 b0 b1 b2)
		(op3 vp-sub-rr y0 y1 y2 a0 a1 a2)
		(op3 vp-sub-rr x1 x2 x0 b0 b1 b2)
		(assign (list a0 a1 a2 b0 b1 b2) {a0, a1, a2, b0, b1, b2})

		; aX + bY + c = 0. c terms
		(op3 vp-cpy-rr x1 x2 x0 c0 c1 c2)
		(op3 vp-add-rr c0 c1 c2 x0 x1 x2)
		(op3 vp-mul-rr a0 a1 a2 x0 x1 x2)
		(op3 vp-cpy-rr y1 y2 y0 c0 c1 c2)
		(op3 vp-add-rr y0 y1 y2 c0 c1 c2)
		(op3 vp-mul-rr b0 b1 b2 c0 c1 c2)
		(op3 vp-add-rr x0 x1 x2 c0 c1 c2)
		(op3 vp-asr-cr 1 1 1 c0 c1 c2)
		(op3 vp-mul-cr -1 -1 -1 c0 c1 c2)

		; aX + bY + c = 0. starting c values
		(vp-def (a0 a1 a2 c0 c1 c2 b0 b1 b2 bxf byf))
		(assign {bxf, byf} (list bxf byf))
		(op3 vp-mul-rr bxf bxf bxf a0 a1 a2)
		(op3 vp-mul-rr byf byf byf b0 b1 b2)
		(op3 vp-add-rr a0 a1 a2 c0 c1 c2)
		(op3 vp-add-rr b0 b1 b2 c0 c1 c2)
		(op3 vp-asr-cr +fp_shift +fp_shift +fp_shift c0 c1 c2)
		(assign (list c0 c1 c2) {y0, y1, y2})

		(vp-def (this bx1 bx by cx by1 c0 c1 c2 i0 i1 i2) (method-input 'canvas :span_noclip))
		(assign {this, y0, y1, y2, bx, by, bx1} (list this c0 c1 c2 bx by bx1))
		(loop-start)
			(assign {a0, a1, a2} (list i0 i1 i2))
			(loop-start 'bxloop)
				(vpif (list c0 '>= 0) (list c1 '>= 0))
					(breakif (list c2 '>= 0) 'bxloop)
				(endif)
				(vp-add-cr 1 bx)
				(op3 vp-add-rr i0 i1 i2 c0 c1 c2)
			(loop-until (list bx '>= bx1))
			(vp-cpy-rr bx cx)
			(loop-while (list c0 '>= 0) (list c1 '>= 0) (list c2 '>= 0))
				(vp-add-cr 1 cx)
				(op3 vp-add-rr i0 i1 i2 c0 c1 c2)
			(loop-until (list cx '>= bx1))
			(vpif (list bx '< cx))
				(call 'canvas :span_noclip (list this 0x80 bx by cx) (list this))
			(endif)
			(assign {b0, b1, b2, y0, y1, y2, bx, by, bx1, by1} (list i0 i1 i2 c0 c1 c2 bx by bx1 by1))
			(op3 vp-add-rr i0 i1 i2 c0 c1 c2)
			(vp-add-cr 1 by)
			(assign (list c0 c1 c2 by) {y0, y1, y2, by})
		(loop-until (list by '>= by1))
	(endif)

	(exit 'canvas :ftri {this})
	(pop-scope)
	(return)

(def-func-end)
