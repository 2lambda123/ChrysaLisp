(include "sys/func.inc")
(include "gui/canvas/class.inc")
(include "class/list/class.inc")
(include "gui/path/class.inc")
(include "gui/pixmap/class.inc")

(def-method 'canvas :ftri)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = x0 (fixed)
	;r2 = y0 (fixed)
	;r3 = x1 (fixed)
	;r4 = y1 (fixed)
	;r5 = x2 (fixed)
	;r6 = y2 (fixed)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r14

	(def-vars
		(ptr this)
		(int a0 a1 a2 b0 b1 b2)
		(int x0 x1 x2 y0 y1 y2)
		(int bx by bx1 by1 bxf byf))

	(push-scope)
	(entry 'canvas :ftri {this, x0, y0, x1, y1, x2, y2})

	(vp-def (bx by x1 y1 x2 y2 bx1 by1 cx cy cx1 cy1 bxf byf) (slice 1 -1 (method-input 'canvas :ftri)))
	(assign {x0, y0, x0, y0, x1, y1, x2, y2,
			this->canvas_cx, this->canvas_cy, this->canvas_cx1, this->canvas_cy1}
		(list bx by bx1 by1 x1 y1 x2 y2 cx cy cx1 cy1))
	(vpif (list x1 '< bx)) (vp-cpy-rr x1 bx) (endif)
	(vpif (list x1 '> bx1)) (vp-cpy-rr x1 bx1) (endif)
	(vpif (list x2 '< bx)) (vp-cpy-rr x2 bx) (endif)
	(vpif (list x2 '> bx1)) (vp-cpy-rr x2 bx1) (endif)
	(vpif (list y1 '< by)) (vp-cpy-rr y1 by) (endif)
	(vpif (list y1 '> by1)) (vp-cpy-rr y1 by1) (endif)
	(vpif (list y2 '< by)) (vp-cpy-rr y2 by) (endif)
	(vpif (list y2 '> by1)) (vp-cpy-rr y2 by1) (endif)
	(vp-asr-cr +fp_shift bx)
	(vp-asr-cr +fp_shift by)
	(vp-asr-cr +fp_shift bx1)
	(vp-asr-cr +fp_shift by1)
	(vp-add-cr 1 bx1)
	(vp-add-cr 1 by1)

	(vpif (list bx '< cx1) (list by '< cy1) (list bx1 '> cx) (list by1 '> cy))
		(vpif (list cx '> bx)) (vp-cpy-rr cx bx) (endif)
		(vpif (list cy '> by)) (vp-cpy-rr cy by) (endif)
		(vpif (list cx1 '< bx1)) (vp-cpy-rr cx1 bx1) (endif)
		(vpif (list cy1 '< by1)) (vp-cpy-rr cy1 by1) (endif)
		(vp-cpy-rr bx bxf)
		(vp-cpy-rr by byf)
		(vp-shl-cr +fp_shift bxf)
		(vp-shl-cr +fp_shift byf)
		(vp-add-cr (<< 1 (dec +fp_shift)) bxf)
		(vp-add-cr (<< 1 (dec +fp_shift)) byf)
		(assign (list bx by bx1 by1 bxf byf) {bx, by, bx1, by1, bxf, byf})

		(vp-def (a0 a1 a2 b0 b1 b2 c0 c1 c2 x0 x1 x2 y0 y1 y2))
		(assign {x0, x1, x2, y0, y1 ,y2} (list x0 x1 x2 y0 y1 y2))
		(assign (list y1 y2 y0 x0 x1 x2) (list a0 a1 a2 b0 b1 b2))
		(vp-sub-rr y0 a0) (vp-sub-rr y1 a1) (vp-sub-rr y2 a2)
		(vp-sub-rr x1 b0) (vp-sub-rr x2 b1) (vp-sub-rr x0 b2)
		(assign (list a0 a1 a2 b0 b1 b2) {a0, a1, a2, b0, b1, b2})

		(assign (list x1 x2 x0) (list c0 c1 c2))
		(vp-add-rr c0 x0) (vp-add-rr c1 x1) (vp-add-rr c2 x2)
		(vp-mul-rr a0 x0) (vp-mul-rr a1 x1) (vp-mul-rr a2 x2)
		(vp-asr-cr +fp_shift x0) (vp-asr-cr +fp_shift x1) (vp-asr-cr +fp_shift x2)
		(assign (list y1 y2 y0) (list c0 c1 c2))
		(vp-add-rr c0 y0) (vp-add-rr c1 y1) (vp-add-rr c2 y2)
		(vp-mul-rr b0 y0) (vp-mul-rr b1 y1) (vp-mul-rr b2 y2)
		(vp-asr-cr +fp_shift y0) (vp-asr-cr +fp_shift y1) (vp-asr-cr +fp_shift y2)
		(assign (list -0.5 -0.5 -0.5) (list c0 c1 c2))
		(vp-add-rr x0 y0) (vp-add-rr x1 y1) (vp-add-rr x2 y2)
		(vp-mul-rr y0 c0) (vp-mul-rr y1 c1) (vp-mul-rr y2 c2)
		(vp-asr-cr +fp_shift c0) (vp-asr-cr +fp_shift c1) (vp-asr-cr +fp_shift c2)

		(vp-def (a0 a1 a2 b0 b1 b2 c0 c1 c2 bxf byf))
		(assign {bxf, byf} (list bxf byf))
		(vp-mul-rr bxf a0) (vp-mul-rr bxf a1) (vp-mul-rr bxf a2)
		(vp-mul-rr byf b0) (vp-mul-rr byf b1) (vp-mul-rr byf b2)
		(vp-asr-cr +fp_shift a0) (vp-asr-cr +fp_shift a1) (vp-asr-cr +fp_shift a2)
		(vp-asr-cr +fp_shift b0) (vp-asr-cr +fp_shift b1) (vp-asr-cr +fp_shift b2)
		(vp-add-rr b0 a0) (vp-add-rr b1 a1) (vp-add-rr b2 a2)
		(vp-add-rr a0 c0) (vp-add-rr a1 c1) (vp-add-rr a2 c2)
		(assign (list c0 c1 c2) {y0, y1, y2})

		(loop-start)
			(vp-def (this bx1 cx by cx1 x0 x1 x2 a0 a1 a2) (method-input 'canvas :span_noclip))
			(assign {a0, a1, a2, y0, y1, y2, bx, bx1} (list a0 a1 a2 x0 x1 x2 cx bx1))
			(loop-start 'cxloop)
				(vpif (list x0 '>= 0) (list x1 '>= 0))
					(breakif (list x2 '>= 0) 'cxloop)
				(endif)
				(vp-add-rr a0 x0) (vp-add-rr a1 x1) (vp-add-rr a2 x2)
				(vp-add-cr 1 cx)
			(loop-until (list cx '>= bx1))
			(vp-cpy-rr cx cx1)
			(loop-while (list x0 '>= 0) (list x1 '>= 0) (list x2 '>= 0))
				(vp-add-rr a0 x0) (vp-add-rr a1 x1) (vp-add-rr a2 x2)
				(vp-add-cr 1 cx1)
			(loop-until (list cx1 '>= bx1))
			(vpif (list cx '< cx1))
				(assign {this, by} (list this by))
				(call 'canvas :span_noclip (list this 0x80 cx by cx1))
			(endif)
			(vp-def (b0 b1 b2 y0 y1 y2 by by1))
			(assign {b0, b1, b2, y0, y1, y2, by, by1} (list b0 b1 b2 y0 y1 y2 by by1))
			(vp-add-rr b0 y0) (vp-add-rr b1 y1) (vp-add-rr b2 y2)
			(vp-add-cr 1 by)
			(assign (list y0 y1 y2 by) {y0, y1, y2, by})
		(loop-until (list by '>= by1))
	(endif)

	(exit 'canvas :ftri {this})
	(pop-scope)
	(return)

(def-func-end)
