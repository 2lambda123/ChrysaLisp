(include 'sys/func.inc)
(include 'gui/canvas/class.inc)
(include 'gui/ctx/class.inc)
(include 'class/stream/class.inc)
(include 'class/array/class.inc)

(def-struct 'cpm)
	(uint 'ident)		;ident '.CPM' or '.FLM'
	(uint 'bytes)		;0 if not known, else total size
	(uint 'version)		;version number
	(uint 'type)		;image type
	(uint 'width)		;image w
	(uint 'height)		;image h
	(uint 'trans)		;image transparent colour
(def-struct-end)

(def-method 'canvas 'load_cpm)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = 0 if error, else canvas object (ptr)
	;trashes
	;all

	(ptr 'this 'stream)
	(puint 'data 'data_end)
	(ulong 'bit_pool)
	(struct 'header 'cpm)
	(int 'length 'bit_pool_size)
	(ulong 'col)

	;save inputs
	(push-scope)
	(entry 'canvas 'load_cpm {stream})

	;read header
	(call 'stream 'read {stream, &header, cpm_size} {_, length})
	(gotoif {length != cpm_size} 'error1)

	;check ident '.CPM' or '.FLM'
	(gotoifnot (cat {header.cpm_ident == } (str (code "MPC." 4))
			{ || header.cpm_ident == } (str (code "MLF." 4))) 'error1)

	;create canvas
	(call 'canvas 'create {header.cpm_width, header.cpm_height, 1} {this})
	(vpif {this})
		;fill with transparent
		(call 'canvas 'fill {this, 0})
		(assign {header.cpm_type} {this->canvas_stream_type})
		(assign {this->canvas_array->array_array} {data})
		(assign {data + this->canvas_height * this->canvas_stride} {data_end})
		(assign {0 => bit_pool} {bit_pool_size})

		;decode acording to type
		(vp-def (r_col r_len r_trans r_data r_data_end))
		(loop-start)
			;get token
			(call 'stream 'read_bits {stream, 8, bit_pool, bit_pool_size} {_, length, bit_pool, bit_pool_size})
			(assign {length} (list r_len))
			(gotoif (list r_len '== -1) 'error)
			(vpif (list r_len '>= 128))
				;run of a pixel
				(vp-sub-cr 127 r_len)
				(assign (list r_len) {length})
				(call 'canvas 'read_pixel {stream, header.cpm_type, bit_pool, bit_pool_size} {col, bit_pool, bit_pool_size})
				(assign {col} (list r_col))
				(gotoif (list r_col '== -1) 'error)

				;fill or skip
				(assign {length, header.cpm_trans, data, data_end}
					(list r_len r_trans r_data r_data_end))
				(vpif (list r_col '!= r_trans))
					(loop-start)
						(gotoif (list r_data '>= r_data_end) 'error)
						(vp-cpy-ri-i r_col r_data 0)
						(vp-sub-cr 1 r_len)
						(vp-add-cr int_size r_data)
					(loop-until (list r_len '== 0))
				(else)
					(vp-shl-cr (log2 int_size) r_len)
					(vp-add-rr r_len r_data)
				(endif)
			(else)
				;block of pixels
				(vp-add-cr 1 r_len)
				(loop-start)
					(assign (list r_len) {length})
					(call 'canvas 'read_pixel {stream, header.cpm_type, bit_pool, bit_pool_size} {col, bit_pool, bit_pool_size})
					(assign {col} (list r_col))
					(gotoif (list r_col '== -1) 'error)
					(assign {length, header.cpm_trans, data, data_end}
						(list r_len r_trans r_data r_data_end))
					(gotoif (list r_data '>= r_data_end) 'error)
					(vpif (list r_col '!= r_trans))
						(vp-cpy-ri-i r_col r_data 0)
					(endif)
					(vp-sub-cr 1 r_len)
					(vp-add-cr int_size r_data)
					(assign (list r_data) {data})
				(loop-until (list r_len '== 0))
			(endif)
			(assign (list r_data) {data})
		(loop-until (list r_data '== r_data_end))
		(call 'canvas 'as_premul {this, this})
	(endif)

	(exit 'canvas 'load_cpm {this})
	(return)

(vp-label 'error)
	(call 'canvas 'deref {this})
(vp-label 'error1)
	(exit 'canvas 'load_cpm '(0))
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas 'next_frame)
	;inputs
	;r0 = canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(ptr 'this)
	(puint 'data 'data_end)
	(ulong 'col)
	(int 'length)

	;save inputs
	(push-scope)
	(entry 'canvas 'next_frame {this})

	(vpif {this->canvas_stream} 'error)
		;decode acording to type
		(assign {this->canvas_array->array_array} {data})
		(assign {data + this->canvas_height * this->canvas_stride} {data_end})

		(vp-def (r_col r_len r_data r_data_end))
		(loop-start)
			;get token, loop back if stream end
			(loop-start)
				(call 'stream 'read_char {this->canvas_stream} (list '_ r_len))
				(breakif (list r_len '!= -1))
				(assign {this->canvas_bufp} {this->canvas_stream->stream_bufp})
			(loop-end)

			;decode token
			(vpif (list r_len '>= 128))
				;skip
				(assign {data, data_end} (list r_data r_data_end))
				(vp-sub-cr 256 r_len)
				(vp-shl-cr (log2 int_size) r_len)
				(vp-sub-rr r_len r_data)
			(else)
				;block of pixels
				(loop-start)
					(assign (list r_len) {length})
					(call 'canvas 'read_pixel {this->canvas_stream, this->canvas_stream_type, 0, 0} {col, _, _})
					(assign {col} (list r_col))
					(breakif (list r_col '== -1) 'error)
					(assign {length, data, data_end} (list r_len r_data r_data_end))
					(breakif (list r_data '>= r_data_end) 'error)
					(vp-cpy-ri-i r_col r_data 0)
					(vp-sub-cr 1 r_len)
					(vp-add-cr int_size r_data)
					(assign (list r_data) {data})
				(loop-until (list r_len '== 0))
			(endif)
			(assign (list r_data) {data})
		(loop-until (list r_data '== r_data_end))
	(endif)

	(exit 'canvas 'next_frame {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas 'read_pixel)
	;inputs
	;r0 = stream object (ptr)
	;r1 = pixel type (uint)
	;r2 = bit pool (ulong)
	;r3 = bit pool size (uint)
	;outputs
	;r0 = -1 if error, else pixel (long)
	;r1 = bit pool (ulong)
	;r2 = bit pool size (uint)
	;trashes
	;all

	(def-struct 'local)
		(ulong 'bit_pool)
		(uint 'bit_pool_size)
		(uint 'type)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'canvas 'read_pixel '(r0 r1 r2 r3))

	(vp-cpy-ri-i r1 rsp local_type)
	(call 'stream 'read_bits '(r0 r1 r2 r3) '(_ r0 (rsp local_bit_pool) (rsp local_bit_pool_size i)))
	(vpif '(r0 != -1))
		(call 'canvas 'to_argb32 '(r0 (rsp local_type ui)) '(r0))
		(exit 'canvas 'read_pixel '(r0 (rsp local_bit_pool) (rsp local_bit_pool_size ui)))
	(endif)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'canvas 'to_argb32)
	;inputs
	;r0 = col (uint)
	;r1 = pixel type (uint)
	;outputs
	;r0 = col (uint)
	;trashes
	;r1-r7

	(vp-def (r_col r_pix r_rh r_rl r_gh r_gl r_bh r_bl) '(r0 r1))

	(entry 'canvas 'to_argb32 (list r_col r_pix))

	(switch)
	(vpcase (list r_pix '== 32))
		(vp-cpy-cr argb_black r_pix)
		(vp-xor-rr r_pix r_col)
		(break)
	(vpcase (list r_pix '== 24))
		(vp-cpy-cr argb_black r_pix)
		(vp-add-rr r_pix r_col)
		(break)
	(vpcase (list r_pix '== 16))
		(vp-cpy-rr r_col r_rh)
		(vp-cpy-rr r_col r_rl)
		(vp-cpy-rr r_col r_gh)
		(vp-cpy-rr r_col r_gl)
		(vp-cpy-rr r_col r_bh)
		(vp-cpy-rr r_col r_bl)
		(vp-and-cr 0b1111100000000000 r_rh)
		(vp-and-cr 0b1110000000000000 r_rl)
		(vp-and-cr 0b11111100000 r_gh)
		(vp-and-cr 0b11000000000 r_gl)
		(vp-and-cr 0b11111 r_bh)
		(vp-and-cr 0b11100 r_bl)
		(vp-shl-cr 8 r_rh)
		(vp-shl-cr 3 r_rl)
		(vp-shl-cr 5 r_gh)
		(vp-shr-cr 1 r_gl)
		(vp-shl-cr 3 r_bh)
		(vp-shr-cr 2 r_bl)
		(vp-cpy-cr argb_black r_col)
		(vp-add-rr r_rh r_rl)
		(vp-add-rr r_gh r_gl)
		(vp-add-rr r_bh r_bl)
		(vp-add-rr r_rl r_col)
		(vp-add-rr r_gl r_col)
		(vp-add-rr r_bl r_col)
		(break)
	(default)
		(vpif '(r_col == 0))
			(vp-cpy-cr argb_black r_col)
		(else)
			(vp-cpy-cr argb_white r_col)
		(endif)
	(endswitch)

	(exit 'canvas 'to_argb32 (list r_col))
	(vp-ret)

(def-func-end)
