(include 'sys/func.inc)
(include 'gui/canvas/class.inc)
(include 'gui/ctx/class.inc)
(include 'class/stream/class.inc)

(def-struct 'cpm)
	(uint 'ident)		;ident '.CPM' or '.FLM'
	(uint 'bytes)		;0 if not known, else total size
	(uint 'version)		;version number
	(uint 'type)		;image type
	(uint 'width)		;image w
	(uint 'height)		;image h
	(uint 'trans)		;image transparent colour
(def-struct-end)

(def-method 'canvas 'load_cpm)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = 0 if error, else canvas object (ptr)
	;trashes
	;all

	(ptr 'this 'stream)
	(struct 'header 'cpm)
	(long 'col)
	(int 'length 'run 'x 'y)

	;save inputs
	(push-scope)
	(entry 'canvas 'load_cpm {stream})

	;read header
	(assign {0} {this})
	(call 'stream 'read {stream, &header, cpm_size} {_, length})
	(vpif {length == cpm_size})
		;check ident '.CPM' or '.FLM'
		(vpif (cat {header.cpm_ident == } (str (code "MPC." 4))
				{ || header.cpm_ident == } (str (code "MLF." 4))))
			;create canvas
			(call 'canvas 'create {header.cpm_width, header.cpm_height, 1} {this})
			(vpif {this})
				(call 'canvas 'fill {this, 0})
				;decode acording to version
				(assign {0, 0} {x, y})
				(loop-start)
					;get token
					(call 'stream 'read_char {stream} {_, run})
					(gotoif {run == -1} 'error)
					(vpif {run >= 128})
						;run of a pixel
						(call 'read_pixel {stream, header.cpm_type} {col})
						(gotoif {col == -1} 'error)

						;plot repeatedly
						(call 'canvas 'set_color {this, col})
						(assign {run - 127} {run})
						(loop-start)
							(vpif {col != header.cpm_trans})
								(call 'canvas 'plot {this, x, y})
							(endif)
							(assign {x + 1} {x})
							(vpif {x == header.cpm_width})
								(assign {0, y + 1} {x, y})
							(endif)
							(assign {run - 1} {run})
						(loop-untilnot {run})
					(else)
						;block of pixels
						(assign {run + 1} {run})
						(loop-start)
							(call 'read_pixel {stream, header.cpm_type} {col})
							(gotoif {col == -1} 'error)
							(vpif {col != header.cpm_trans})
								(call 'canvas 'set_color {this, col})
								(call 'canvas 'plot {this, x, y})
							(endif)
							(assign {x + 1} {x})
							(vpif {x == header.cpm_width})
								(assign {0, y + 1} {x, y})
							(endif)
							(assign {run - 1} {run})
						(loop-untilnot {run})
					(endif)
				(loop-until {y == header.cpm_height})
			(endif)
		(endif)
	(endif)

(vp-label 'funcexit)
	(exit 'canvas 'load_cpm {this})
	(return)

(vp-label 'error)
	(call 'canvas 'deref {this})
	(assign {0} {this})
	(goto 'funcexit)

	(pop-scope-syms)

(vp-label 'read_pixel)
	;inputs
	;r0 = stream object (ptr)
	;r1 = pixel type (uint)
	;outputs
	;r0 = -1 if error, else col (uint)

	(vp-def (col pix stream) '(r0 r1))

	(entry (list stream pix))

	(vp-xor-rr col col)
	(vp-push col)
	(switch)
	(case `(,pix == 32))
		(call 'stream 'read (list stream rsp int_size) (list '_ pix))
		(gotoif `(,pix == -1) 'eof)
		(vp-pop col)
		(vp-cpy-cr 32 pix)
		(vp-jmp 'to_argb)
	(case `(,pix == 24))
		(call 'stream 'read (list stream rsp 3) (list '_ pix))
		(gotoif `(,pix == -1) 'eof)
		(vp-pop col)
		(vp-cpy-cr 24 pix)
		(vp-jmp 'to_argb)
	(case `(,pix == 16))
		(call 'stream 'read (list stream rsp short_size) (list '_ pix))
		(gotoif `(,pix == -1) 'eof)
		(vp-pop col)
		(vp-cpy-cr 16 pix)
		(vp-jmp 'to_argb)
	(default)
	(vp-label 'eof)
		(vp-pop col)
		(vp-cpy-cr -1 col)
	(endswitch)

	(exit (list col))
	(vp-ret)

(vp-label 'to_argb)
	;inputs
	;r0 = col (uint)
	;r1 = pixel type (uint)
	;outputs
	;r0 = col (uint)

	(vp-def (col pix rh rl gh gl bh bl) '(r0 r1))

	(entry (list col pix))

	(switch)
	(case `(,pix == 32))
		(vp-cpy-cr argb_black pix)
		(vp-xor-rr pix col)
		(break)
	(case `(,pix == 24))
		(vp-cpy-cr argb_black pix)
		(vp-add-rr pix col)
		(break)
	(case `(,pix == 16))
		(vp-cpy-rr col rh)
		(vp-cpy-rr col rl)
		(vp-cpy-rr col gh)
		(vp-cpy-rr col gl)
		(vp-cpy-rr col bh)
		(vp-cpy-rr col bl)
		(vp-and-cr 0b1111100000000000 rh)
		(vp-and-cr 0b1110000000000000 rl)
		(vp-and-cr 0b11111100000 gh)
		(vp-and-cr 0b11000000000 gl)
		(vp-and-cr 0b11111 bh)
		(vp-and-cr 0b11100 bl)
		(vp-shl-cr 8 rh)
		(vp-shl-cr 3 rl)
		(vp-shl-cr 5 gh)
		(vp-shr-cr 1 gl)
		(vp-shl-cr 3 bh)
		(vp-shr-cr 2 bl)
		(vp-cpy-cr argb_black col)
		(vp-add-rr rh rl)
		(vp-add-rr gh gl)
		(vp-add-rr bh bl)
		(vp-add-rr rl col)
		(vp-add-rr gl col)
		(vp-add-rr bl col)
		(break)
	(default)
		(vp-cpy-cr -1 col)
	(endswitch)

	(exit (list col))
	(vp-ret)

(def-func-end)
