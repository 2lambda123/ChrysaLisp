(include 'sys/func.inc)
(include 'gui/canvas/class.inc)
(include 'gui/ctx/class.inc)
(include 'class/stream/class.inc)

(def-struct 'cpm)
	(uint 'ident)		;ident '.CPM' or '.FLM'
	(uint 'bytes)		;0 if not known, else total size
	(uint 'version)		;version number
	(uint 'type)		;image type
	(uint 'width)		;image w
	(uint 'height)		;image h
	(uint 'trans)		;image transparent colour
(def-struct-end)

(def-method 'canvas 'load_cpm)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = 0 if error, else canvas object (ptr)
	;trashes
	;all

	(ptr 'this 'stream)
	(struct 'header 'cpm)
	(long 'col)
	(int 'length 'run 'x 'y)

	;save inputs
	(push-scope)
	(entry 'canvas 'load_cpm {stream})

	;read header
	(assign {0} {this})
	(call 'stream 'read {stream, &header, cpm_size} {_, length})
	(vpif {length == cpm_size})
		;check ident '.CPM' or '.FLM'
		(vpif {header.cpm_ident == 0x2e43504d || header.cpm_ident == 0x2e464c4d})
			;create canvas
			(call 'canvas 'create {header.cpm_width, header.cpm_height, 1} {this})
			(vpif {this})
				(call 'canvas 'fill {this, 0})
				;decode acording to version
				(assign {0, 0} {x, y})
				(loop-start)
					;get token
					(call 'stream 'read_char {stream} {_, run})
					(gotoif {run == -1} 'error)
					(vpif {run >= 128})
						;run of a pixel
						(call 'read_pixel {stream, header.cpm_type} {col})
						(gotoif {col == -1} 'error)

						;plot repeatedly
						(call 'canvas 'set_color {this, col})
						(assign {run - 127} {run})
						(loop-start)
							(vpif {col != header.cpm_trans})
								(call 'canvas 'plot {this, x, y})
							(endif)
							(assign {x + 1} {x})
							(vpif {x == header.cpm_width})
								(assign {0, y + 1} {x, y})
							(endif)
							(assign {run - 1} {run})
						(loop-untilnot {run})
					(else)
						;block of pixels
						(assign {run + 1} {run})
						(loop-start)
							(call 'read_pixel {stream, header.cpm_type} {col})
							(gotoif {col == -1} 'error)
							(vpif {col != header.cpm_trans})
								(call 'canvas 'set_color {this, col})
								(call 'canvas 'plot {this, x, y})
							(endif)
							(assign {x + 1} {x})
							(vpif {x == header.cpm_width})
								(assign {0, y + 1} {x, y})
							(endif)
							(assign {run - 1} {run})
						(loop-untilnot {run})
					(endif)
				(loop-until {y == header.cpm_height})
			(endif)
		(endif)
	(endif)

(vp-label 'funcexit)
	(exit 'canvas 'load_cpm {this})
	(return)

(vp-label 'error)
	(call 'canvas 'deref {this})
	(assign {0} {this})
	(goto 'funcexit)

	(pop-scope-syms)

(vp-label 'read_pixel)
	;inputs
	;r0 = stream object (ptr)
	;r1 = pixel type (uint)
	;outputs
	;r0 = -1 if error, else col (uint)

	(ptr 'stream)
	(long 'col)
	(int 'type)

	(push-scope)
	(entry {stream, type})

	(assign {0} {col})
	(switch)
	(case {type == 32})
		(call 'stream 'read {stream, &col, int_size} {_, type})
		(call 'to_argb {col, 32} {col})
		(break)
	(case {type == 24})
		(call 'stream 'read {stream, &col, 3} {_, type})
		(call 'to_argb {col, 24} {col})
		(break)
	(case {type == 16})
		(call 'stream 'read {stream, &col, short_size} {_, type})
		(call 'to_argb {col, 16} {col})
		(break)
	(default)
		(assign {-1} {type})
	(endswitch)
	(vpif {type == -1})
		(assign {-1} {col})
	(endif)

	(exit {col})
	(pop-scope)
	(return)

(vp-label 'to_argb)
	;inputs
	;r0 = col (uint)
	;r1 = pixel type (uint)
	;outputs
	;r0 = col (uint)

	(uint 'col 'type)

	(push-scope)
	(entry {col, type})

	(switch)
	(case {type == 32})
		(assign {argb_black ^ col} {col})
		(break)
	(case {type == 24})
		(assign {argb_black + col} {col})
		(break)
	(case {type == 16})
		(assign {argb_black
				+ ((col & 0b1111100000000000) << 8)
				+ ((col & 0b1110000000000000) << 3)
				+ ((col & 0b11111100000) << 5)
				+ ((col & 0b11000000000) >> 1)
				+ ((col & 0b11111) << 3)
				+ ((col & 0b11100) >> 2)} {col})
		(break)
	(default)
		(assign {-1} {col})
	(endswitch)

	(exit {col})
	(pop-scope)
	(return)

(def-func-end)
