(include 'sys/func.inc)
(include 'gui/canvas/class.inc)
(include 'class/array/class.inc)

(def-method 'canvas 'resize)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'source)
	(puint 'data 'sdata 'buf)
	(uint 'x 'y 'x2 'y2)
	(uint 'x1a 'x1b 'x1c 'x1d 'y1a 'y1b 'y1c 'y1d)
	(uint 'a 'r 'g 'b 'q 'weight_x 'weight_y)
	(long 'fw 'fh)

	(assign '((r0 canvas_width ui) (r0 canvas_height ui) (r1 canvas_width ui) (r1 canvas_height ui))
		'(r2 r3 r4 r5))
	(vp-shl-cr 1 r2)
	(vp-shl-cr 1 r3)
	(vpif '(r2 == r4))
		(vpif '(r3 == r5))
			(jump 'canvas 'resize_2 '(r0 r1))
		(endif)
	(endif)
	(vp-shr-cr 1 r2)
	(vp-shr-cr 1 r3)
	(vp-mul-cr 3 r2)
	(vp-mul-cr 3 r3)
	(vpif '(r2 == r4))
		(vpif '(r3 == r5))
			(jump 'canvas 'resize_3 '(r0 r1))
		(endif)
	(endif)

	(push-scope)
	(entry 'canvas 'resize {this, source})

	(call 'sys_mem 'alloc {(this->canvas_width + 1) * int_size} {buf, _})
	(assign {(source->canvas_width * 256) </ this->canvas_width} {fw})
	(assign {(source->canvas_height * 256) </ this->canvas_height} {fh})

	(assign {0} {x2})
	(loop-while {x2 < this->canvas_width})
		(assign {x2 *> fw} {(buf)[x2 * int_size]})
		(assign {x2 + 1} {x2})
	(loop-end)
	(assign {source->canvas_width * 256} {(buf)[x2 * int_size]})

	(assign {this->canvas_array->array_array} {data})
	(assign {0} {y2})
	(loop-while {y2 < this->canvas_height})
		(assign {y2 *> fh} {y1a})
		(assign {y1a >> 8} {y1c})
		(assign {((y2 + 1) *> fh) - 1} {y1b})
		(assign {y1b >> 8} {y1d})

		(assign {0} {x2})
		(loop-while {x2 < this->canvas_width})
			(assign {(buf)[x2 * int_size]} {x1a})
			(assign {x1a >> 8} {x1c})
			(assign {(buf)[(x2 + 1) * int_size] - 1} {x1b})
			(assign {x1b >> 8} {x1d})

			(assign {0 => a => r => g => b} {q})

			(assign {y1c} {y})
			(loop-while {y <= y1d})
				(vp-def (r_weight_y r_y1c r_y1d r_y r_y1a r_y1b))
				(assign {256, y1c, y1d} (list r_weight_y r_y1c r_y1d))
				(vpif (list r_y1c '!= r_y1d))
					(assign {y, y1a, y1b} (list r_y r_y1a r_y1b))
					(vpif (list r_y '== r_y1c))
						(vp-and-cr 0xff r_y1a)
						(vp-sub-rr r_y1a r_weight_y)
					(elseif (list r_y '== r_y1d))
						(vp-and-cr 0xff r_y1b)
						(vp-add-cr 1 r_y1b)
						(vp-cpy-rr r_y1b r_weight_y)
					(endif)
				(endif)
				(assign (list r_weight_y) {weight_y})

				(assign {&(source->canvas_array->array_array)[(y * source->canvas_width + x1c) * int_size]} {sdata})
				(assign {x1c} {x})
				(loop-while {x <= x1d})
					(vp-def (r_weight_x r_x1c r_x1d r_x r_x1a r_x1b))
 					(assign {256, x1c, x1d} (list r_weight_x r_x1c r_x1d))
					(vpif (list r_x1c '!= r_x1d))
						(assign {x, x1a, x1b} (list r_x r_x1a r_x1b))
						(vpif (list r_x '== r_x1c))
							(vp-and-cr 0xff r_x1a)
							(vp-sub-rr r_x1a r_weight_x)
						(elseif (list r_x '== r_x1d))
							(vp-and-cr 0xff r_x1b)
							(vp-add-cr 1 r_x1b)
							(vp-cpy-rr r_x1b r_weight_x)
						(endif)
					(endif)
					(assign (list r_weight_x) {weight_x})

					;multiply pixel channels by the pixel weight and accumulate
					(vp-def (r_r r_g r_b r_a r_q r_sr r_sg r_sb r_sa r_sdata r_weight))
					(assign {r, g, b, a, q, sdata, weight_x * weight_y}
						(list r_r r_g r_b r_a r_q r_sdata r_weight))
					(vp-cpy-ir-ui r_sdata 0 r_sa)
					(vp-add-cr int_size r_sdata)
					(vp-cpy-rr r_sa r_sr)
					(vp-cpy-rr r_sa r_sg)
					(vp-cpy-rr r_sa r_sb)
					(vp-shr-cr 8 r_sg)
					(vp-shr-cr 16 r_sb)
					(vp-shr-cr 24 r_sa)
					(vp-and-cr 0xff r_sr)
					(vp-and-cr 0xff r_sg)
					(vp-and-cr 0xff r_sb)
					(vp-mul-rr r_weight r_sr)
					(vp-mul-rr r_weight r_sg)
					(vp-mul-rr r_weight r_sb)
					(vp-mul-rr r_weight r_sa)
					(vp-add-rr r_sr r_r)
					(vp-add-rr r_sg r_g)
					(vp-add-rr r_sb r_b)
					(vp-add-rr r_sa r_a)
					(vp-add-rr r_weight r_q)
					(assign (list r_sdata r_r r_g r_b r_a r_q) {sdata, r, g, b, a, q})

					(assign {x + 1} {x})
				(loop-end)
				(assign {y + 1} {y})
			(loop-end)

			;divide by the pixel weight and store
			(vp-def (r_q r_r r_g r_b r_a r_data))
			(assign {(1 << 32) / q, r, g, b, a, data} (list r_q r_r r_g r_b r_a r_data))
			(vp-mul-rr r_q r_r)
			(vp-mul-rr r_q r_g)
			(vp-mul-rr r_q r_b)
			(vp-mul-rr r_q r_a)
			(vp-shr-cr 32 r_r)
			(vp-shr-cr 32 r_g)
			(vp-shr-cr 32 r_b)
			(vp-shr-cr 32 r_a)
			(vp-shl-cr 8 r_g)
			(vp-shl-cr 16 r_b)
			(vp-shl-cr 24 r_a)
			(vp-add-rr r_g r_r)
			(vp-add-rr r_b r_r)
			(vp-add-rr r_a r_r)
			(vp-cpy-ri-i r_r r_data 0)
			(vp-add-cr int_size r_data)
			(assign (list r_data) {data})

			(assign {x2 + 1} {x2})
		(loop-end)
		(assign {y2 + 1} {y2})
	(loop-end)

	(exit 'canvas 'resize {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas 'resize_2)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(vp-def (r_this r_source r_sdata r_xdata r_ydata r_data r_rb r_ga r_srb r_sga r_sw r_mga r_mrb))

	(entry 'canvas 'resize_2 (list r_this r_source))

	(assign `((,r_this canvas_array) (,r_source canvas_array)) `(,r_data , r_sdata))
	(assign `((,r_data array_array) (,r_sdata array_array) (,r_source canvas_stride ui)
		(,r_source canvas_height ui) 0xff00ff00 0xff00ff) (list r_data r_sdata r_sw r_ydata r_mga r_mrb))

	(vp-mul-rr r_sw r_ydata)
	(vp-add-rr r_sdata r_ydata)
	(loop-while (list r_sdata '!= r_ydata))
		(vp-lea-d r_sdata r_sw r_xdata)
		(loop-while (list r_sdata '!= r_xdata))
			;accumulate pixel channels
			(vp-cpy-ir-ui r_sdata 0 r_ga)
			(vp-cpy-rr r_ga r_rb)
			(vp-and-rr r_mga r_ga)
			(vp-and-rr r_mrb r_rb)

			(vp-cpy-ir-ui r_sdata int_size r_sga)
			(vp-add-rr r_sw r_sdata)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata 0 r_sga)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata int_size r_sga)
			(vp-sub-rr r_sw r_sdata)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			;divide by the pixel weight and store
			(vp-shr-cr 2 r_ga)
			(vp-shr-cr 2 r_rb)
			(vp-and-rr r_mga r_ga)
			(vp-and-rr r_mrb r_rb)
			(vp-add-rr r_ga r_rb)
			(vp-cpy-ri-i r_rb r_data 0)

			(vp-add-cr int_size r_data)
			(vp-add-cr (mul 2 int_size) r_sdata)
		(loop-end)
		(vp-add-rr r_sw r_sdata)
	(loop-end)

	(exit 'canvas 'resize_2 (list r_this))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'resize_3)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(vp-def (r_this r_source r_sdata r_xdata r_ydata r_data r_q r_rb r_ga r_srb r_sga r_sw r_mga r_mrb))

	(entry 'canvas 'resize_3 (list r_this r_source))

	(assign `((,r_this canvas_array) (,r_source canvas_array)) `(,r_data , r_sdata))
	(assign `(,(div (bit-shl 1 32) 9) (,r_data array_array) (,r_sdata array_array) (,r_source canvas_stride ui)
		(,r_source canvas_height ui) 0xff00ff00 0xff00ff) (list r_q r_data r_sdata r_sw r_ydata r_mga r_mrb))

	(vp-mul-rr r_sw r_ydata)
	(vp-add-rr r_sdata r_ydata)
	(loop-while (list r_sdata '!= r_ydata))
		(vp-lea-d r_sdata r_sw r_xdata)
		(loop-while (list r_sdata '!= r_xdata))
			;accumulate pixel channels
			(vp-cpy-ir-ui r_sdata 0 r_ga)
			(vp-cpy-rr r_ga r_rb)
			(vp-and-rr r_mga r_ga)
			(vp-and-rr r_mrb r_rb)

			(vp-cpy-ir-ui r_sdata int_size r_sga)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata (mul 2 int_size) r_sga)
			(vp-add-rr r_sw r_sdata)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata 0 r_sga)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata int_size r_sga)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata (mul 2 int_size) r_sga)
			(vp-add-rr r_sw r_sdata)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata 0 r_sga)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata int_size r_sga)
			(vp-cpy-rr r_sga r_srb)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			(vp-cpy-ir-ui r_sdata (mul 2 int_size) r_sga)
			(vp-sub-rr r_sw r_sdata)
			(vp-cpy-rr r_sga r_srb)
			(vp-sub-rr r_sw r_sdata)
			(vp-and-rr r_mga r_sga)
			(vp-and-rr r_mrb r_srb)
			(vp-add-rr r_sga r_ga)
			(vp-add-rr r_srb r_rb)

			;divide by the pixel weight and store
			(vp-cpy-rr r_ga r_sga)
			(vp-cpy-rr r_rb r_srb)
			(vp-shr-cr 24 r_sga)
			(vp-shr-cr 16 r_srb)
			(vp-shr-cr 8 r_ga)
			(vp-and-cr 0xfff r_rb)
			(vp-and-cr 0xfff r_ga)
			(vp-mul-rr r_q r_sga)
			(vp-mul-rr r_q r_srb)
			(vp-mul-rr r_q r_ga)
			(vp-mul-rr r_q r_rb)
			(vp-shr-cr 32 r_sga)
			(vp-shr-cr 32 r_srb)
			(vp-shr-cr 32 r_ga)
			(vp-shr-cr 32 r_rb)
			(vp-shl-cr 8 r_ga)
			(vp-shl-cr 16 r_srb)
			(vp-shl-cr 24 r_sga)
			(vp-add-rr r_ga r_rb)
			(vp-add-rr r_srb r_rb)
			(vp-add-rr r_sga r_rb)
			(vp-cpy-ri-i r_rb r_data 0)

			(vp-add-cr int_size r_data)
			(vp-add-cr (mul 3 int_size) r_sdata)
		(loop-end)
		(vp-add-rr r_sw r_sdata)
		(vp-add-rr r_sw r_sdata)
	(loop-end)

	(exit 'canvas 'resize_3 (list r_this))
	(vp-ret)

(def-func-end)
