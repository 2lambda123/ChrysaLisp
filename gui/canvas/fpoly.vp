(include 'sys/func.inc)
(include 'gui/canvas/class.inc)
(include 'class/vector/class.inc)
(include 'gui/points/class.inc)

(def-method 'canvas 'set_edges)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = vector of points objects (ptr)
	;r2 = x (16.16)
	;r3 = y (16.16)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = min_x (16.16)
	;r2 = min_y (16.16)
	;r3 = max_x (16.16)
	;r4 = max_y (16.16)
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'polygons)
		'(pptr 'iter_end_polygons 'iter_begin_polygons))
	(int 'ys 'ye 'xs 'xe 'x 'y 'x1 'y1 'x2 'y2 'xc)
	(pint 'iter_edge1 'iter_edge2 'iter_begin_polygon 'iter_end_polygon)
	(uint 'length)

	(push-scope)
	(entry 'canvas 'set_edges {this, polygons, x, y})

	;fill edges, find min and max xy, clip edges not visible or redundant
	(assign {x + 0.5, y + 0.5, max_int, min_int, max_int, min_int, 0} {x, y, xs, xe, ys, ye, length})
	(call 'vector 'get_iters {polygons} {_, iter_begin_polygons, iter_end_polygons})
	(loop-while {iter_begin_polygons != iter_end_polygons})
		(call 'points 'get_iters {*iter_begin_polygons} {_, iter_begin_polygon, iter_end_polygon})
		(call 'array 'set_capacity {this->canvas_edges, length + ((iter_end_polygon - iter_begin_polygon) >> 4) * (edge_size >> 3)})
		(call 'array 'get_begin {this->canvas_edges} {_, iter_edge1})
		(assign {iter_edge1 + length * long_size} {iter_edge2})
		(vpif {iter_end_polygon - iter_begin_polygon >= long_size * 6})
			(assign {iter_end_polygon[-long_size * 2] + x} {x1})
			(assign {(iter_end_polygon[-long_size] + y) >>> fp_shift} {y1})
			(loop-start)
				(assign {iter_begin_polygon[0] + x} {x2})
				(assign {(iter_begin_polygon[long_size] + y) >>> fp_shift} {y2})
				(assign {x2 >>> fp_shift} {xc})
				(vpif {xc < xs})
					(assign {xc} {xs})
				(endif)
				(vpif {xc > xe})
					(assign {xc} {xe})
				(endif)
				(vpif {y1 < y2})
					(breakif {y2 <= this->canvas_cy})
					(breakif {y1 >= this->canvas_cy1})
					(assign {(x2 - x1) // (y2 - y1)} {iter_edge2->edge_dda})
					(vpif {y1 < this->canvas_cy})
						(assign {(this->canvas_cy - y1) * iter_edge2->edge_dda + x1} {x1})
						(assign {this->canvas_cy} {y1})
					(endif)
					(assign {x1} {iter_edge2->edge_x})
					(assign {y1} {iter_edge2->edge_ys})
					(assign {y2} {iter_edge2->edge_ye})
					(assign {1} {iter_edge2->edge_w})
					(vpif {y1 < ys})
						(assign {y1} {ys})
					(endif)
					(vpif {y2 > ye})
						(assign {y2} {ye})
					(endif)
					(assign {iter_edge2 + edge_size} {iter_edge2})
				(elseif {y1 > y2})
					(breakif {y1 <= this->canvas_cy})
					(breakif {y2 >= this->canvas_cy1})
					(assign {(x1 - x2) // (y1 - y2)} {iter_edge2->edge_dda})
					(vpif {y2 < this->canvas_cy})
						(assign {(this->canvas_cy - y2) * iter_edge2->edge_dda + x2} {x2})
						(assign {this->canvas_cy} {y2})
					(endif)
					(assign {x2} {iter_edge2->edge_x})
					(assign {y1} {iter_edge2->edge_ye})
					(assign {y2} {iter_edge2->edge_ys})
					(assign {-1} {iter_edge2->edge_w})
					(vpif {y2 < ys})
						(assign {y2} {ys})
					(endif)
					(vpif {y1 > ye})
						(assign {y1} {ye})
					(endif)
					(assign {iter_edge2 + edge_size} {iter_edge2})
				(endif)
				(assign {iter_begin_polygon[0] + x} {x1})
				(assign {(iter_begin_polygon[long_size] + y) >>> fp_shift} {y1})
				(assign {iter_begin_polygon + long_size * 2} {iter_begin_polygon})
			(loop-until {iter_begin_polygon == iter_end_polygon})
			(assign {(iter_edge2 - iter_edge1) >> 3} {length})
		(endif)
		(assign {iter_begin_polygons + ptr_size} {iter_begin_polygons})
	(loop-end)
	(call 'array 'set_length {this->canvas_edges, length})

	(exit 'canvas 'set_edges {this, xs, ys, xe, ye})
	(pop-scope)
	(return)

(vp-label 'mask_to_alpha)
	(apply vp-byte (map (lambda (m)
		(div (mul 0xff (apply add (map (lambda (s)
			(bit-and 1 (bit-shr m s))) (const '(range 0 8))))) 8)) (const '(range 0 256))))

(def-func-end)

(def-method 'canvas 'fpoly)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = stack array object (ptr)
	;r2 = color (argb)
	;r3 = x (16.16)
	;r4 = y (16.16)
	;r5 = winding mode (0/1)
	;r6 = vector of points objects (ptr)
	;r7 = span function (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'span 'stack)
	(union
		'(ptr 'polygons)
		'(pptr 'iter_i 'iter_j 'iter_k 'iter_end))
	(pint 'iter_edge1 'iter_edge2)
	(int 'ys 'ye 'xs 'xe 'x 'y)
	(uint 'mode 'color)

	(push-scope)
	(entry 'canvas 'fpoly {this, stack, color, x, y, mode, polygons, span})

	;fill edges, find min and max xy, clip edges not visible or redundant
	(call 'canvas 'set_edges {this, polygons, x, y} {_, xs, ys, xe, ye})

	;clip check
	(vpif {xs < this->canvas_cx1 && xe > this->canvas_cx && ys < this->canvas_cy1 && ye > this->canvas_cy})
		(call 'canvas 'to_premul {this, color} {_, color})

		;edge pointers into tracker for sorting
		(call 'array 'get_iters {this->canvas_edges} {_, iter_edge1, iter_edge2})
		(call 'array 'set_capacity {this->canvas_edge_tracker, (iter_edge2 - iter_edge1) / edge_size})
		(call 'array 'get_begin {this->canvas_edge_tracker} {_, iter_i})
		(assign {iter_i, iter_i} {iter_j, iter_end})
		(vp-def (iter_end iter_edge1 iter_edge2))
		(assign {iter_end, iter_edge1, iter_edge2} (list iter_end iter_edge1 iter_edge2))
		(loop-while `(,iter_edge1 != ,iter_edge2))
			(vp-cpy-ri iter_edge1 iter_end 0)
			(vp-add-cr edge_size iter_edge1)
			(vp-add-cr ptr_size iter_end)
		(loop-end)
		(assign (list iter_end) {iter_end})
		(call 'array 'sort {this->canvas_edge_tracker, stack, iter_i, iter_end, $sort_on_y, 0})

		(loop-while {ys < ye})
			(breakif {ys >= this->canvas_cy1})

			;mark edges that end on this scan line
			(vp-def (iter_i iter_j iter_end ys min_int edge ye x dda lastx))
			(assign {iter_i, iter_j, iter_end, ys, min_int, min_int} (list iter_i iter_j iter_end ys min_int lastx))
			(loop-while `(,iter_i != ,iter_j))
				(vp-cpy-ir iter_i 0 edge)
				(vp-add-cr ptr_size iter_i)
				(vp-cpy-ir-i edge edge_x x)
				(vp-cpy-ir-i edge edge_ye ye)
				(vpif `(,lastx <= ,x))
					(vp-cpy-rr x lastx)
				(else)
					(vp-cpy-cr max_int lastx)
				(endif)
				(continueif `(,ye != ,ys))
				(vp-cpy-ri-i min_int edge edge_x)
				(vp-cpy-cr max_int lastx)
			(loop-end)

			;include new edges that begin on this scan line
			(loop-while `(,iter_j != ,iter_end))
				(vp-cpy-ir iter_j 0 edge)
				(vp-cpy-ir-i edge edge_ys ye)
				(breakif `(,ye != ,ys))
				(vp-add-cr ptr_size iter_j)
				(vp-cpy-cr max_int lastx)
			(loop-end)
			(assign (list iter_j) {iter_j})

			;sort on x ?, plus move all marked dead edges to front !
			(vpif `(,lastx == max_int))
				(call 'array 'sort {this->canvas_edge_tracker, stack, iter_i, iter_j, $sort_on_x, 0})
			(endif)

			;remove all dead edges
			(assign {iter_i, iter_j, min_int} (list iter_i iter_j min_int))
			(loop-while `(,iter_i != ,iter_j))
				(vp-cpy-ir iter_i 0 edge)
				(vp-cpy-ir-i edge edge_x x)
				(breakif `(,x != ,min_int))
				(vp-add-cr ptr_size iter_i)
			(loop-end)
			(assign (list iter_i) {iter_i})
			(assign (list iter_i) {iter_k})

			(vp-def (this col x1 y x2 w v iter_k iter_j iter_edge1 iter_edge2 span)
				(method-input 'canvas 'set_span))
			(vpif {mode})
				;odd even
				(assign {this} (list this))
				(loop-start)
					(assign {iter_k, iter_j} (list iter_k iter_j))
					(breakif `(,iter_k == ,iter_j))
					(assign {color, ys, span} (list col y span))
					(vp-cpy-ir iter_k 0 iter_edge1)
					(vp-cpy-ir iter_k ptr_size iter_edge2)
					(vp-add-cr (mul 2 ptr_size) iter_k)
					(vp-cpy-ir-i iter_edge1 edge_x x1)
					(vp-cpy-ir-i iter_edge2 edge_x x2)
					(vp-asr-cr fp_shift x1)
					(vp-asr-cr fp_shift x2)
					(assign (list iter_k) {iter_k})
					(r-call 'canvas 'set_span (list this col x1 y x2 span) (list this) span)
				(loop-end)
			(else)
				;non zero
				(assign {this} (list this))
				(loop-start)
					(assign {iter_k, iter_j} (list iter_k iter_j))
					(breakif `(,iter_k == ,iter_j))
					(assign {color, ys, span} (list col y span))
					(vp-cpy-ir iter_k 0 iter_edge1)
					(vp-add-cr ptr_size iter_k)
					(vp-cpy-ir-i iter_edge1 edge_w w)
					(vp-cpy-ir-i iter_edge1 edge_x x1)
					(loop-start)
						(vp-cpy-ir iter_k 0 iter_edge2)
						(vp-add-cr ptr_size iter_k)
						(vp-cpy-ir-i iter_edge2 edge_w v)
						(vp-cpy-ir-i iter_edge2 edge_x x2)
						(vp-add-rr v w)
					(loop-until `(,w == 0))
					(vp-asr-cr fp_shift x1)
					(vp-asr-cr fp_shift x2)
					(assign (list iter_k) {iter_k})
					(r-call 'canvas 'set_span (list this col x1 y x2 span) (list this) span)
				(loop-end)
			(endif)

			;step the edges
			(vp-def (iter_i iter_j x dda edge))
			(assign {iter_i, iter_j} (list iter_i iter_j))
			(loop-while `(,iter_i != ,iter_j))
				(vp-cpy-ir iter_i 0 edge)
				(vp-add-cr ptr_size iter_i)
				(vp-cpy-ir-i edge edge_x x)
				(vp-cpy-ir-i edge edge_dda dda)
				(vp-add-rr dda x)
				(vp-cpy-ri-i x edge edge_x)
			(loop-end)

			(assign {ys + 1} {ys})
		(loop-end)
	(endif)

	(exit 'canvas 'fpoly {this})
	(pop-scope)
	(return)

(vp-label 'sort_on_x)
	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r2 0 r2)
	(vp-cpy-ir-i r1 edge_x r0)
	(vp-cpy-ir-i r2 edge_x r1)
	(vp-sub-rr r1 r0)
	(vp-ret)

(vp-label 'sort_on_y)
	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r2 0 r2)
	(vp-cpy-ir-i r1 edge_ys r0)
	(vp-cpy-ir-i r2 edge_ys r1)
	(vp-sub-rr r1 r0)
	(vp-ret)

(def-func-end)
