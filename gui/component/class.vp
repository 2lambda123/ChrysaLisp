(include 'sys/func.inc)
(include 'sys/kernel/class.inc)
(include 'sys/str/class.inc)
(include 'gui/gui/class.inc)
(include 'gui/component/class.inc)
(include 'class/sym/class.inc)
(include 'class/num/class.inc)
(include 'gui/font/class.inc)
(include 'class/vector/class.inc)

(gen-vtable 'component)

(def-method 'component 'init)
	;inputs
	;r0 = component object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = component object (ptr)
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'component 'init '(r0 r1 0 1) '(r0 r1))
	(vpif '(r1 != 0))
		(f-bind 'gui 'statics r1)
		(vp-cpy-ir r1 gui_statics_next_id r2)
		(vp-sub-cr 1 r2)
		(vp-cpy-ri r2 r1 gui_statics_next_id)
		(vp-cpy-ri r2 r0 component_id)
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 component_tcb)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'component 'find_owner)
	;inputs
	;r0 = component object (ptr)
	;outputs
	;r0 = component object (ptr)
	;r1 = 0, else tcb of owner (ptr)
	;trashes
	;r2

	;walk up tree to parent
	(vp-cpy-rr r0 r2)
	(loop-start)
		(vp-cpy-ir r2 component_tcb r1)
		(vp-cpy-ir r2 hmap_parent r2)
		(breakif '(r1 != 0))
	(loop-until '(r2 == 0))
	(vp-ret)

(def-func-end)

(def-method 'component 'emit)
	;inputs
	;r0 = component object (ptr)
	;r1 = target id array object (ptr)
	;outputs
	;r0 = component object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'ids 'tcb 'msg 'data)
	(plong 'iter_begin 'iter_end)

	(push-scope)
	(entry 'component 'emit {this, ids})

	(call 'component 'find_owner {this} {_, tcb})
	(vpif {tcb})
		(call 'array 'get_iters {ids} {_, iter_begin, iter_end})
		(loop-while {iter_begin != iter_end})
			(call 'sys_mail 'alloc {ev_msg_action_size} {msg, data})
			(assign {tcb->tk_node_mbox_id} {msg->msg_dest.id_mbox})
			(call 'sys_kernel 'id nil {msg->msg_dest.id_cpu})
			(assign {ev_type_action} {data->ev_msg_type})
			(assign {*iter_begin} {data->ev_msg_target_id})
			(assign {this->component_id} {data->ev_msg_action_source_id})
			(call 'sys_mail 'send {msg})
			(assign {iter_begin + long_size} {iter_begin})
		(loop-end)
	(endif)

	(exit 'component 'emit {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'component 'get_prop_sym)
	;inputs
	;r0 = component object (ptr)
	;r1 = property num (uint)
	;outputs
	;r0 = component object (ptr)
	;r1 = property symbol object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'sym 'syms)
	(pubyte 'next)
	(uint 'num 'length)

	(push-scope)
	(entry 'component 'get_prop_sym {this, num})

	(assign {ptr($symbols)} {syms})
	(vpifnot {syms})
		(call 'vector 'create nil {syms})
		(call 'vector 'set_capacity (cat {syms, } (str (length *props*))))
		(assign {$props} {next})
		(loop-start)
			(call 'sym 'intern_cstr {next} {sym})
			(call 'vector 'push_back {syms, sym})
			(call 'sys_str 'length {next} {_, length})
		(loop-until {(next + length + byte_size => next) == $props_end})
		(assign {syms} {ptr($symbols)})
	(endif)
	(call 'vector 'get_element {syms, num} {_, sym})

	(exit 'component 'get_prop_sym {this, sym})
	(pop-scope)
	(return)

;;;;;;;;;;;;;;;;;;
; interned symbols
;;;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'symbols)
	(vp-long 0)

(vp-label 'props)
	(each (lambda (_) (vp-string _) (vp-byte 0)) *props*)
(vp-label 'props_end)

(def-func-end)

(def-method 'component 'ref_prop)
	;inputs
	;r0 = component object (ptr)
	;r1 = property num (uint)
	;outputs
	;r0 = component object (ptr)
	;r1 = 0 else, property object (ptr)
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'obj))
	(uint 'num)

	(push-scope)
	(entry 'component 'ref_prop {this, num})

	(call 'component 'get_prop_sym {this, num} {_, sym})
	(call 'component 'get {this, sym} {_, obj})

	(exit 'component 'ref_prop {this, obj})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'component 'get_prop)
	;inputs
	;r0 = component object (ptr)
	;r1 = property num (uint)
	;outputs
	;r0 = component object (ptr)
	;r1 = 0 else, property object (ptr)
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'obj))
	(uint 'num)

	(push-scope)
	(entry 'component 'get_prop {this, num})

	(call 'component 'get_prop_sym {this, num} {_, sym})
	(call 'component 'get {this, sym} {_, obj})
	(call 'obj 'deref_if {obj})

	(exit 'component 'get_prop {this, obj})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'component 'set_long_prop)
	;inputs
	;r0 = component object (ptr)
	;r1 = property num (uint)
	;r2 = property value (long)
	;outputs
	;r0 = component object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'sym 'prop)
	(long 'value)
	(uint 'num)

	(push-scope)
	(entry 'component 'set_long_prop {this, num, value})

	(call 'component 'get_prop_sym {this, num} {_, sym})
	(call 'num 'create {value} {prop})
	(call 'component 'insert {this, sym, prop})
	(call 'num 'deref {prop})

	(exit 'component 'set_long_prop {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'component 'get_long_prop)
	;inputs
	;r0 = component object (ptr)
	;r1 = property num (uint)
	;outputs
	;r0 = component object (ptr)
	;r1 = property value (long)
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'prop))
	(union
		'(uint 'num)
		'(long 'value))

	(push-scope)
	(entry 'component 'get_long_prop {this, num})

	(call 'component 'get_prop_sym {this, num} {_, sym})
	(call 'component 'get {this, sym} {_, prop})
	(assign {0} {value})
	(vpif {prop})
		(call 'num 'get_value {prop} {_, value})
		(call 'num 'deref {prop})
	(endif)

	(exit 'component 'get_long_prop {this, value})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'component 'set_font_prop)
	;inputs
	;r0 = component object (ptr)
	;r1 = property num (uint)
	;r2 = font c string name (pubyte)
	;r3 = font size (points)
	;outputs
	;r0 = component object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'sym)
	(union
		'(ptr 'name)
		'(ptr 'font))
	(uint 'num 'points)

	(push-scope)
	(entry 'component 'set_font_prop {this, num, name, points})

	(call 'component 'get_prop_sym {this, num} {_, sym})
	(call 'font 'open {name, points} {font})
	(vpif {font})
		(call 'component 'insert {this, sym, font})
		(call 'font 'deref {font})
	(endif)

	(exit 'component 'set_font_prop {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'component 'set_str_prop)
	;inputs
	;r0 = component object (ptr)
	;r1 = property num (uint)
	;r2 = c string (pubyte)
	;outputs
	;r0 = component object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'sym 'str)
	(uint 'num)

	(push-scope)
	(entry 'component 'set_str_prop {this, num, str})

	(call 'component 'get_prop_sym {this, num} {_, sym})
	(call 'str 'create_from_cstr {str} {str})
	(call 'component 'insert {this, sym, str})
	(call 'str 'deref {str})

	(exit 'component 'set_str_prop {this})
	(pop-scope)
	(return)

(def-func-end)
