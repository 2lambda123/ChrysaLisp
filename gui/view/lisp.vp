(include 'sys/func.inc)
(include 'gui/view/class.inc)
(include 'class/num/class.inc)
(include 'class/str/class.inc)
(include 'class/lisp/class.inc)

(def-method 'view 'lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_create '(r0 r1))

(errorcases
	(vp-cpy-ir-ui r1 array_length r2)
	(gotoif '(r2 != 0) 'error))

	(vp-push r0)
	(call 'view 'create nil '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_create '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(create-view)" error_msg_wrong_num_of_args r1)))

(def-func-end)

(def-method 'view 'lisp_event)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_event '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r1))
	(vp-cpy-ir r1 0 r0)
	(vp-cpy-ir r1 ptr_size r1)
	(call 'view 'event '(r0 (& r1 str_data)) '(r0))
	(call 'view 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_event '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-event view str)" error_msg_wrong_types r7))
	(signature 'sig 'view 'str))

(def-func-end)

(def-method 'view 'lisp_layout)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_layout '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'ref_element '(r7 0) '(_ r0))
	(call 'view 'layout '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_layout '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-layout view)" error_msg_wrong_types r7))
	(signature 'sig 'view))

(def-func-end)

(def-method 'view 'lisp_find_id)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_find_id '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r1))
	(vp-cpy-ir r1 0 r0)
	(vp-cpy-ir r1 ptr_size r1)
	(call 'view 'find_id '(r0 (r1 num_value)) '(_ r0))
	(vpif '(r0 == 0))
		(vp-cpy-ir rsp 0 r0)
		(assign '((r0 lisp_sym_nil)) '(r0))
	(endif)
	(call 'view 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_find_id '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-find-id view id)" error_msg_wrong_types r7))
	(signature 'sig 'view 'num))

(def-func-end)

(def-method 'view 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_sub '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(call 'vector 'get_first '(r7) '(_ r0))
	(call 'view 'sub '(r0) '(r0))

	(exit 'view 'lisp_sub '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-sub view)" error_msg_wrong_types r7))
	(signature 'sig 'view))

(def-func-end)

(def-method 'view 'lisp_add_child)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_add_child '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r7))
	(call 'obj 'ref '((r7 ptr_size)) '(r3))
	(call 'obj 'ref '((r7 0)) '(r0))
	(call 'view 'add_child '(r0 r3) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_add_child '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-add-child parent child)" error_msg_wrong_types r7))
	(signature 'sig 'view 'view))

(def-func-end)

(def-method 'view 'lisp_add_front)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_add_front '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r7))
	(call 'obj 'ref '((r7 ptr_size)) '(r3))
	(call 'obj 'ref '((r7 0)) '(r0))
	(call 'view 'add_front '(r0 r3) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_add_front '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-add-front parent child)" error_msg_wrong_types r7))
	(signature 'sig 'view 'view))

(def-func-end)

(def-method 'view 'lisp_add_back)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_add_back '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r7))
	(call 'obj 'ref '((r7 ptr_size)) '(r3))
	(call 'obj 'ref '((r7 0)) '(r0))
	(call 'view 'add_back '(r0 r3) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_add_back '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-add-back parent child)" error_msg_wrong_types r7))
	(signature 'sig 'view 'view))

(def-func-end)

(def-method 'view 'lisp_pref_size)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(entry 'view 'lisp_pref_size {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'view 'pref_size {arg0} {_, arg1, arg2})
	(call 'vector 'create nil {value})
	(call 'num 'create {arg1} {arg1})
	(call 'num 'create {arg2} {arg2})
	(call 'vector 'push_back {value, arg1})
	(call 'vector 'push_back {value, arg2})

	(exit 'view 'lisp_pref_size {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(view-pref-size view)", error_msg_wrong_types, args})
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_change)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_change '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 5))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r1))
	(vp-cpy-ir r1 0 r0)
	(vp-cpy-ir r1 ptr_size r2)
	(vp-cpy-ir r1 (mul ptr_size 2) r3)
	(vp-cpy-ir r1 (mul ptr_size 3) r4)
	(vp-cpy-ir r1 (mul ptr_size 4) r5)
	(call 'view 'change '(r0 (r2 num_value) (r3 num_value) (r4 num_value) (r5 num_value)) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_change '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-change view x y w h)" error_msg_wrong_types r7))
	(signature 'sig 'view 'num 'num 'num 'num))

(def-func-end)

(def-method 'view 'lisp_set_bounds)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_set_bounds '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 5))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r1))
	(vp-cpy-ir r1 0 r0)
	(vp-cpy-ir r1 ptr_size r2)
	(vp-cpy-ir r1 (mul ptr_size 2) r3)
	(vp-cpy-ir r1 (mul ptr_size 3) r4)
	(vp-cpy-ir r1 (mul ptr_size 4) r5)
	(call 'view 'set_bounds '(r0 (r2 num_value) (r3 num_value) (r4 num_value) (r5 num_value)) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_set_bounds '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-set-bounds view x y w h)" error_msg_wrong_types r7))
	(signature 'sig 'view 'num 'num 'num 'num))

(def-func-end)

(def-method 'view 'lisp_get_bounds)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(entry 'view 'lisp_get_bounds {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'view 'get_bounds {arg0} {_, arg1, arg2, arg3, arg4})
	(call 'vector 'create nil {value})
	(call 'num 'create {arg1} {arg1})
	(call 'num 'create {arg2} {arg2})
	(call 'num 'create {arg3} {arg3})
	(call 'num 'create {arg4} {arg4})
	(call 'vector 'push_back {value, arg1})
	(call 'vector 'push_back {value, arg2})
	(call 'vector 'push_back {value, arg3})
	(call 'vector 'push_back {value, arg4})

	(exit 'view 'lisp_get_bounds {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(view-get-bounds view)", error_msg_wrong_types, args})
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_add_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_add_opaque '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 5))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r1))
	(vp-cpy-ir r1 0 r0)
	(vp-cpy-ir r1 ptr_size r2)
	(vp-cpy-ir r1 (mul ptr_size 2) r3)
	(vp-cpy-ir r1 (mul ptr_size 3) r4)
	(vp-cpy-ir r1 (mul ptr_size 4) r5)
	(call 'view 'add_opaque '(r0 (r2 num_value) (r3 num_value) (r4 num_value) (r5 num_value)) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_add_opaque '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-add-opaque view x y w h)" error_msg_wrong_types r7))
	(signature 'sig 'view 'num 'num 'num 'num))

(def-func-end)

(def-method 'view 'lisp_sub_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_sub_opaque '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 5))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r1))
	(vp-cpy-ir r1 0 r0)
	(vp-cpy-ir r1 ptr_size r2)
	(vp-cpy-ir r1 (mul ptr_size 2) r3)
	(vp-cpy-ir r1 (mul ptr_size 3) r4)
	(vp-cpy-ir r1 (mul ptr_size 4) r5)
	(call 'view 'sub_opaque '(r0 (r2 num_value) (r3 num_value) (r4 num_value) (r5 num_value)) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_sub_opaque '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-sub-opaque view x y w h)" error_msg_wrong_types r7))
	(signature 'sig 'view 'num 'num 'num 'num))

(def-func-end)

(def-method 'view 'lisp_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_opaque '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'ref_element '(r7 0) '(_ r0))
	(call 'view 'opaque '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_opaque '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-opaque view)" error_msg_wrong_types r7))
	(signature 'sig 'view))

(def-func-end)

(def-method 'view 'lisp_add_dirty)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_add_dirty '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 5))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'get_begin '(r7) '(_ r1))
	(vp-cpy-ir r1 0 r0)
	(vp-cpy-ir r1 ptr_size r2)
	(vp-cpy-ir r1 (mul ptr_size 2) r3)
	(vp-cpy-ir r1 (mul ptr_size 3) r4)
	(vp-cpy-ir r1 (mul ptr_size 4) r5)
	(call 'view 'add_dirty '(r0 (r2 num_value) (r3 num_value) (r4 num_value) (r5 num_value)) '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_add_dirty '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-add-dirty view x y w h)" error_msg_wrong_types r7))
	(signature 'sig 'view 'num 'num 'num 'num))

(def-func-end)

(def-method 'view 'lisp_dirty)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_dirty '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'ref_element '(r7 0) '(_ r0))
	(call 'view 'dirty '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_dirty '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-dirty view)" error_msg_wrong_types r7))
	(signature 'sig 'view))

(def-func-end)

(def-method 'view 'lisp_dirty_all)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'view 'lisp_dirty_all '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(vp-push r6)
	(call 'vector 'ref_element '(r7 0) '(_ r0))
	(call 'view 'dirty_all '(r0) '(r1))
	(vp-pop r0)

	(exit 'view 'lisp_dirty_all '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(view-dirty-all view)" error_msg_wrong_types r7))
	(signature 'sig 'view))

(def-func-end)
