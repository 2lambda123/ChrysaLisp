(include 'sys/func.inc)
(include 'gui/gui/class.inc)
(include 'gui/button/class.inc)
(include 'gui/flow/class.inc)
(include 'class/array/class.inc)

(gen-create 'button)
(gen-vtable 'button)

(def-method 'button 'init)
	;inputs
	;r0 = button object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = button object (ptr)
	;r1 = 0 if error, else ok

	(entry 'button 'init '(r0 r1))

	;init parent
	(s-call 'button 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-push r0)
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 button_state)
		(call 'array 'create nil '(r1))
		(vp-pop r0)
		(vp-cpy-ri r1 r0 button_click_targets)
		(call 'button 'set_long_prop '(r0 prop_border 2) '(r0))
		(call 'button 'set_long_prop '(r0 prop_flow_flags (logior flow_flag_down flow_flag_align_hcenter flow_flag_align_vcenter)) '(r0))
		(vp-cpy-cr 1 r1)
	(endif)

	(exit 'button 'init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'button 'deinit)
	;inputs
	;r0 = button object (ptr)
	;outputs
	;r0 = button object (ptr)
	;trashes
	;all but r0

	(vp-push r0)
	(call 'array 'deref '((r0 button_click_targets)))
	(vp-pop r0)
	(s-jump 'button 'deinit '(r0))

(def-func-end)

(def-method 'button 'draw)
	;inputs
	;r0 = button object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = button object (ptr)
	;trashes
	;all but r0

	(entry 'button 'draw '(r0 r1))

	;draw panel, in or out
	(vp-push r1)
	(call 'button 'get_long_prop '(r0 prop_border) '(r0 r3))
	(vp-cpy-ir r0 button_state r1)
	(vp-and-cr button_state_pressed r1)
	(vpif '(r1 != 0))
		(vp-mul-cr -1 r3)
	(endif)
	(vp-pop r1)
	(call 'button 'draw_panel '(r0 r1 1 r3) '(r0))

	(exit 'button 'draw '(r0))
	(vp-ret)

(def-func-end)

(def-method 'button 'layout)
	;inputs
	;r0 = button object (ptr)
	;outputs
	;r0 = button object (ptr)
	;trashes
	;all but r0

	(entry 'button 'layout '(r0))

	;contents offset or not
	(call 'button 'get_long_prop '(r0 prop_border) '(r0 r1))
	(vp-cpy-ir r0 button_state r2)
	(vp-cpy-rr r1 r3)
	(vp-and-cr button_state_pressed r2)
	(vpif '(r2 != 0))
		(vp-add-rr r1 r1)
	(endif)
	(vp-add-rr r3 r3)
	(vp-cpy-ir-ui r0 view_w r9)
	(vp-cpy-ir-ui r0 view_h r10)
	(vp-sub-rr r3 r9)
	(vp-sub-rr r3 r10)
	(vp-push r0)
	(call 'flow 'change '((r0 label_flow) r1 r1 r9 r10))
	(vp-pop r0)
	(jump 'view 'set_flags '(r0 view_flag_opaque view_flag_opaque))

(def-func-end)

(def-method 'button 'mouse_up)
	;inputs
	;r0 = button object (ptr)
	;r1 = mouse event data (ptr)
	;outputs
	;r0 = button object (ptr)
	;trashes
	;all but r0

	(entry 'button 'mouse_up '(r0 r1))

	(vp-cpy-ir r0 button_state r1)
	(vp-push r1)

	(vp-cpy-rr r1 r2)
	(vp-and-cr (lognot button_state_pressed) r1)
	(vp-cpy-ri r1 r0 button_state)
	(vpif '(r1 != r2))
		(call 'button 'layout '(r0))
		(call 'button 'dirty '(r0))
	(endif)

	;emit pressed signal ?
	(vp-pop r1)
	(vp-and-cr button_state_pressed r1)
	(vpif '(r1 != 0))
		(jump 'button 'emit '(r0 (r0 button_click_targets)))
	(endif)

	(exit 'button 'mouse_up '(r0))
	(vp-ret)

(def-func-end)

(def-method 'button 'mouse_move)
	;inputs
	;r0 = button object (ptr)
	;r1 = mouse event data (ptr)
	;outputs
	;r0 = button object (ptr)
	;trashes
	;all but r0

	(entry 'button 'mouse_move '(r0 r1))

	;hit ?
	(call 'button 'hit '(r0 (r1 ev_msg_mouse_rx i) (r1 ev_msg_mouse_ry i)) '(r0 r1))

	;is mouse over button ?
	(vp-cpy-ir r0 button_state r2)
	(vp-cpy-rr r2 r3)
	(vpif '(r1 != 0))
		;state pressed
		(vp-or-cr button_state_pressed r2)
	(else)
		;state not pressed
		(vp-and-cr (lognot button_state_pressed) r2)
	(endif)
	(vp-cpy-ri r2 r0 button_state)

	;if state changed then dirty
	(vpif '(r2 != r3))
		(call 'button 'layout '(r0))
		(jump 'button 'dirty '(r0))
	(endif)

	(exit 'button 'mouse_move '(r0))
	(vp-ret)

(def-func-end)

(def-method 'button 'connect_click)
	;inputs
	;r0 = button object (ptr)
	;r1 = target id (long)
	;outputs
	;r0 = button object (ptr)
	;trashes
	;r2-r5

	(entry 'button 'connect_click '(r0 r1))

	(vp-push r0)
	(call 'array 'push_back '((r0 button_click_targets) r1))
	(vp-pop r0)

	(exit 'button 'connect_click '(r0))
	(vp-ret)

(def-func-end)
