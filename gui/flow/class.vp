(include 'sys/func.inc)
(include 'gui/flow/class.inc)

(gen-create 'flow)
(gen-vtable 'flow)

(def-method 'flow 'layout)
	;inputs
	;r0 = flow object (ptr)
	;outputs
	;r0 = flow object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ulong 'flags)
		(int 'x)
		(int 'y)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'flow 'layout '(r0))
	(vp-xor-rr r1 r1)
	(vp-cpy-ri-i r1 rsp local_x)
	(vp-cpy-ri-i r1 rsp local_y)

	(call 'flow 'get_long_prop '(r0 prop_flow_flags) '(r0 r1))
	(vp-cpy-ri r1 rsp local_flags)

	(vp-and-cr flow_flag_left r1)
	(vpif '(r1 != 0))
		(vp-cpy-ir-i r0 view_w r1)
		(vp-cpy-ri-i r1 rsp local_x)
	(endif)
	(vp-cpy-ir rsp local_flags r1)
	(vp-and-cr flow_flag_up r1)
	(vpif '(r1 != 0))
		(vp-cpy-ir-i r0 view_h r1)
		(vp-cpy-ri-i r1 rsp local_y)
	(endif)

	(call 'flow 'forward '(r0 rsp ($ callback)) '(r0))
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	(vp-push r1)
	(call 'view 'pref_size '(r0) '(r0 r9 r10))
	(vp-pop r1)
	(vp-cpy-ir-i r1 local_x r7)
	(vp-cpy-ir-i r1 local_y r8)
	(vp-cpy-rr r7 r11)
	(vp-cpy-rr r8 r12)

	(vp-cpy-ir r0 hmap_parent r2)
	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr flow_flag_down r3)
	(vpif '(r3 != 0))
		;flow down
		(vp-lea-d r8 r10 r12)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr flow_flag_up r3)
	(vpif '(r3 != 0))
		;flow up
		(vp-sub-rr r10 r8)
		(vp-cpy-rr r8 r12)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr flow_flag_right r3)
	(vpif '(r3 != 0))
		;flow right
		(vp-lea-d r7 r9 r11)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr flow_flag_left r3)
	(vpif '(r3 != 0))
		;flow left
		(vp-sub-rr r9 r7)
		(vp-cpy-rr r7 r11)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr flow_flag_fillw r3)
	(vpif '(r3 != 0))
		;fill width of parent
		(vp-cpy-ir-i r2 view_w r9)
		(vp-xor-rr r7 r7)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr flow_flag_fillh r3)
	(vpif '(r3 != 0))
		;fill height of parent
		(vp-cpy-ir-i r2 view_h r10)
		(vp-xor-rr r8 r8)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr flow_flag_lastw r3)
	(vpif '(r3 != 0))
		;last one fills width gap of parent
		(ln-is-last r0 view_node r3)
		(vpif '(r3 == 0))
			(vp-cpy-ir r1 local_flags r3)
			(vp-and-cr flow_flag_right r3)
			(vpif '(r3 != 0))
				;flow right
				(vp-lea-d r7 r9 r14)
				(vp-cpy-ir-i r2 view_w r3)
				(vp-sub-rr r3 r14)
				(vp-sub-rr r14 r9)
			(endif)
			(vp-cpy-ir r1 local_flags r3)
			(vp-and-cr flow_flag_left r3)
			(vpif '(r3 != 0))
				;flow left
				(vp-add-rr r7 r9)
				(vp-xor-rr r7 r7)
			(endif)
		(endif)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr flow_flag_lasth r3)
	(vpif '(r3 != 0))
		;last one fills height gap of parent
		(ln-is-last r0 view_node r3)
		(vpif '(r3 == 0))
			(vp-cpy-ir r1 local_flags r3)
			(vp-and-cr flow_flag_down r3)
			(vpif '(r3 != 0))
				;flow down
				(vp-lea-d r8 r10 r14)
				(vp-cpy-ir-i r2 view_h r3)
				(vp-sub-rr r3 r14)
				(vp-sub-rr r14 r10)
			(endif)
			(vp-cpy-ir r1 local_flags r3)
			(vp-and-cr flow_flag_up r3)
			(vpif '(r3 != 0))
				;flow up
				(vp-add-rr r8 r10)
				(vp-xor-rr r8 r8)
			(endif)
		(endif)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr (bit-or flow_flag_align_hcenter flow_flag_align_hleft flow_flag_align_hright) r3)
	(vpif '(r3 != 0))
		(vp-cpy-ir-i r2 view_w r7)
		(vp-sub-rr r9 r7)
		(switch)
		(case '(r3 == flow_flag_align_hcenter))
			(vp-shr-cr 1 r7)
			(break)
		(case '(r3 == flow_flag_align_hleft))
			(vp-xor-rr r7 r7)
		(endswitch)
	(endif)

	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr (bit-or flow_flag_align_vcenter flow_flag_align_vtop flow_flag_align_vbottom) r3)
	(vpif '(r3 != 0))
		(vp-cpy-ir-i r2 view_h r8)
		(vp-sub-rr r10 r8)
		(switch)
		(case '(r3 == flow_flag_align_vcenter))
			(vp-shr-cr 1 r8)
			(break)
		(case '(r3 == flow_flag_align_vtop))
			(vp-xor-rr r8 r8)
		(endswitch)
	(endif)

	(vp-cpy-ri-i r11 r1 local_x)
	(vp-cpy-ri-i r12 r1 local_y)
	(jump 'view 'change '(r0 r7 r8 r9 r10))

(def-func-end)

(def-method 'flow 'pref_size)
	;inputs
	;r0 = flow object (ptr)
	;outputs
	;r0 = flow object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;all but r0

	(def-struct 'local)
		(ulong 'flags)
		(int 'w)
		(int 'h)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'flow 'pref_size '(r0))
	(vp-xor-rr r1 r1)
	(vp-cpy-ri-i r1 rsp local_w)
	(vp-cpy-ri-i r1 rsp local_h)

	(call 'flow 'get_long_prop '(r0 prop_flow_flags) '(r0 (rsp local_flags)))
	(call 'flow 'forward '(r0 rsp ($ callback)) '(r0))

	(vp-cpy-ir-i rsp local_w r9)
	(vp-cpy-ir-i rsp local_h r10)
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	(vp-push r1)
	(call 'view 'pref_size '(r0) '(r0 r9 r10))
	(vp-pop r1)
	(vp-cpy-ir r0 hmap_parent r2)
	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr (bit-or flow_flag_up flow_flag_down) r3)
	(vpif '(r3 != 0))
		;flow down or up
		(vp-cpy-ir-i r1 local_h r3)
		(vp-add-rr r10 r3)
		(vp-cpy-ri-i r3 r1 local_h)
	(endif)
	(vp-cpy-ir r1 local_flags r3)
	(vp-and-cr (bit-or flow_flag_left flow_flag_right) r3)
	(vpif '(r3 != 0))
		;flow left or right
		(vp-cpy-ir-i r1 local_w r3)
		(vp-add-rr r9 r3)
		(vp-cpy-ri-i r3 r1 local_w)
	(endif)
	(vp-cpy-ir-i r1 local_w r3)
	(vpif '(r9 > r3))
		(vp-cpy-ri-i r9 r1 local_w)
	(endif)
	(vp-cpy-ir-i r1 local_h r3)
	(vpif '(r10 > r3))
		(vp-cpy-ri-i r10 r1 local_h)
	(endif)
	(vp-ret)

(def-func-end)
