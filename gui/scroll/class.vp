(include "sys/func.inc")
(include "gui/scroll/class.inc")
(include "gui/slider/class.inc")
(include "class/sym/class.inc")

(gen-create 'scroll)
(gen-vtable 'scroll)

(def-method 'scroll :init)
	;inputs
	;r0 = scroll object (ptr)
	;r1 = vtable (pptr)
	;r2 = options flags (ulong)
	;outputs
	;r0 = scroll object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this)
		(ulong 'flags)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'scroll :init '(r0 r1 (rsp local_flags)))

	;init parent
	(s-call 'scroll :init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(assign '(r0) '((rsp local_this)))
		(vp-xor-rr r1 r1)
		(assign '(r1 r1 r1 (rsp local_flags)) '((r0 scroll_child) (r0 scroll_vslider) (r0 scroll_hslider) r1))
		(vp-and-cr scroll_flag_vertical r1)
		(vpif '(r1 /= 0))
			(call 'slider :create nil '(r0))
			(assign '((rsp local_this)) '(r7))
			(assign '(r0) '((r7 scroll_vslider)))
			(call 'slider :connect '(r0 (r7 component_id)) '(r0))
			(call 'scroll :add_front '(r7 r0) '(r0))
		(endif)

		(assign '((rsp local_flags)) '(r1))
		(vp-and-cr scroll_flag_horizontal r1)
		(vpif '(r1 /= 0))
			(call 'slider :create nil '(r0))
			(assign '((rsp local_this)) '(r7))
			(assign '(r0) '((r7 scroll_hslider)))
			(call 'slider :connect '(r0 (r7 component_id)) '(r0))
			(call 'scroll :add_front '(r7 r0) '(r0))
		(endif)

		(vp-cpy-cr 1 r1)
	(endif)

	(exit 'scroll :init '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'scroll :add_child)
	;inputs
	;r0 = scroll object (ptr)
	;r1 = child view object (ptr)
	;outputs
	;r0 = scroll object (ptr)
	;trashes
	;r1-r14

	(entry 'scroll :add_child '(r0 r1))

	(assign '((r0 scroll_child)) '(r2))
	(vpif '(r2 /= 0))
		(vp-push r0 r1)
		(call 'view :sub '(r2) '(r0))
		(call 'view :deref '(r0))
		(vp-pop r0 r1)
	(endif)
	(assign '(r1) '((r0 scroll_child)))
	(call 'view :add_back '(r0 r1) '(r0))

	;deinit parent
	(exit 'scroll :add_child '(r0))
	(vp-ret)

(def-func-end)

(def-method 'scroll :pref_size)
	;inputs
	;r0 = scroll object (ptr)
	;outputs
	;r0 = scroll object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;r1-r14

	(entry 'scroll :pref_size '(r0))

	(vp-push r0)
	(s-call 'scroll :pref_size '(r0) '(r0 r7 r8))
	(assign '((r0 scroll_vslider)) '(r0))
	(vpif '(r0 /= 0))
		(call 'slider :pref_size '(r0) '(_ r9 _))
		(vp-add-rr r9 r7)
	(endif)
	(assign '((rsp 0)) '(r0))
	(assign '((r0 scroll_hslider)) '(r0))
	(vpif '(r0 /= 0))
		(call 'slider :pref_size '(r0) '(_ r9 _))
		(vp-add-rr r9 r8)
	(endif)
	(vp-pop r0)

	(exit 'scroll :pref_size '(r0 r7 r8))
	(vp-ret)

(def-func-end)

(def-method 'scroll :action)
	;inputs
	;r0 = scroll object (ptr)
	;r1 = event data (ptr)
	;outputs
	;r0 = scroll object (ptr)
	;trashes
	;r1-r14

	(entry 'scroll :event '(r0 r1))

	(call 'scroll :layout '(r0) '(r0))
	(call 'scroll :set_flags '(r0 view_flag_dirty_all view_flag_dirty_all) '(r0 _))

	(exit 'scroll :event '(r0))
	(vp-ret)

(def-func-end)
