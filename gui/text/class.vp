(include 'sys/func.inc)
(include 'gui/gui/class.inc)
(include 'gui/ctx/class.inc)
(include 'gui/font/class.inc)
(include 'gui/texture/class.inc)
(include 'class/vector/class.inc)
(include 'gui/text/class.inc)
(include 'class/str/class.inc)

(gen-create 'text)
(gen-vtable 'text)

(def-method 'text 'init)
	;inputs
	;r0 = text object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = text object (ptr)
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'text 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-xor-rr r1 r1)
		(vp-cpy-ri r1 r0 text_string)
		(vp-cpy-ri r1 r0 text_words)
		(vp-cpy-rr r0 r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'text 'deinit)
	;inputs
	;r0 = text object (ptr)
	;trashes
	;all but r0

	;save object
	(vp-push r0)

	;deref any words
	(call 'vector 'deref_if '((r0 text_words)))

	;deinit parent
	(vp-pop r0)
	(s-jump 'text 'deinit '(r0))

(def-func-end)

(def-method 'text 'draw)
	;inputs
	;r0 = view object (ptr)
	;r1 = draw ctx (ptr)
	;trashes
	;all but r0

	(ptr 'this 'ctx 'txt 'font 'str)
	(pptr 'words 'words_end)
	(ulong 'handle)
	(int 'x 'w 'h)
	(uint 'col)

	;save inputs
	(push-scope)
	(entry 'text 'draw {this, ctx})

	;get properties, do checks for any changes
	(call 'text 'get_long_prop {this, prop_ink_color} {_, col})
	(call 'text 'get_prop {this, prop_font} {_, font})
	(call 'text 'get_prop {this, prop_text} {_, str})
	(vpif {str && str != this->text_string})
		(assign {str} {this->text_string})
		(call 'text 'switch_text {this})
	(endif)

	;draw text
	(vpif {this->text_string && font})
		(call 'vector 'get_iters {this->text_words} {_, words, words_end})
		(assign {0} {x})
		(loop-start)
			(call 'font 'ref_word {font, *words} {_, txt})
			(call 'texture 'get_metrics {txt} {_, handle, w, h})
			(vpif {handle})
				(call 'ctx 'blit {ctx, handle, col, x, 0, w, h})
				(assign {x + w + (h >> 2)} {x})
			(endif)
			(call 'texture 'deref {txt})
		(loop-until {(words + ptr_size => words) == words_end})
	(endif)

	(exit 'text 'draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'text 'pref_size)
	;inputs
	;r0 = text object (ptr)
	;outputs
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;all but r0

	(ptr 'this 'txt 'font 'str)
	(pptr 'words 'words_end)
	(uint 'width 'height 'length 'word_w)

	;save inputs
	(push-scope)
	(entry 'text 'pref_size {this})

	;get properties, do checks for any changes
	(call 'text 'get_prop {this, prop_font} {_, font})
	(call 'text 'get_prop {this, prop_text} {_, str})
	(vpif {str && str != this->text_string})
		(assign {str} {this->text_string})
		(call 'text 'switch_text {this})
	(endif)

	;bounds of text
	(assign {0 => width} {height})
	(vpif {this->text_string && font})
		(call 'vector 'get_iters {this->text_words} {_, words, words_end})
		(loop-start)
			(call 'font 'ref_word {font, *words} {_, txt})
			(call 'texture 'get_metrics {txt} {_, _, word_w, height})
			(call 'texture 'deref {txt})
			(assign {width + word_w} {width})
		(loop-until {(words + ptr_size => words) == words_end})
		(d-call 'vector 'get_length {this->text_words} {_, length})
		(assign {width + (length - 1) * (height >> 2)} {width})
	(endif)

	(exit 'text 'pref_size {this, width, height})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'text 'switch_text)
	;inputs
	;r0 = text object (ptr)
	;trashes
	;all but r0

	(ptr 'this)

	(push-scope)
	(entry 'text 'switch_text {this})

	;create new split words
	(call 'vector 'deref_if {this->text_words})
	(call 'str 'split {this->text_string, char_space} {_, this->text_words})

	(entry 'text 'switch_text {this})
	(pop-scope)
	(return)

(def-func-end)
