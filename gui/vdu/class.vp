(include 'sys/func.inc)
(include 'gui/gui/class.inc)
(include 'gui/ctx/class.inc)
(include 'gui/region/class.inc)
(include 'gui/font/class.inc)
(include 'gui/texture/class.inc)
(include 'class/sym/class.inc)
(include 'gui/vdu/class.inc)
(include 'class/vector/class.inc)

(gen-create 'vdu)
(gen-vtable 'vdu)

(def-method 'vdu 'init)
	;inputs
	;r0 = vdu object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = vdu object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	;init parent
	(s-call 'vdu 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(vp-xor-rr r2 r2)
		(assign '(r2 r2 r2 r2 r2 r2 r2)
			'((r0 vdu_font) (r0 vdu_chars) (r0 vdu_cursor_x) (r0 vdu_cursor_y)
			(r0 vdu_width) (r0 vdu_height) (r0 vdu_textures)))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'vdu 'deinit)
	;inputs
	;r0 = vdu object (ptr)
	;outputs
	;r0 = vdu object (ptr)
	;trashes
	;r1-r14

	;save object
	(vp-push r0)

	(call 'sys_mem 'free '((r0 vdu_chars)))
	(assign '((rsp 0)) '(r0))
	(call 'vector 'deref_if '((r0 vdu_textures)))

	;deinit parent
	(vp-pop r0)
	(s-jump 'vdu 'deinit '(r0))

(def-func-end)

(def-method 'vdu 'draw)
	;inputs
	;r0 = view object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = view object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'ctx 'txt 'font)
	(ulong 'handle)
	(int 'x 'c 'bx 'by 'bx1 'by1)
	(uint 'w 'h 'col)

	;save inputs
	(push-scope)
	(entry 'vdu 'draw {this, ctx})

	;get properties, do checks for any changes
	(call 'vdu 'get_long_prop {this, static_sym_ink_color} {_, col})
	(call 'vdu 'get_long_prop {this, static_sym_vdu_width} {_, w})
	(call 'vdu 'get_long_prop {this, static_sym_vdu_height} {_, h})
	(call 'vdu 'get_prop {this, static_sym_font} {_, font})
	(vpif {font && font /= this->vdu_font})
		(assign {font} {this->vdu_font})
		(call 'vdu 'switch_font {this})
	(endif)
	(vpif {w /= this->vdu_width || h /= this->vdu_height})
		(assign {w, h} {this->vdu_width, this->vdu_height})
		(call 'vdu 'switch_size {this})
	(endif)

	;draw vdu chars
	(vpif {this->vdu_font && this->vdu_chars})
		(call 'region 'bounds {ctx->ctx_dirty_region} {bx, by, bx1, by1})
		(assign {(bx - ctx->ctx_x) / this->vdu_char_width} {bx})
		(assign {(bx1 - ctx->ctx_x - 1) / this->vdu_char_width} {bx1})
		(assign {(by - ctx->ctx_y) / this->vdu_char_height} {by})
		(assign {(by1 - ctx->ctx_y - 1) / this->vdu_char_height} {by1})
		(vpif {bx1 >= this->vdu_width})
			(assign {this->vdu_width - 1} {bx1})
		(endif)
		(vpif {by1 >= this->vdu_height})
			(assign {this->vdu_height - 1} {by1})
		(endif)
		(loop-while {by <= by1})
			(assign {bx} {x})
			(loop-while {x <= bx1})
				(assign {(this->vdu_chars)[by * this->vdu_width + x]} {c})
				(vpif {c > 127})
					;inverse video char
					(call 'ctx 'set_color {ctx, col})
					(call 'ctx 'filled_box {ctx, x * this->vdu_char_width, by * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
					(assign {c & 127} {c})
					(breakif {c <= char_space})
					(call 'vector 'get_element {this->vdu_textures, c - 33} {_, txt})
					(call 'texture 'get_metrics {txt} {_, handle, w ,h})
					(vpif {handle})
						(call 'ctx 'blit {ctx, handle, argb_black, x * this->vdu_char_width + ((this->vdu_char_width - w) >>> 1), by * this->vdu_char_height, w, h})
					(endif)
				(elseif {c > char_space})
					;normal video char
					(call 'vector 'get_element {this->vdu_textures, c - 33} {_, txt})
					(call 'texture 'get_metrics {txt} {_, handle, w ,h})
					(vpif {handle})
						(call 'ctx 'blit {ctx, handle, col, x * this->vdu_char_width + ((this->vdu_char_width - w) >>> 1), by * this->vdu_char_height, w, h})
					(endif)
				(endif)
				(assign {x + 1} {x})
			(loop-end)
			(assign {by + 1} {by})
		(loop-end)
	(endif)

	(exit 'vdu 'draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'vdu 'pref_size)
	;inputs
	;r0 = vdu object (ptr)
	;outputs
	;r0 = vdu object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;r1-r14

	(ptr 'this 'font)
	(uint 'w 'h)

	;save inputs
	(push-scope)
	(entry 'vdu 'pref_size {this})

	;get properties, do checks for any changes
	(call 'vdu 'get_long_prop {this, static_sym_vdu_width} {_, w})
	(call 'vdu 'get_long_prop {this, static_sym_vdu_height} {_, h})
	(call 'vdu 'ref_prop {this, static_sym_font} {_, font})
	(vpif {font && font /= this->vdu_font})
		(assign {font} {this->vdu_font})
		(call 'vdu 'switch_font {this})
	(endif)
	(vpif {w /= this->vdu_width || h /= this->vdu_height})
		(assign {w, h} {this->vdu_width, this->vdu_height})
		(call 'vdu 'switch_size {this})
	(endif)
	(call 'font 'deref_if {font})

	(exit 'vdu 'pref_size {this, this->vdu_width * this->vdu_char_width,
		this->vdu_height * this->vdu_char_height})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'vdu 'switch_font)
	;inputs
	;r0 = vdu object (ptr)
	;outputs
	;r0 = vdu object (ptr)
	;trashes
	;r1-r14

	(ptr 'this)

	;save inputs
	(push-scope)
	(entry 'vdu 'switch_font {this})

	;set char size
	(call 'font 'get_metrics {this->vdu_font} {_, _, _, this->vdu_char_height})
	(assign {this->vdu_char_height * 9 >> 4} {this->vdu_char_width})

	;ref char textures
	(call 'vector 'deref_if {this->vdu_textures})
	(call 'font 'ascii_textures {this->vdu_font} {_, this->vdu_textures})

	(exit 'vdu 'switch_font {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'vdu 'switch_size)
	;inputs
	;r0 = vdu object (ptr)
	;outputs
	;r0 = vdu object (ptr)
	;trashes
	;r1-r14

	(ptr 'this)
	(ulong 'size)

	;save inputs
	(push-scope)
	(entry 'vdu 'switch_size {this})

	(call 'sys_mem 'free {this->vdu_chars})
	(call 'sys_mem 'alloc {this->vdu_width * this->vdu_height} {this->vdu_chars, size})
	(call 'sys_mem 'fill {this->vdu_chars, size, char_space})

	(exit 'vdu 'switch_size {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'vdu 'print_char)
	;inputs
	;r0 = vdu object (ptr)
	;r1 = char (uint)
	;outputs
	;r0 = vdu object (ptr)
	;trashes
	;r1-r14

	(ptr 'this)
	(uint 'c)

	;save inputs
	(push-scope)
	(entry 'vdu 'print_char {this, c})

	(vpif {this->vdu_chars})
		;scroll ?
		(vpif {this->vdu_cursor_y >= this->vdu_height})
			(assign {0} {this->vdu_cursor_x})
			(assign {this->vdu_height - 1} {this->vdu_cursor_y})
			(call 'sys_mem 'copy {this->vdu_chars + this->vdu_width, this->vdu_chars, (this->vdu_height - 1) * this->vdu_width})
			(call 'sys_mem 'fill {this->vdu_chars + (this->vdu_height - 1) * this->vdu_width, this->vdu_width, char_space})
			(call 'vdu 'dirty {this})
		(endif)

		(vpif {c = char_backspace})
			;backspace
			(vpif {this->vdu_cursor_x})
				(assign {this->vdu_cursor_x - 1} {this->vdu_cursor_x})
				(assign {32} {(this->vdu_chars)[this->vdu_cursor_y * this->vdu_width + this->vdu_cursor_x]})
				(call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width,
					this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
			(endif)
		(elseif {c = vdu_clear_line})
			;clear line
			(vpif {this->vdu_cursor_x})
				(call 'sys_mem 'fill {this->vdu_chars + this->vdu_cursor_y * this->vdu_width, this->vdu_width, char_space})
				(call 'vdu 'add_dirty {this, 0, this->vdu_cursor_y * this->vdu_char_height,
					this->vdu_cursor_x * this->vdu_char_width, this->vdu_char_height})
				(assign {0} {this->vdu_cursor_x})
			(endif)
		(elseif {c = vdu_clear_screen})
			;clear screen
			(call 'sys_mem 'fill {this->vdu_chars, this->vdu_width * this->vdu_height, char_space})
			(call 'vdu 'dirty {this})
			(assign {0 => this->vdu_cursor_x} {this->vdu_cursor_y})
		(else)
			;wrap cursor ?
			(vpif {this->vdu_cursor_x >= this->vdu_width})
				(assign {0} {this->vdu_cursor_x})
				(assign {this->vdu_cursor_y + 1} {this->vdu_cursor_y})
			(endif)

			(vpif {c = char_lf || c = 13})
				;line feed
				(assign {0} {this->vdu_cursor_x})
				(assign {this->vdu_cursor_y + 1} {this->vdu_cursor_y})
			(elseif {c = char_tab})
				;tab
				(assign {4 - (this->vdu_cursor_x & 3)} {c})
				(loop-start)
					(call 'vdu 'print_char {this, 32})
				(loop-untilnot {c - 1 => c})
			(elseif {(c & 127) >= char_space && (c & 127) < 127})
				;printable char
				(assign {c} {(this->vdu_chars)[this->vdu_cursor_y * this->vdu_width + this->vdu_cursor_x]})
				(call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width,
					this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
				(assign {this->vdu_cursor_x + 1} {this->vdu_cursor_x})
			(endif)
		(endif)
	(endif)

	(exit 'vdu 'print_char {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'vdu 'print_cstr)
	;inputs
	;r0 = vdu object (ptr)
	;r1 = c string (pubyte)
	;outputs
	;r0 = vdu object (ptr)
	;trashes
	;r1-r14

	(ptr 'this)
	(pubyte 'charp)

	;save inputs
	(push-scope)
	(entry 'vdu 'print_cstr {this, charp})

	;print chars
	(loop-while {*charp})
		(call 'vdu 'print_char {this, *charp})
		(assign {charp + 1} {charp})
	(loop-end)

	(exit 'vdu 'print_cstr {this})
	(pop-scope)
	(return)

(def-func-end)
