(include "sys/func.inc")
(include "gui/path/class.inc")
(include "class/list/class.inc")

(def-method 'path :stroke_polylines)
	;inputs
	;r0 = output list of path objects (ptr)
	;r1 = stack array object (ptr)
	;r2 = input list of path objects (ptr)
	;r3 = radius (fixed)
	;r4 = tolerance (fixed)
	;r5 = join style (byte)
	;r6 = cap style1 (byte)
	;r7 = cap style2 (byte)
	;outputs
	;r0 = output list of path objects (ptr)
	;trashes
	;r1-r14

	(def-vars
		(ptr this stack path1)
		(pptr iter_begin iter_end)
		(int radius eps)
		(byte join_style cap1_style cap2_style))

	(push-scope)
	(entry 'path :stroke_polylines {this, stack, iter_begin, radius, eps, join_style, cap1_style, cap2_style})

	(call 'list :get_both {iter_begin} {_, iter_begin, iter_end})
	(loop-while {iter_begin /= iter_end})
		(call 'path :stroke_polyline {*iter_begin, stack, radius, eps, join_style, cap1_style, cap2_style} {_, path1})
		(call 'list :push_back {this, path1})
		(assign {iter_begin + +ptr_size} {iter_begin})
	(loop-end)

	(exit 'path :stroke_polylines {this})
	(pop-scope)
	(return)

(def-func-end)
