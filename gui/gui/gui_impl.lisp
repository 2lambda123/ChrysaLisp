;import into the shared root env of this node !
(defq _ (env))
;comment next two lines out if need to...
(while (penv _) (setq _ (penv _)))
(eval '(env 307) _)
(import "sys/lisp.inc" _)
(import "class/lisp.inc" _)
(import "gui/lisp.inc" _)

(import "sys/pii/lisp.inc")

;profiling callbacks on the GUI thread from :draw method !!!
(defq *profile* (env -1) *profile_ret* (list)
	select (list (task-mailbox) (mail-alloc-mbox))
	rate (/ 1000000 60) id t
	mouse_x 0 mouse_y 0 mouse_buttons 0 mouse_id 0)

(enums +select 0
	(enum main timer))

(defun cook_key (key mod)
	(and (/= (logand mod (const (logior +ev_key_mod_caps_lock +ev_key_mod_shift))) 0)
		(defq i (find (char key) "§1234567890-=qwertyuiop[]asdfghjkl;\`zxcvbnm,./'"))
		(setq key (code (elem i (const (cat "±!@#$%^&*()_+QWERTYUIOP{}ASDFGHJKL:|~ZXCVBNM<>?" (char 34)))))))
	key)

(defun main ()
	;declare service
	(defq service (mail-declare (task-mailbox) "GUI_SERVICE" "GUI Service 0.2"))
	;init screen widget
	(def (defq screen (Backdrop)) :style :grid :color +argb_grey2 :ink_color +argb_grey1)
	(.-> screen (:change 0 0 1280 960) :dirty_all)
	(gui-init screen)
	;fire up the login app and clipboard service
	(open-child "apps/login/app.lisp" +kn_call_open)
	(open-child "apps/clipboard/app.lisp" +kn_call_open)
	(mail-timeout (elem +select_timer select) rate)
	(while id
		(defq msg (mail-read (elem (defq idx (mail-select select)) select)))
		(cond
			((= idx +select_main)
				;main mailbox
				(bind '(cmd view owner reply) msg)
				(cond
					((= cmd 0)
						;hide and sub view
						(.-> view :hide :sub))
					((= cmd 1)
						;add view at front
						(setf view +view_owner_id owner 0)
						(. screen :add_front view)
						(. view :set_flags +view_flag_dirty_all +view_flag_dirty_all))
					((= cmd 2)
						;add view at back
						(setf view +view_owner_id owner 0)
						(. screen :add_back view)
						(. view :set_flags +view_flag_dirty_all +view_flag_dirty_all)))
				(mail-send reply msg)
				(undef (env) 'msg 'view 'owner 'reply))
			((= idx +select_timer)
				;timer event
				(mail-timeout (elem +select_timer select) rate)
				(gui-update mouse_x mouse_y 0)
				(while (defq msg (gui-event))
					(defq event (getf msg +sdl_common_event_type))
					(cond
						((= event SDL_MOUSEWHEEL)
							(bind '(view _ _) (. screen :hit_tree mouse_x mouse_y))
							(setq mouse_id (. view :get_id))
							(if (defq owner (. view :find_owner))
								(mail-send owner (setf-> (str-alloc +ev_msg_wheel_size)
									(+ev_msg_type +ev_type_wheel)
									(+ev_msg_target_id mouse_id)
									(+ev_msg_wheel_x (getf msg +sdl_mouse_wheel_event_x))
									(+ev_msg_wheel_y (getf msg +sdl_mouse_wheel_event_y))
									(+ev_msg_wheel_direction (getf msg +sdl_mouse_wheel_event_direction))))))
						((= event SDL_MOUSEMOTION)
							(setq mouse_x (getf msg +sdl_mouse_motion_event_x)
								mouse_y (getf msg +sdl_mouse_motion_event_y)
								mouse_buttons (getf msg +sdl_mouse_motion_event_state))
							(when (= mouse_buttons 0)
								(bind '(view _ _) (. screen :hit_tree mouse_x mouse_y))
								(setq mouse_id (. view :get_id)))
							(and (defq view (. screen :find_id mouse_id))
								(defq owner (. view :find_owner))
								(mail-send owner (setf-> (str-alloc +ev_msg_mouse_size)
									(+ev_msg_type +ev_type_mouse)
									(+ev_msg_target_id mouse_id)
									(+ev_msg_mouse_x mouse_x)
									(+ev_msg_mouse_y mouse_y)
									(+ev_msg_mouse_rx (- mouse_x (getf view +view_ctx_x 0)))
									(+ev_msg_mouse_ry (- mouse_y (getf view +view_ctx_y 0)))
									(+ev_msg_mouse_buttons mouse_buttons)
									(+ev_msg_mouse_count 0)))))
						((= event SDL_MOUSEBUTTONDOWN)
							(setq mouse_x (getf msg +sdl_mouse_button_event_x)
								mouse_y (getf msg +sdl_mouse_button_event_y)
								mouse_buttons (logior mouse_buttons (getf msg +sdl_mouse_button_event_button)))
							(bind '(view _ _) (. screen :hit_tree mouse_x mouse_y))
							(setq mouse_id (. view :get_id))
							(and (defq view (. screen :find_id mouse_id))
								(defq owner (. view :find_owner))
								(mail-send owner (setf-> (str-alloc +ev_msg_mouse_size)
									(+ev_msg_type +ev_type_mouse)
									(+ev_msg_target_id mouse_id)
									(+ev_msg_mouse_x mouse_x)
									(+ev_msg_mouse_y mouse_y)
									(+ev_msg_mouse_rx (- mouse_x (getf view +view_ctx_x 0)))
									(+ev_msg_mouse_ry (- mouse_y (getf view +view_ctx_y 0)))
									(+ev_msg_mouse_buttons mouse_buttons)
									(+ev_msg_mouse_count (getf msg +sdl_mouse_button_event_clicks))))))
						((= event SDL_MOUSEBUTTONUP)
							(setq mouse_x (getf msg +sdl_mouse_button_event_x)
								mouse_y (getf msg +sdl_mouse_button_event_y)
								mouse_buttons (logxor mouse_buttons (getf msg +sdl_mouse_button_event_button)))
							(and (defq view (. screen :find_id mouse_id))
								(defq owner (. view :find_owner))
								(mail-send owner (setf-> (str-alloc +ev_msg_mouse_size)
									(+ev_msg_type +ev_type_mouse)
									(+ev_msg_target_id mouse_id)
									(+ev_msg_mouse_x mouse_x)
									(+ev_msg_mouse_y mouse_y)
									(+ev_msg_mouse_rx (- mouse_x (getf view +view_ctx_x 0)))
									(+ev_msg_mouse_ry (- mouse_y (getf view +view_ctx_y 0)))
									(+ev_msg_mouse_buttons mouse_buttons)
									(+ev_msg_mouse_count (getf msg +sdl_mouse_button_event_clicks))))))
						((= event SDL_KEYDOWN)
							(defq key_code (getf msg +sdl_keyboard_event_scancode)
								key (getf msg +sdl_keyboard_event_sym)
								mod (getf msg +sdl_keyboard_event_mod))
							(and (defq view (. screen :find_id mouse_id))
								(defq owner (. view :find_owner))
								(mail-send owner (setf-> (str-alloc +ev_msg_key_size)
									(+ev_msg_type +ev_type_key)
									(+ev_msg_target_id mouse_id)
									(+ev_msg_key_keycode key_code)
									(+ev_msg_key_key (cook_key key mod))
									(+ev_msg_key_mod mod)))))
						((= event SDL_WINDOWEVENT)
							(defq event (getf msg +sdl_window_event_event))
							(cond
								((= event SDL_WINDOWEVENT_SIZE_CHANGED)
									(.-> screen
										(:set_bounds 0 0
											(getf msg +sdl_window_event_data1)
											(getf msg +sdl_window_event_data2))
										(:set_flags +view_flag_dirty_all +view_flag_dirty_all))
									(each (lambda (child)
										(defq owner (. child :find_owner))
										(mail-send owner (setf-> (str-alloc +ev_msg_gui_size)
											(+ev_msg_type +ev_type_gui)
											(+ev_msg_target_id (. child :get_id))))) (. screen :children))
									(gui-update mouse_x mouse_y 1))
								((or (= event SDL_WINDOWEVENT_SHOWN) (= event SDL_WINDOWEVENT_RESTORED))
									(. screen :set_flags +view_flag_dirty_all +view_flag_dirty_all))))
						((= event SDL_QUIT)
							;nil soon...
							(setq id t)))))))
	(each mail-free-mbox (slice 1 -1 select))
	(gui-deinit)
	(mail-forget service))
