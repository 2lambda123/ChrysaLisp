(include "sys/func.inc")
(include "gui/slider/class.inc")
(include "gui/pixmap/class.inc")
(include "class/sym/class.inc")
(include "gui/ctx/class.inc")

(def-method 'slider :draw)
	;inputs
	;r0 = window object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'ctx)
	(long 'max 'val 'portion)
	(uint 'eo 'width 'height 'col 'dcol 'state)

	;save inputs
	(push-scope)
	(entry 'slider :draw {this, ctx})

	;get properties
	(call 'slider :get_long_prop {this, static_sym_maximum} {_, max})
	(call 'slider :get_long_prop {this, static_sym_portion} {_, portion})
	(call 'slider :get_long_prop {this, static_sym_value} {_, val})
	(call 'slider :get_long_prop {this, static_sym_color} {_, col})
	(call 'slider :get_long_prop {this, static_sym_state} {_, state})

	;draw outline
	(call 'ctx :set_color {ctx, 0xff000000})
	(call 'slider :get_bounds {this} {_, _, _, width, height})
	(call 'ctx :box {ctx, 0, 0, width, height})

	;draw background
	(call 'pixmap :darker {col} {dcol})
	(call 'ctx :set_color {ctx, dcol})
	(call 'ctx :filled_box {ctx, 1, 1, width - 2, height - 2})

	;draw elevator
	(vpif {state})
		(call 'pixmap :brighter {col} {col})
	(endif)
	(call 'ctx :set_color {ctx, col})
	(vpif {width > height})
		(assign {width - 2} {width})
		(vpif {max > 0})
			(assign {(width * portion) // (max + portion)} {portion})
			(assign {(val * (width - portion)) // max} {eo})
		(else)
			(assign {width, 0} {portion, eo})
		(endif)
		(call 'ctx :filled_box {ctx, eo + 1, 1, portion, height - 2})
	(else)
		(assign {height - 2} {height})
		(vpif {max > 0})
			(assign {(height * portion) // (max + portion)} {portion})
			(assign {(val * (height - portion)) // max} {eo})
		(else)
			(assign {height, 0} {portion, eo})
		(endif)
		(call 'ctx :filled_box {ctx, 1, eo + 1, width - 2, portion})
	(endif)

	(exit 'slider :draw {this})
	(pop-scope)
	(return)

(def-func-end)
