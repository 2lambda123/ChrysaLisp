(include 'sys/func.inc)
(include 'gui/slider/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(def-method 'slider 'lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'slider 'lisp_create '(r0 r1))

(errorcases
	(class/array/get_length r1 r2)
	(gotoif '(r2 /= 0) 'error))

	(vp-push r0)
	(call 'slider 'create nil '(r1))
	(vp-pop r0)

	(exit 'slider 'lisp_create '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(create-slider)" error_msg_wrong_num_of_args r1)))

(def-func-end)

(def-method 'slider 'lisp_connect_value)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'slider 'lisp_connect_value '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'slider 'connect_value))
	(class/vector/bind_args r1 in '(slider num))
	(call 'slider 'connect_value in '(r0))
	(call 'slider 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'slider 'lisp_connect_value '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(slider-connect-value slider id)" error_msg_wrong_types r1))
	(signature '(slider num)))

(def-func-end)
