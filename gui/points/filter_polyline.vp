(include 'sys/func.inc)
(include 'gui/points/class.inc)
(include 'sys/math/class.inc)

(def-method 'points 'filter_polyline)
	;inputs
	;r0 = points object (ptr)
	;r1 = source points object, can be same (ptr)
	;r2 = tolerance (16.16)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'that)
	(plong 'iter_begin 'iter_end 'iter_this)
	(int 'eps)

	(push-scope)
	(entry 'points 'filter_polyline {this, that, eps})

	(call 'points 'get_iters {that} {_, iter_begin, iter_end})
	(call 'points 'get_begin {this} {_, iter_this})

	(vec-set 0)
	(vec-load 2 {iter_end, iter_begin})
	(vec-dup 2)
	(vec-dif 2)
	(vpif (list (elem 0 (vec-pop 1)) '> (mul 2 long_size)))
		(vec-load 1 {eps})
		(vec-fsquare 1)
		(vec-load 1 {iter_this})
		(bind '(e i x j) (vec-top 4))
		(loop-start 'outer_loop)
			(vpif (list i '!= j))
				(vec-load-long 2 i)
				(vec-store-long 2 j)
			(endif)
			(loop-start)
				(vp-add-cr (mul 2 long_size) i)
				(breakif (list i '== e) 'outer_loop)
				(vec-load-long 2 j)
				(vec-load-long 2 i)
				(vec-fdistance-squared 2)
			(loop-until (list (elem 0 (vec-pop 1)) '>= x))
			(vp-add-cr (mul 2 long_size) j)
		(loop-end)
		(vec-store 1 {iter_end})
		(call 'points 'set_length {this, (iter_end - iter_this >> 3) + 2})
	(endif)

	(exit 'points 'filter_polyline {this})
	(pop-scope)
	(return)

(def-func-end)
