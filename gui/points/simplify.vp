(include 'sys/func.inc)
(include 'gui/points/class.inc)
(include 'sys/math/class.inc)

(def-method 'points 'simplify)
	;inputs
	;r0 = points object (ptr)
	;r1 = source points object (ptr)
	;r2 = stack array object (ptr)
	;r3 = tolerance (16.16)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'that 'stack)
	(union
		(ulong 'span 'rspan)
		(uint 'first 'last 'index 'rlast))
	(int 'p1x 'p1y 'p2x 'p2y 'p3x 'p3y)
	(uint 'start 'length)
	(int 'eps 'max 'dist)

	(push-scope)
	(entry 'points 'simplify {this, that, stack, eps})

	;any point doing anything ?
	(d-call 'points 'get_length {that} {_, length})
	(vpif {length <= 4})
		;just append to output
		(d-call 'points 'append {this, that, 0, length})
	(else)
		;first span
		(assign {0, length - 2} {first, last})

		;output first point
		(call 'points 'get_first2 {that} {_, p1x, p1y})
		(call 'points 'push_back2 {this, p1x, p1y})

		(d-call 'array 'get_length {stack} {_, start})
		(loop-start)
			(switch 'out)
			(vpcase {last - first > 2})
				;find max distance point
				(assign {eps, first + 2} {max, length})
				(call 'points 'get_element2 {that, first} {_, p2x, p2y})
				(call 'points 'get_element2 {that, last} {_, p3x, p3y})
				(loop-start)
					(call 'points 'get_element2 {that, length} {_, p1x, p1y})
					(call 'sys_math 'distance_sqd {p1x, p2y, p2x, p2y, p3x, p3y} {dist})
					(vpif {dist > max})
						(assign {dist, length} {max, index})
					(endif)
				(loop-until {(length + 2 => length) = last})

				;continue subdivision ?
				(vpif {max > eps})
					(assign {last} {rlast})
					(assign {index} {last})
					(call 'points 'push_back2 {stack, rspan, span})
					(break 'out)
				(endif)
			(default)
				;output point
				(call 'points 'get_element2 {that, last} {_, p1x, p1y})
				(call 'points 'push_back2 {this, p1x, p1y})
			(endswitch)

			;next span
			(d-call 'array 'get_length {stack} {_, length})
			(breakif {length = start})
			(call 'array 'pop_back {stack} {_, span})
		(loop-end)
	(endif)

	(exit 'points 'simplify {this})
	(pop-scope)
	(return)

(def-func-end)
