(include 'sys/func.inc)
(include 'gui/points/class.inc)
(include 'sys/math/class.inc)

(def-method 'points 'transform)
	;inputs
	;r0 = points object (ptr)
	;r1 = source points object, can be same (ptr)
	;r2 = m1x (16.16)
	;r3 = m1y (16.16)
	;r4 = m2x (16.16)
	;r5 = m2y (16.16)
	;r6 = trx (16.16)
	;r7 = try (16.16)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'that)
	(pptr 'iter_begin 'iter_end 'iter_this)
	(int 'm1x 'm1y 'm2x 'm2y 'trx 'try)

	(push-scope)
	(entry 'points 'transform {this, that, m1x, m1y, m2x, m2y, trx, try})

	(call 'points 'get_both {that} {_, iter_begin, iter_end})
	(call 'points 'get_begin {this} {_, iter_this})

	(vec-set 0)
	(vec-load 3 {iter_end, iter_begin, iter_this})
	(bind '(e i j) (vec-top 3))
	(vec-load 2 {m1x, m1y})
	(defq m1 (vec-top 2))
	(vec-load 2 {m2x, m2y})
	(defq m2 (vec-top 2))
	(vec-load 2 {trx, try})
	(defq tr (vec-top 2))

	(loop-while `(,i /= ,e))
		(vec-load-long 2 i)
		(defq xy (vec-top 2))

		(vec-dup 2 m1)
		(vec-fdot 2 xy)
		(vec-dup 2 m2)
		(vec-fdot 2 xy)
		(vec-add 2 tr)
		(vec-store-long 2 j)
		(vp-add-cr (* 2 long_size) i)
		(vp-add-cr (* 2 long_size) j)
	(loop-end)

	(exit 'points 'transform {this})
	(pop-scope)
	(return)

(def-func-end)
