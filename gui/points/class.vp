(include 'sys/func.inc)
(include 'gui/points/class.inc)
(include 'sys/math/class.inc)

(gen-create 'points)
(gen-vtable 'points)

(defun vecop1 (_)
	;trashes
	;r1-r6+
	(entry 'points _ '(r0 r1 r2))
	(class/array/get_both r0 r3 r4)
	(assign '((r1 array_begin) (r2 array_begin)) '(r1 r2))
	(vec-set 5)
	(loop-start)
		(vec-load-long 1 r1)
		(vec-load-long 1 r2)
		((eval (sym (cat "vec-" _))) 1)
		(vec-store-long 1 r3)
		(vp-add-cr long_size r3)
		(vp-add-cr long_size r1)
		(vp-add-cr long_size r2)
	(loop-until '(r3 = r4))
	(exit 'points _ '(r0))
	(vp-ret))

(defun vecop2 (_)
	;trashes
	;r1-r8+
	(entry 'points _ '(r0 r1 r2))
	(vp-cpy-rr r0 r4)
	(class/array/get_both r0 r7 r8)
	(assign '((r1 array_begin) (r2 array_begin)) '(r5 r6))
	(vec-set 0)
	(loop-start)
		(vec-load-long 1 r5)
		(vec-load-long 1 r6)
		((eval (sym (cat "vec-" _))) 1)
		(vec-store-long 1 r7)
		(vp-add-cr long_size r7)
		(vp-add-cr long_size r5)
		(vp-add-cr long_size r6)
	(loop-until '(r7 = r8))
	(exit 'points _ '(r4))
	(vp-ret))

(defun vecop3 (_)
	;trashes
	;r1-r4+
	(entry 'points _ '(r0 r1))
	(class/array/get_both r0 r2 r3)
	(assign '((r1 array_begin)) '(r1))
	(vec-set 4)
	(loop-start)
		(vec-load-long 1 r1)
		((eval (sym (cat "vec-" _))) 1)
		(vec-store-long 1 r2)
		(vp-add-cr long_size r2)
		(vp-add-cr long_size r1)
	(loop-until '(r2 = r3))
	(exit 'points _ '(r0))
	(vp-ret))

(def-method 'points 'add)
	;inputs
	;r0 = points object (ptr)
	;r1 = source1 points object, can be same (ptr)
	;r2 = source2 points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r6

	(vecop1 'add)

(def-func-end)

(def-method 'points 'sub)
	;inputs
	;r0 = points object (ptr)
	;r1 = source1 points object, can be same (ptr)
	;r2 = source2 points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r6

	(vecop1 'sub)

(def-func-end)

(def-method 'points 'mul)
	;inputs
	;r0 = points object (ptr)
	;r1 = source1 points object, can be same (ptr)
	;r2 = source2 points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r6

	(vecop1 'mul)

(def-func-end)

(def-method 'points 'div)
	;inputs
	;r0 = points object (ptr)
	;r1 = source1 points object, can be same (ptr)
	;r2 = source2 points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r8

	(vecop2 'div)

(def-func-end)

(def-method 'points 'mod)
	;inputs
	;r0 = points object (ptr)
	;r1 = source1 points object, can be same (ptr)
	;r2 = source2 points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r8

	(vecop2 'mod)

(def-func-end)

(def-method 'points 'fmul)
	;inputs
	;r0 = points object (ptr)
	;r1 = source1 points object, can be same (ptr)
	;r2 = source2 points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r6

	(vecop1 'fmul)

(def-func-end)

(def-method 'points 'fdiv)
	;inputs
	;r0 = points object (ptr)
	;r1 = source1 points object, can be same (ptr)
	;r2 = source2 points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r8

	(vecop2 'fdiv)

(def-func-end)

(def-method 'points 'fmod)
	;inputs
	;r0 = points object (ptr)
	;r1 = source1 points object, can be same (ptr)
	;r2 = source2 points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r8

	(vecop2 'fmod)

(def-func-end)

(def-method 'points 'sum)
	;inputs
	;r0 = points object (ptr)
	;outputs
	;r0 = points object (ptr)
	;r1 = sum (long)
	;trashes
	;r1-r4

	(entry 'points 'sum '(r0))

	(call 'points 'get_both '(r0) '(r0 r1 r2))
	(vp-xor-rr r3 r3)
	(loop-while '(r1 /= r2))
		(assign '((r1 0)) '(r4))
		(vp-add-cr long_size r1)
		(vp-add-rr r4 r3)
	(loop-end)

	(exit 'points 'sum '(r0 r3))
	(vp-ret)

(def-func-end)

(def-method 'points 'fscale)
	;inputs
	;r0 = points object (ptr)
	;r1 = source points object, can be same (ptr)
	;r2 = scale (16.16)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r5

	(entry 'points 'fscale '(r0 r1 r2))

	(class/array/get_both r0 r3 r4)
	(assign '((r1 array_begin)) '(r1))
	(vec-set 5)
	(loop-start)
		(vec-load-long 1 r1)
		(vec-fmul 1 '(r2))
		(vec-store-long 1 r3)
		(vp-add-cr long_size r3)
		(vp-add-cr long_size r1)
	(loop-until '(r3 = r4))

	(exit 'points 'fscale '(r0))
	(vp-ret)

(def-func-end)

(def-method 'points 'abs)
	;inputs
	;r0 = points object (ptr)
	;r1 = source points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r4

	(vecop3 'abs)

(def-func-end)

(def-method 'points 'frac)
	;inputs
	;r0 = points object (ptr)
	;r1 = source points object, can be same (ptr)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;r1-r5

	(vecop3 'frac)

(def-func-end)
