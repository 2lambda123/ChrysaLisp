(include 'sys/func.inc)
(include 'gui/points/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(def-method 'points 'lisp_transform)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7)

	(push-scope)
	(entry 'points 'lisp_transform {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 8} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'transform {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	(call 'obj 'ref {arg0} {value})

	(exit 'points 'lisp_transform {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-transform dst src m1x m1y m2x m2y trx try)", error_msg_wrong_types, args})
	(signature 'sig 'points 'points 'num 'num 'num 'num 'num 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_simplify)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3)

	(push-scope)
	(entry 'points 'lisp_simplify {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 4} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'simplify {arg0, arg1, arg2, arg3})
	(call 'obj 'ref {arg0} {value})

	(exit 'points 'lisp_simplify {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-simplify dst src stack tol)", error_msg_wrong_types, args})
	(signature 'sig 'points 'points 'array 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_quadratic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7 'arg8)

	(push-scope)
	(entry 'points 'lisp_gen_quadratic {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 9} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'gen_quadratic {arg8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	(call 'obj 'ref {arg8} {value})

	(exit 'points 'lisp_gen_quadratic {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-gen-quadratic stack p1x p1y p2x p2y p3x p3y tol dst) -> dst", error_msg_wrong_types, args})
	(signature 'sig 'array 'num 'num 'num 'num 'num 'num 'num 'points))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_cubic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7 'arg8 'arg9 'arg10)

	(push-scope)
	(entry 'points 'lisp_gen_cubic {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 11} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'gen_cubic {arg10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9})
	(call 'obj 'ref {arg10} {value})

	(exit 'points 'lisp_gen_cubic {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-gen-cubic stack p1x p1y p2x p2y p3x p3y p4x p4y tol dst) -> dst", error_msg_wrong_types, args})
	(signature 'sig 'array 'num 'num 'num 'num 'num 'num 'num 'num 'num 'points))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_arc)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7)

	(push-scope)
	(entry 'points 'lisp_gen_arc {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 8} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'gen_arc {arg7, arg0, arg1, arg2, arg3, arg4, arg5, arg6})
	(call 'obj 'ref {arg7} {value})

	(exit 'points 'lisp_gen_arc {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-gen-arc stack cx cy start end radius tol dst) ->", error_msg_wrong_types, args})
	(signature 'sig 'array 'num 'num 'num 'num 'num 'num 'points))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_stroke_polylines)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7)

	(push-scope)
	(entry 'points 'lisp_stroke_polylines {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 8} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'stroke_polylines {arg7, arg0, arg6, arg1, arg2, arg3, arg4, arg5})
	(call 'obj 'ref {arg7} {value})

	(exit 'points 'lisp_stroke_polylines {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-stroke-polylines stack radius tol join cap1 cap2 src dst) -> dst", error_msg_wrong_types, args})
	(signature 'sig 'array 'num 'num 'num 'num 'num 'vector 'vector))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_stroke_polygons)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5)

	(push-scope)
	(entry 'points 'lisp_stroke_polygons {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 6} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'stroke_polygons {arg5, arg0, arg4, arg1, arg2, arg3})
	(call 'obj 'ref {arg5} {value})

	(exit 'points 'lisp_stroke_polygons {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-stroke-polygons stack radius tol join src dst) -> dst", error_msg_wrong_types, args})
	(signature 'sig 'array 'num 'num 'num 'vector 'vector))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_vecop1)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;r2 = points method (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = 0 if error, else value object (ptr)

	(ptr 'this 'args 'func)
	(ptr 'arg0 'arg1 'value)
	(uint 'length 'veclen)

	(push-scope)
	(entry 'points 'lisp_vecop1 {this, args, func})

	(call 'vector 'get_length {args} {_, length})
(errorcases
	(gotoif {length < 2} 'error1)
	(gotoif {length > 3} 'error1)
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'points 'vtable) {, 0}) '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'get_length {arg0} {_, veclen})
	(errorif {veclen == 0} 'error1)
	(errorif {veclen != arg1->array_length} 'error1)

	(vpif {length == 2})
		(call 'points 'create nil {value})
		(call 'points 'set_capacity {value, veclen})
		(call 'points 'set_length {value, veclen})
	(else)
		(errorif {veclen != value->array_length} 'error1)
		(call 'obj 'ref {value})
	(endif)
	(r-call 'points 'add {value, arg0, arg1, func})

	(exit 'points 'lisp_vecop1 {this, value})
	(return)

(vp-label 'error1)
	(exit 'points 'lisp_vecop1 {this, 0})
	(return)

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_vecop2)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;r2 = points method (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = 0 if error, else value object (ptr)

	(ptr 'this 'args 'func)
	(ptr 'arg0 'value)
	(uint 'length 'veclen)

	(push-scope)
	(entry 'points 'lisp_vecop2 {this, args, func})

	(call 'vector 'get_length {args} {_, length})
(errorcases
	(gotoif {length < 1} 'error1)
	(gotoif {length > 2} 'error1)
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'points 'vtable) {, 0}) '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'get_length {arg0} {_, veclen})
	(vpif {length == 1})
		(call 'points 'create nil {value})
		(call 'points 'set_capacity {value, veclen})
		(call 'points 'set_length {value, veclen})
	(else)
		(errorif {veclen != value->array_length} 'error1)
		(call 'obj 'ref {value})
	(endif)
	(r-call 'points 'abs {value, arg0, func})

	(exit 'points 'lisp_vecop1 {this, value})
	(return)

(vp-label 'error1)
	(exit 'points 'lisp_vecop1 {this, 0})
	(return)

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_add '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'add))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_add '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-add points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_sub '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'sub))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_sub '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-sub points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_mul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_mul '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'mul))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_mul '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-mul points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_div)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_div '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'div))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_div '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-div points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_mod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_mod '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'mod))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_mod '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-mod points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_fmul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_fmul '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'fmul))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_fmul '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-fmul points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_fdiv)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_fdiv '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'fdiv))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_fdiv '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-fdiv points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_fmod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_fmod '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'fmod))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_fmod '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-fmod points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_sum)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'value)
	(union
		'(ptr 'args)
		'(long 'length))

	(push-scope)
	(entry 'points 'lisp_sum {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'vector 'get_first {args} {_, value})
	(call 'points 'get_length {value} {_, length})
	(vpif {length})
		(call 'points 'sum {value} {_, length})
	(endif)
	(call 'num 'create {length} {value})

	(exit 'points 'lisp_sum {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-sum points)", error_msg_wrong_types, args})
	(signature 'sig 'points))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_fscale)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(ptr 'arg0 'arg1 'value)
	(uint 'length 'veclen)

	(push-scope)
	(entry 'points 'lisp_fscale {this, args})

	(call 'vector 'get_length {args} {_, length})
(errorcases
	(gotoif {length < 2} 'error1)
	(gotoif {length > 3} 'error1)
	(call 'lisp 'env_args_type {args, $sig, length} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'get_length {arg0} {_, veclen})
	(vpif {length == 2})
		(call 'points 'create nil {value})
		(call 'points 'set_capacity {value, veclen})
		(call 'points 'set_length {value, veclen})
	(else)
		(errorif {veclen != value->array_length} 'error1)
		(call 'obj 'ref {value})
	(endif)
	(call 'points 'fscale {value, arg0, arg1})

	(exit 'points 'lisp_fscale {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(points-fscale points scale [points])", error_msg_wrong_types, args})
	(signature 'sig 'points 'num 'points))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_abs)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_abs '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop2 `(r0 r1 (@ ,(f-path 'points 'abs))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_abs '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-abs points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_frac)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'points 'lisp_frac '(r0 r1))
	(vp-push r1)
	(call 'points 'lisp_vecop2 `(r0 r1 (@ ,(f-path 'points 'frac))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error1)
	(exit 'points 'lisp_frac '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(points-frac points [points])" error_msg_wrong_types r3)))

(def-func-end)
