(include 'sys/func.inc)
(include 'gui/points/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(def-method 'points 'lisp_transform)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_transform '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 8) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(defq in (method-input 'points 'transform))
	(class/vector/bind_args r7 in '(points points num num num num num num))
	(call 'points 'transform in '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'points 'lisp_transform '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(points-transform dst src m1x m1y m2x m2y trx try)" error_msg_wrong_types r7))
	(signature '(points points num num num num num num)))

(def-func-end)

(def-method 'points 'lisp_simplify)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_simplify '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 3) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r6 lisp_stack r2)
	(defq in (method-input 'points 'simplify))
	(class/vector/bind_args r7 (cat (slice 0 2 in) (slice 3 -1 in)) '(points points num))
	(call 'points 'simplify in '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'points 'lisp_simplify '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(points-simplify dst src tol)" error_msg_wrong_types r7))
	(signature '(points points num)))

(def-func-end)

(def-method 'points 'lisp_gen_quadratic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_gen_quadratic '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 8) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r6 lisp_stack r1)
	(defq in (method-input 'points 'gen_quadratic))
	(class/vector/bind_args r7 (cat (slice 2 -1 in) (slice 0 1 in))
		'(num num num num num num num points))
	(call 'points 'gen_quadratic in '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'points 'lisp_gen_quadratic '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(points-gen-quadratic p1x p1y p2x p2y p3x p3y tol dst) -> dst" error_msg_wrong_types r7))
	(signature '(num num num num num num num points)))

(def-func-end)

(def-method 'points 'lisp_gen_cubic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_gen_cubic '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 10) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r6 lisp_stack r1)
	(defq in (method-input 'points 'gen_cubic))
	(class/vector/bind_args r7 (cat (slice 2 -1 in) (slice 0 1 in))
		'(num num num num num num num num num points))
	(call 'points 'gen_cubic in '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'points 'lisp_gen_cubic '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(points-gen-cubic p1x p1y p2x p2y p3x p3y p4x p4y tol dst) -> dst" error_msg_wrong_types r7))
	(signature '(num num num num num num num num num points)))

(def-func-end)

(def-method 'points 'lisp_gen_arc)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_gen_arc '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 7) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r6 lisp_stack r1)
	(defq in (method-input 'points 'gen_arc))
	(class/vector/bind_args r7 (cat (slice 2 -1 in) (slice 0 1 in))
		'(num num num num num num points))
	(call 'points 'gen_arc in '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'points 'lisp_gen_arc '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(points-gen-arc cx cy start end radius tol dst) -> dst" error_msg_wrong_types r7))
	(signature '(num num num num num num points)))

(def-func-end)

(def-method 'points 'lisp_stroke_polylines)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_stroke_polylines '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 7) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r6 lisp_stack r1)
	(defq in (method-input 'points 'stroke_polylines))
	(class/vector/bind_args r7 (cat (slice 3 -1 in) (slice 2 3 in) (slice 0 1 in))
		'(num num num num num vector vector))
	(call 'points 'stroke_polylines in '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'points 'lisp_stroke_polylines '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(points-stroke-polylines radius tol join cap1 cap2 src dst) -> dst" error_msg_wrong_types r7))
	(signature '(num num num num num vector vector)))

(def-func-end)

(def-method 'points 'lisp_stroke_polygons)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_stroke_polygons '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 5) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-push r6)
	(vp-cpy-ir r6 lisp_stack r1)
	(defq in (method-input 'points 'stroke_polygons))
	(class/vector/bind_args r7 (cat (slice 3 -1 in) (slice 2 3 in) (slice 0 1 in))
		'(num num num vector vector))
	(call 'points 'stroke_polygons in '(r0))
	(call 'obj 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'points 'lisp_stroke_polygons '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(points-stroke-polygons radius tol join src dst) -> dst" error_msg_wrong_types r7))
	(signature '(num num num vector vector)))

(def-func-end)

(def-method 'points 'lisp_vecop1)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;r2 = points method (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = 0 if error, else value object (ptr)

	(entry 'points 'lisp_vecop1 '(r9 r10 r11))

	(class/array/get_length r10 r12)
(errorcases
	(gotoif '(r12 < 2) 'error)
	(gotoif '(r12 > 3) 'error)
	(call 'lisp 'env_args_type `(r10 (@ ,(f-path 'points 'vtable)) 0) '(r1))
	(gotoif '(r1 == 0) 'error))
	(class/array/get_begin r10 r1)
	(class/array/get_args r1 '(r6 r7))
	(class/array/get_length r6 r13)
(errorcases
	(gotoif '(r13 == 0) 'error)
	(class/array/get_length r7 r14)
	(gotoif '(r13 != r14) 'error))
	(vpif '(r12 == 2))
		(call 'points 'create nil '(r0))
		(call 'points 'set_capacity '(r0 r13) '(r0))
		(call 'points 'set_length '(r0 r13) '(r0 _))
	(else)
		(vp-cpy-ir r1 (mul ptr_size 2) r0)
	(errorcases
		(class/array/get_length r0 r14)
		(gotoif '(r13 != r14) 'error))
		(call 'obj 'ref '(r0) '(r0))
	(endif)
	(r-call 'points 'add '(r0 r6 r7 r11) '(r0))

	(exit 'points 'lisp_vecop1 '(r9 r0))
	(vp-ret)

(vp-label 'error)
	(exit 'points 'lisp_vecop1 '(r9 0))
	(vp-ret)

(def-func-end)

(def-method 'points 'lisp_vecop2)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;r2 = points method (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = 0 if error, else value object (ptr)

	(entry 'points 'lisp_vecop2 '(r9 r10 r11))

	(class/array/get_length r10 r12)
(errorcases
	(gotoif '(r12 < 1) 'error)
	(gotoif '(r12 > 2) 'error)
	(call 'lisp 'env_args_type `(r10 (@ ,(f-path 'points 'vtable)) 0) '(r1))
	(gotoif '(r1 == 0) 'error))
	(class/array/get_begin r10 r1)
	(vp-cpy-ir r1 0 r6)
	(class/array/get_length r6 r13)
(errorcases
	(gotoif '(r13 == 0) 'error))
	(vpif '(r12 == 1))
		(call 'points 'create nil '(r0))
		(call 'points 'set_capacity '(r0 r13) '(r0))
		(call 'points 'set_length '(r0 r13) '(r0 _))
	(else)
		(vp-cpy-ir r1 ptr_size r0)
	(errorcases
		(class/array/get_length r0 r14)
		(gotoif '(r13 != r14) 'error))
		(call 'obj 'ref '(r0) '(r0))
	(endif)
	(r-call 'points 'abs '(r0 r6 r11) '(r0))

	(exit 'points 'lisp_vecop2 '(r9 r0))
	(vp-ret)

(vp-label 'error)
	(exit 'points 'lisp_vecop2 '(r9 0))
	(vp-ret)

(def-func-end)

(def-method 'points 'lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_add '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'add))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_add '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-add points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_sub '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'sub))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_sub '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-sub points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_mul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_mul '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'mul))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_mul '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-mul points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_div)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_div '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'div))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_div '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-div points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_mod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_mod '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'mod))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_mod '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-mod points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_fmul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_fmul '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'fmul))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_fmul '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-fmul points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_fdiv)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_fdiv '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'fdiv))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_fdiv '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-fdiv points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_fmod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_fmod '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'points 'fmod))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_fmod '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-fmod points points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_sum)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_sum '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1) '(r1))
	(gotoif '(r1 == 0) 'error))

	(class/array/bind_args r7 '(r0))
	(call 'points 'sum '(r0) '(_ r0))
	(call 'num 'create '(r0) '(r0))

	(exit 'points 'lisp_sum '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(points-sum points)" error_msg_wrong_types r7))
	(signature '(points)))

(def-func-end)

(def-method 'points 'lisp_fscale)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_fscale '(r9 r10))

	(class/array/get_length r10 r12)
(errorcases
	(gotoif '(r12 < 2) 'error)
	(gotoif '(r12 > 3) 'error)
	(call 'lisp 'env_args_type `(r10 ($ sig) r12) '(r1))
	(gotoif '(r1 == 0) 'error))
	(class/array/get_begin r10 r1)
	(class/array/get_args r1 '(r6 r7))
	(class/array/get_length r6 r13)
(errorcases
	(gotoif '(r13 == 0) 'error))
	(vpif '(r12 == 2))
		(call 'points 'create nil '(r0))
		(call 'points 'set_capacity '(r0 r13) '(r0))
		(call 'points 'set_length '(r0 r13) '(r0 _))
	(else)
		(vp-cpy-ir r1 (mul ptr_size 2) r0)
	(errorcases
		(class/array/get_length r0 r14)
		(gotoif '(r13 != r14) 'error))
		(call 'obj 'ref '(r0) '(r0))
	(endif)
	(call 'points 'fscale '(r0 r6 (r7 num_value)) '(r0))

	(exit 'points 'lisp_fscale '(r9 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r9 "(points-fscale points scale [points])" error_msg_wrong_types r10))
	(signature '(points num points)))

(def-func-end)

(def-method 'points 'lisp_abs)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_abs '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop2 `(r0 r1 (@ ,(f-path 'points 'abs))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_abs '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-abs points [points])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'points 'lisp_frac)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'points 'lisp_frac '(r0 r1))

	(vp-push r1)
	(call 'points 'lisp_vecop2 `(r0 r1 (@ ,(f-path 'points 'frac))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 == 0) 'error)

	(exit 'points 'lisp_frac '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(points-frac points [points])" error_msg_wrong_types r3)))

(def-func-end)
