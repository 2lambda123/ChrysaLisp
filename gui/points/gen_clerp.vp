(include 'sys/func.inc)
(include 'gui/points/class.inc)
(include 'sys/math/class.inc)

(def-method 'points 'gen_clerp)
	;inputs
	;r0 = points object (ptr)
	;r1 = stack array object (ptr)
	;r2 = cx (16.16)
	;r3 = cy (16.16)
	;r4 = v1x (16.16)
	;r5 = v1y (16.16)
	;r6 = v2x (16.16)
	;r7 = v2y (16.16)
	;r8 = radius (16.16)
	;r9 = tolerance (16.16)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'stack)
	(pulong 'iter_end)
	(union
		'(ulong 'v1 'v2 'bv)
		'(int 'v1x 'v1y 'v2x 'v2y 'bvx 'bvy))
	(int 'cx 'cy 'radius 'eps)
	(uint 'start 'length)

	(push-scope)
	(entry 'points 'gen_clerp {this, stack, cx, cy, v1x, v1y, v2x, v2y, radius, eps})

	(vec-set 0)

	;output first point
	(vec-load 2 {cx, cy} {v1x, v1y})
	(vec-add 2)
	(vec-store 2 {bvx, bvy})
	(call 'points 'push_back2 {this, bvx, bvy})

	(d-call 'array 'get_length {stack} {_, start})
	(loop-start)
		;calculate the mid-point
		(vec-load 2 {v1x, v1y} {v2x, v2y})
		(vec-add 2)
		(vec-asr 2 1)
		(vec-tee 2 {bvx, bvy})
		(vec-load 1 {radius})
		(vec-scale 2)
		(vec-load 2 {bvx, bvy})
		(vec-flength 2)
		(vec-load 1 {1})
		(vec-max 2)
		(vec-dup 1)
		(vec-div 2)
		(vec-store 2 {bvx, bvy})

		;flatness test
		(vec-load 1 {v1x} {v2x})
		(vec-add 1)
		(vec-load 1 {bvx})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {v1y} {v2y})
		(vec-add 1)
		(vec-load 1 {bvy})
		(vec-dup 1)
		(vec-dif 3)
		(vec-abs 2)
		(vec-sum 2)

		(vec-load 1 {eps})
		(bind '(d e) (vec-pop 2))
		(vpif `(,d <= ,e))
			;output point
			(vec-load 2 {bvx, bvy} {cx, cy})
			(vec-add 2)
			(vec-store 2 {bvx, bvy})
			(call 'points 'push_back2 {this, bvx, bvy})
		(else)
			;continue subdivision
			(d-call 'array 'get_length {stack} {_, length})
			(call 'array 'set_capacity {stack, length + 4})
			(call 'array 'get_end {stack} {_, iter_end})
			(call 'array 'set_length {stack, length + 4})
			(vec-load 5 {bv, v2, v1, bv, iter_end})
			(bind '(p) (vec-pop 1))
			(vec-store-long 4 p)
		(endif)

		(d-call 'array 'get_length {stack} {_, length})
		(breakif {length == start})
		(call 'array 'set_length {stack, length - 2})
		(call 'array 'get_end {stack} {_, iter_end})
		(vec-load 1 {iter_end})
		(bind '(p) (vec-top 1))
		(vec-load-long 2 p)
		(vec-store 2 {v1, v2})
		(vec-pop 1)
	(loop-end)

	;output last point
	(vec-load 2 {cx, cy} {v2x, v2y})
	(vec-add 2)
	(vec-store 2 {bvx, bvy})
	(call 'points 'push_back2 {this, bvx, bvy})

	(exit 'points 'gen_clerp {this})
	(pop-scope)
	(return)

(def-func-end)
