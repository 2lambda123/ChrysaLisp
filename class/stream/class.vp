(include 'sys/func.inc)
(include 'sys/string/class.inc)
(include 'class/vector/class.inc)
(include 'class/string/class.inc)
(include 'class/stream/class.inc)
(include 'class/stream_str/class.inc)

(gen-create 'stream)
(gen-vtable 'stream)

(def-method 'stream 'init)
	;inputs
	;r0 = stream object (ptr)
	;r1 = vtable (pptr)
	;r2 = buffer object, 0 if none (ptr)
	;r3 = buffer data, 0 if none (ptr)
	;r4 = buffer start (pubyte)
	;r5 = buffer length (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(entry 'stream 'init '(r0 r1 r2 r3 r4 r5))

	;init parent
	(vp-add-rr r4 r5)
	(assign '(r2 r3 r4 r5) '((r0 stream_object) (r0 stream_buffer) (r0 stream_bufp) (r0 stream_bufe)))
	(s-call 'stream 'init '(r0 r1) '(r0 r1))

	(exit 'stream 'init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'stream 'deinit)
	;inputs
	;r0 = stream object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'deinit '(r0))

	;deref any buffer object
	(vp-push r0)
	(call 'obj 'deref_if '((r0 stream_object)))

	;free any buffer
	(vp-cpy-ir rsp 0 r0)
	(call 'sys_mem 'free '((r0 stream_buffer)))
	(vp-pop r0)

	;parent deinit
	(s-jump 'stream 'deinit '(r0))

(def-func-end)

(def-method 'stream 'read)
	;inputs
	;r0 = stream object (ptr)
	;r1 = buffer (pubyte)
	;r2 = buffer length (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 for EOF, else bytes read (int)
	;trashes
	;all but r0

	(ptr 'this)
	(pubyte 'buffer 'buffer_end 'start)
	(int 'char)

	;save inputs
	(push-scope)
	(entry 'stream 'read {this, buffer, buffer_end})

	(vpifnot {buffer_end})
		(assign {this, 0} '(r0 r1))
		(return)
	(endif)

	(assign {buffer, buffer + buffer_end} {start, buffer_end})
	(loop-start)
		(call 'stream 'read_char {this} {_, char})
		(breakif {char < 0})
		(assign {char} {*buffer})
	(loop-until {(buffer + 1 => buffer) == buffer_end})

	(vpif {buffer != start})
		(assign {this, buffer - start} '(r0 r1))
	(else)
		(assign {this, char} '(r0 r1))
	(endif)

	(pop-scope)
	(return)

(def-func-end)

(def-method 'stream 'read_char)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 for EOF, else char read (int)
	;trashes
	;all but r0

	(entry 'stream 'read_char '(r0))

	(vp-cpy-ir r0 stream_bufp r2)
	(vp-cpy-ir r0 stream_bufe r1)
	(vpif '(r1 == r2))
		(loop-start)
			(call 'stream 'read_next '(r0) '(r0 r1))
			(gotoif '(r1 == -1) 'eof)
			(vp-cpy-ir r0 stream_bufp r2)
			(vp-cpy-ir r0 stream_bufe r1)
		(loop-until '(r1 != r2))
	(endif)
	(vp-cpy-ir-ub r2 0 r1)
	(vp-add-cr byte_size r2)
	(vp-cpy-ri r2 r0 stream_bufp)

(vp-label 'eof)
	(exit 'stream 'read_char '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'stream 'read_line)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;r1 = 0 for EOF, else string object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'str_stream 'value)
	(int 'char)

	(push-scope)
	(entry 'stream 'read_line {this})

	(switch)
		(vp-def (r_this r_bufp r_bufe r_char r_bufps))
		(assign {this} (list r_this))
		(vp-cpy-ir r_this stream_bufp r_bufp)
		(vp-cpy-ir r_this stream_bufe r_bufe)
		(vp-cpy-rr r_bufp r_bufps)
		(loop-start)
			(gotoif (list r_bufp '== r_bufe) 'slow_but_sure)
			(vp-cpy-ir-ub r_bufp 0 r_char)
			(vp-add-cr byte_size r_bufp)
		(loop-until (list r_char '== char_lf))
		(vp-cpy-ri r_bufp r_this stream_bufp)
		(vp-sub-rr r_bufps r_bufp)
		(vp-sub-cr byte_size r_bufp)
		(call 'string 'create_from_buffer (list r_bufps r_bufp) {value})
		(break)
	(default)
	(vp-label 'slow_but_sure)
		(call 'stream 'read_char {this} {_, char})
		(assign {0} {value})
		(breakif {char == -1})
		(call 'string 'create_from_buffer {0, string_gap} {value})
		(call 'stream_str 'create {value} {str_stream})
		(loop-whilenot {char == char_lf || char == -1})
			(call 'stream 'write_char {str_stream, char})
			(call 'stream 'read_char {this} {_, char})
		(loop-end)
		(call 'stream_str 'ref_string {str_stream} {_, value})
		(call 'obj 'deref {str_stream})
	(endswitch)

	(exit 'stream 'read_line {this, value})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'stream 'read_next)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 for EOF, else more data
	;trashes
	;all but r0

	(entry 'stream 'read_next '(r0))
	(exit 'stream 'read_next '(r0 -1))
	(vp-ret)

(def-func-end)

(def-method 'stream 'read_ready)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;r1 = 0 if data not available
	;trashes
	;all but r0

	(entry 'stream 'read_ready '(r0))

	(call 'stream 'available '(r0) '(r0 r1))

	(exit 'stream 'read_ready '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'stream 'skip)
	;inputs
	;r0 = stream object (ptr)
	;r1 = char to skip (uint)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'skip '(r0 r1))

	(vp-cpy-ir r0 stream_bufp r2)
	(vp-cpy-ir r0 stream_bufe r3)
	(loop-start)
		(loop-while '(r2 == r3))
			(vp-push r1)
			(vp-cpy-ri r2 r0 stream_bufp)
			(call 'stream 'read_next '(r0) '(r0 r4))
			(vp-pop r1)
			(gotoif '(r4 == -1) 'funcexit)
			(vp-cpy-ir r0 stream_bufp r2)
			(vp-cpy-ir r0 stream_bufe r3)
		(loop-end)
		(vp-cpy-ir-ub r2 0 r4)
		(breakif '(r4 != r1))
		(vp-add-cr byte_size r2)
	(loop-end)
	(vp-cpy-ri r2 r0 stream_bufp)

(vp-label 'funcexit)
	(exit 'stream 'skip '(r0))
	(vp-ret)

(def-func-end)

(def-method 'stream 'skip_not)
	;inputs
	;r0 = stream object (ptr)
	;r1 = char to not skip (uint)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'skip_not '(r0 r1))

	(vp-cpy-ir r0 stream_bufp r2)
	(vp-cpy-ir r0 stream_bufe r3)
	(loop-start)
		(loop-while '(r2 == r3))
			(vp-push r1)
			(vp-cpy-ri r2 r0 stream_bufp)
			(call 'stream 'read_next '(r0) '(r0 r4))
			(vp-pop r1)
			(gotoif '(r4 == -1) 'funcexit)
			(vp-cpy-ir r0 stream_bufp r2)
			(vp-cpy-ir r0 stream_bufe r3)
		(loop-end)
		(vp-cpy-ir-ub r2 0 r4)
		(breakif '(r4 == r1))
		(vp-add-cr byte_size r2)
	(loop-end)
	(vp-cpy-ri r2 r0 stream_bufp)

(vp-label 'funcexit)
	(exit 'stream 'skip_not '(r0))
	(vp-ret)

(def-func-end)

(def-method 'stream 'split)
	;inputs
	;r0 = stream object (ptr)
	;r1 = split char (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = split strings vector object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'splits 'string)
	(pubyte 'start)
	(ulong 'length)
	(int 'char)

	;save inputs
	(push-scope)
	(entry 'stream 'split {this, char})

	;create output vector
	(call 'vector 'create nil {splits})

	;fill vector with splits
	(loop-start)
		(call 'stream 'skip {this, char})
		(assign {this->stream_bufp} {start})
		(call 'stream 'skip_not {this, char})
		(assign {this->stream_bufp - start} {length})
		(breakifnot {length})
		(call 'string 'create_from_buffer {start, length} {string})
		(call 'vector 'push_back {splits, string})
	(loop-end)

	(exit 'stream 'split {this, splits})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'stream 'write)
	;inputs
	;r0 = stream object (ptr)
	;r1 = buffer (pubyte)
	;r2 = buffer length (uint)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'write '(r0 r1 r2))

	;check if 1 char
	(vpif '(r2 == 1))
		(jump 'stream 'write_char '(r0 (r1 0 ub)))
	(endif)

	(assign '(r0 r1 r2) '(r5 r0 r4))

	(vp-cpy-ir r5 stream_bufp r1)
	(vp-cpy-ir r5 stream_bufe r2)
	(loop-while '(r4 != 0) 'exit)
		(vpif '(r2 != r1))
			(vp-sub-rr r1 r2)
			(vpif '(r2 > r4))
				(vp-cpy-rr r4 r2)
			(endif)
			(vp-sub-rr r2 r4)
			(call 'sys_mem 'copy '(r0 r1 r2) '(r0 r1))
			(vp-cpy-ri r1 r5 stream_bufp)
			(vp-cpy-ir r5 stream_bufe r2)
		(else)
			(vp-push r0 r4)
			(call 'stream 'write_next '(r5) '(r5))
			(vp-pop r0 r4)
			(vp-cpy-ir r5 stream_bufp r1)
			(vp-cpy-ir r5 stream_bufe r2)
			(breakif '(r2 == r1) 'exit)
		(endif)
	(loop-end)

	(exit 'stream 'write '(r5))
	(vp-ret)

(def-func-end)

(def-method 'stream 'write_char)
	;inputs
	;r0 = stream object (ptr)
	;r1 = char (uint)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'write_char '(r0 r1))

	(vp-cpy-ir r0 stream_bufp r2)
	(vp-cpy-ir r0 stream_bufe r3)
	(vpif '(r2 == r3))
		(vp-push r1)
		(call 'stream 'write_next '(r0) '(r0))
		(vp-pop r1)
		(vp-cpy-ir r0 stream_bufp r2)
		(vp-cpy-ir r0 stream_bufe r3)
		(gotoif '(r2 == r3) 'eof)
	(endif)
	(vp-cpy-ri-b r1 r2 0)
	(vp-add-cr byte_size r2)
	(vp-cpy-ri r2 r0 stream_bufp)

(vp-label 'eof)
	(exit 'stream 'write_char '(r0))
	(vp-ret)

(def-func-end)

(def-method 'stream 'write_cstr)
	;inputs
	;r0 = stream object (ptr)
	;r1 = buffer (pubyte)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'write_cstr '(r3 r1))

	(call 'sys_string 'length '(r1) '(r0 r1))
	(jump 'stream 'write '(r3 r0 r1))

(def-func-end)

(def-method 'stream 'write_flush)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'write_flush '(r0))

	(class/stream/write_flush)

	(exit 'stream 'write_flush '(r0))
	(vp-ret)

(def-func-end)

(def-method 'stream 'read_bits)
	;inputs
	;r0 = stream object (ptr)
	;r1 = num bits (uint)
	;r2 = bit pool (ulong)
	;r3 = bit pool size (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 if eof, else data (long)
	;r2 = bit pool (ulong)
	;r3 = bit pool size (uint)
	;trashes
	;all but r0

	(vp-def (r_this r_num_bits r_bit_pool r_bit_pool_size r_data))

	(entry 'stream 'read_bits (list r_this r_num_bits r_bit_pool r_bit_pool_size))

	;fill bit pool with data
	(loop-while (list r_num_bits '> r_bit_pool_size))
		(vp-push r_num_bits r_bit_pool r_bit_pool_size)
		(call 'stream 'read_char (list r_this) (list r_this r_data))
		(vp-pop r_num_bits r_bit_pool r_bit_pool_size)
		(gotoif (list r_data '== -1) 'eof)
		(vp-shl-rr r_bit_pool_size r_data)
		(vp-add-cr 8 r_bit_pool_size)
		(vp-add-rr r_data r_bit_pool)
	(loop-end)

	;extact bits from bit pool
	(vp-cpy-cr -1 r_data)
	(vp-shl-rr r_num_bits r_data)
	(vp-xor-cr -1 r_data)
	(vp-and-rr r_bit_pool r_data)
	(vp-shr-rr r_num_bits r_bit_pool)
	(vp-sub-rr r_num_bits r_bit_pool_size)

	(exit 'stream 'read_bits (list r_this r_data r_bit_pool r_bit_pool_size))
	(vp-ret)

(vp-label 'eof)
	(exit 'stream 'read_bits (list r_this -1 0 0))
	(vp-ret)

(def-func-end)
