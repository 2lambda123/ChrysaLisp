(include 'sys/func.inc)
(include 'sys/str/class.inc)
(include 'class/str/class.inc)
(include 'class/stream/class.inc)
(include 'class/stream_str/class.inc)
(include 'class/slave/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(def-method 'stream 'lisp_filestream)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'lisp_filestream '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-cpy-rr r0 r8)
	(class/vector/bind_args r1 '(r5) '(str))
	(switch 'exit)
		(switch)
		(call 'sys_str 'compare '(r5 "stdin") '(r0))
		(vp-cpy-ir r8 lisp_stdin r1)
		(breakif '(r0 == 0))
		(call 'sys_str 'compare '(r5 "stdout") '(r0))
		(vp-cpy-ir r8 lisp_stdout r1)
		(breakif '(r0 == 0))
		(call 'sys_str 'compare '(r5 "stderr") '(r0))
		(vp-cpy-ir r8 lisp_stderr r1)
		(breakif '(r0 == 0))
		(default)
			(call 'str 'create_from_file '(r5) '(r0))
			(vp-cpy-ir r8 lisp_sym_nil r1)
			(breakif '(r0 == 0))
			(call 'stream_str 'create '(r0) '(r1))
			(break 'exit)
		(endswitch)
		(class/obj/ref r1 r2)
	(endswitch)

	(exit 'stream 'lisp_filestream '(r8 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(file-stream path)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'stream 'lisp_strstream)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'lisp_strstream '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream_str 'create))
	(class/vector/bind_args r1 in '(obj))
	(class/obj/ref (elem 0 in))
	(call 'stream_str 'create in '(r1))
	(vp-pop r0)

	(exit 'stream 'lisp_strstream '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(string-stream str)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'stream 'lisp_available)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'lisp_available '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream 'available))
	(class/vector/bind_args r1 in '(stream))
	(call 'stream 'available in '(_ r1))
	(call 'num 'create '(r1) '(r1))
	(vp-pop r0)

	(exit 'stream 'lisp_available '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(stream-avail stream)" error_msg_wrong_types r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream 'lisp_readchar)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'value)
	(pptr 'iter_begin)
	(pubyte 'chars)
	(int 'length)
	(uint 'width)

	(push-scope)
	(entry 'stream 'lisp_readchar {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length == 1 || length == 2} 'error1)
	(call 'vector 'get_begin {args} {_, iter_begin})

(errorcases
	(call 'obj 'inst_of (cat {iter_begin[0], @} (f-path 'stream 'vtable)))
	(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))

	(assign {length, 1} '(r0 r1))
	(vpif '(r0 == 2))
		(assign {iter_begin[ptr_size]} '(r0))
	(errorcases
		(assign `((@ ,(f-path 'num 'vtable)) (r0 obj_vtable)) '(r1 r2))
		(gotoif '(r1 != r2) 'error3))
		(class/num/get_value r0 r1)
		(vp-sub-cr 1 r1)
		(vp-and-cr 7 r1)
		(vp-add-cr 1 r1)
	(endif)
	(assign '(r1) {width})

	(call 'num 'create '(0) {value})
	(assign {&value->num_value} '(r0))
	(loop-start 'exit)
		(assign '(r0) {chars})
		(call 'stream_str 'read_char {iter_begin[0]} '(_ r1))
		(vpif '(r1 == -1))
			(call 'obj 'deref {value})
			(call 'obj 'ref {this->lisp_sym_nil} {value})
			(break 'exit)
		(endif)
		(assign {chars, width} '(r0 r2))
		(vp-cpy-ri-b r1 r0 0)
		(vp-add-cr 1 r0)
		(vp-sub-cr 1 r2)
		(assign '(r2) {width})
	(loop-until '(r2 == 0))

	(exit 'stream 'lisp_readchar {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(read-char stream [width])", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(read-char stream [width])", error_msg_not_a_stream, args})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(read-char stream [width])", error_msg_not_a_number, args}))

	(pop-scope-syms)

(def-func-end)

(def-method 'stream 'lisp_readline)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'lisp_readline '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream 'read_line))
	(class/vector/bind_args r7 in '(stream))
	(call 'stream 'read_line in '(_ r1))
	(vp-pop r0)
	(vpif '(r1 == 0))
		(vp-cpy-ir r0 lisp_sym_nil r1)
		(class/obj/ref r1 r2)
	(endif)

	(exit 'stream 'lisp_readline '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(read-line stream)" error_msg_wrong_types r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream 'lisp_write)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'lisp_write '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream 'write))
	(class/array/bind_args r1 (slice 0 2 in))
	(vp-push (elem 1 in))
	(class/str/get_length (elem 1 in) (elem 2 in))
	(class/vector/cast_args in '(stream str _))
	(call 'stream_str 'write in)
	(vp-pop r1)
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'stream 'lisp_write '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(write stream str)" error_msg_wrong_types r1))
	(signature '(stream str)))

(def-func-end)

(def-method 'stream 'lisp_writechar)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'value 'stream)
	(pptr 'iter_begin 'iter_end)
	(ulong 'length)
	(uint 'width)

	(push-scope)
	(entry 'stream 'lisp_writechar {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length == 2 || length == 3} 'error1)
	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0]} {stream})

(errorcases
	(call 'obj 'inst_of (cat {stream, @} (f-path 'stream 'vtable)))
	(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))

	(assign {length, 1} '(r0 r1))
	(vpif '(r0 == 3))
		(assign {iter_begin[ptr_size * 2]} '(r0))
	(errorcases
		(assign `((@ ,(f-path 'num 'vtable)) (r0 obj_vtable)) '(r1 r2))
		(gotoif '(r1 != r2) 'error3))
		(class/num/get_value r0 r1)
		(vp-sub-cr 1 r1)
		(vp-and-cr 7 r1)
		(vp-add-cr 1 r1)
	(endif)
	(assign '(r1) {width})

	(assign {iter_begin[ptr_size]} {value})
	(vpif (cat {value->obj_vtable == @} (f-path 'vector 'vtable)))
		(call 'vector 'get_both {value} {_, iter_begin, iter_end})
		(errorif {iter_begin == iter_end} 'error1)
		(loop-start)
			(assign {stream, *iter_begin, width} '(r0 r1 r2))
		(errorcases
			(assign `((@ ,(f-path 'num 'vtable)) (r1 obj_vtable)) '(r3 r4))
			(gotoif '(r3 != r4) 'error3))
			(call 'stream_str 'write '(r0 (& r1 num_value) r2))
		(loop-until {(iter_begin + ptr_size => iter_begin) == iter_end})
	(else)
		(errorif (cat {value->obj_vtable != @} (f-path 'num 'vtable)) 'error3)
		(call 'num 'get_value {value} {_, length})
		(call 'stream_str 'write {stream, &length, width})
	(endif)
	(call 'obj 'ref {value})

	(exit 'stream 'lisp_writechar {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(write-char stream list|num [width])", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(write-char stream list|num [width])", error_msg_not_a_stream, args})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(write-char stream list|num [width])", error_msg_not_a_number, args}))

	(pop-scope-syms)

(def-func-end)

(def-method 'stream 'lisp_write_flush)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'stream 'lisp_write_flush '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream 'write_flush))
	(class/array/bind_args r1 in)
	(call 'stream 'write_flush in '(r1))
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'stream 'lisp_write_flush '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(stream-write-flush stream)" error_msg_wrong_types r1))
	(signature '(stream)))

(def-func-end)
