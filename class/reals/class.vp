(include "sys/func.inc")
(include "sys/math/class.inc")
(include "class/reals/class.inc")

(gen-create 'reals)
(gen-vtable 'reals)

(defun addop (_ p)
	;trashes
	;:r1-:r14
	(vp-def (dst src1 src2 dst1 src_end))
	(entry 'reals _ `(,dst ,src1 ,src2))
	(class/array/get_both src1 src1 src_end)
	(assign `((,dst array_begin) (,src2 array_begin)) `(,dst1 ,src2))
	(loop-start)
		(eval p)
		(vp-add-cr +long_size dst1)
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
	(loop-until (list src1 '= src_end))
	(exit 'reals _ `(,dst -1))
	(vp-ret))

(defun absop (_ p)
	;trashes
	;:r1-:r14
	(vp-def (dst src1 dst1 src_end))
	(entry 'reals _ `(,dst ,src1))
	(class/array/get_both src1 src1 src_end)
	(assign `((,dst array_begin)) `(,dst1))
	(loop-start)
		(eval p)
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size dst1)
	(loop-until (list src1 '= src_end))
	(exit 'reals _ `(,dst))
	(vp-ret))

(def-method 'reals :add)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(addop :add
		'(call 'sys_math :r_add `((,src1 0) (,src2 0)) `((,dst1 0))))

(def-func-end)

(def-method 'reals :sub)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(addop :sub
		'(call 'sys_math :r_sub `((,src1 0) (,src2 0)) `((,dst1 0))))

(def-func-end)

(def-method 'reals :min)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(addop :min
		'(progn
			(call 'sys_math :r_sub `((,src1 0) (,src2 0)) '(:r13))
			(vpif '(:r13 < 0))
				(assign `((,src1 0)) '(:r13))
			(else)
				(assign `((,src2 0)) '(:r13))
			(endif)
			(assign '(:r13) `((,dst1 0)))))

(def-func-end)

(def-method 'reals :max)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(addop :max
		'(progn
			(call 'sys_math :r_sub `((,src1 0) (,src2 0)) '(:r13))
			(vpif '(:r13 > 0))
				(assign `((,src1 0)) '(:r13))
			(else)
				(assign `((,src2 0)) '(:r13))
			(endif)
			(assign '(:r13) `((,dst1 0)))))

(def-func-end)

(def-method 'reals :mul)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(addop :mul
		'(call 'sys_math :r_mul `((,src1 0) (,src2 0)) `((,dst1 0))))

(def-func-end)

(defun divop (_ p)
	;trashes
	;:r1-:r14
	(vp-def (dst src1 src2 dst1 src_end))
	(entry 'reals _ `(,dst ,src1 ,src2))
	(class/array/get_both src1 src1 src_end)
	(assign `((,dst array_begin) (,src2 array_begin)) `(,dst1 ,src2))
	(loop-start)
		(eval p)
		(vp-add-cr +long_size dst1)
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
	(loop-until (list src1 '= src_end))
	(exit 'reals _ `(,dst -1))
	(vp-ret)
(errorcases
(vp-label 'error)
	(exit 'reals _ `(,dst 0))
	(vp-ret)))

(def-method 'reals :div)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(defq in (method-input 'sys_math :r_div))
	(divop :div
		'(progn
			(assign `((,src1 0) (,src2 0)) in)
			(errorif (list (elem 1 in) '= 0) 'error)
			(call 'sys_math :r_div in `((,dst1 0)))))

(def-func-end)

(def-method 'reals :mod)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(defq in (method-input 'sys_math :r_mod))
	(divop :mod
		'(progn
			(assign `((,src1 0) (,src2 0)) in)
			(errorif (list (elem 1 in) '= 0) 'error)
			(call 'sys_math :r_mod in `((,dst1 0)))))

(def-func-end)

(def-method 'reals :frac)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(absop :frac
		'(call 'sys_math :r_frac `((,src1 0)) `((,dst1 0))))

(def-func-end)

(def-method 'reals :floor)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(absop :floor
		'(call 'sys_math :r_floor `((,src1 0)) `((,dst1 0))))

(def-func-end)

(def-method 'reals :abs)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(absop :abs
		'(progn
 			(defq in (method-input 'sys_math :r_sub 1))
			(vp-cpy-ir src1 0 in)
 			(vpif (list in '< 0))
				(call 'sys_math :r_sub `(0 ,in) `(,in))
			(endif)
			(vp-cpy-ri in dst1 0)))

(def-func-end)

(def-method 'reals :scale)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source reals object, can be same (ptr)
	;:r2 = scale (real)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (dst src scale dst1 src_end))

	(entry 'reals :scale `(,dst ,src ,scale))

	(class/array/get_both src src src_end)
	(assign `((,dst array_begin)) `(,dst1))
	(loop-start)
		(call 'sys_math :r_mul `((,src 0) ,scale) `((,dst1 0)))
		(vp-add-cr +long_size src)
		(vp-add-cr +long_size dst1)
	(loop-until (list src '= src_end))

	(exit 'reals :scale `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'reals :sum)
	;inputs
	;:r0 = reals object (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = sum (real)
	;trashes
	;:r1-:r14

	(vp-def (sum dst dst1 src_end)
		(list (method-input 'sys_math :r_add 0)))

	(entry 'reals :sum `(,dst))

	(call 'reals :get_both `(,dst) `(,dst ,dst1 ,src_end))
	(vp-xor-rr sum sum)
	(loop-while (list dst1 '/= src_end))
		(call 'sys_math :r_add `(,sum (,dst1 0)) `(,sum))
		(vp-add-cr +long_size dst1)
	(loop-end)

	(exit 'reals :sum `(,dst ,sum))
	(vp-ret)

(def-func-end)

(def-method 'reals :dot)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = dot product (real)
	;trashes
	;:r1-:r14

	(vp-def (val1 val2 this sum src2 src1 src_end) '(:r13 :r14))

	(entry 'reals :dot `(,this :r1))

	(class/array/get_both this src1 src_end)
	(assign '((:r1 array_begin) 0) `(,src2 ,sum))
	(vpif (list src1 '/= src_end))
		(assign `((,src1 0) (,src2 0)) `(,val1 ,val2))
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
		(call 'sys_math :r_mul `(,val1 ,val2) `(,sum))
		(loop-while (list src1 '/= src_end))
			(assign `((,src1 0) (,src2 0)) `(,val1 ,val2))
			(vp-add-cr +long_size src1)
			(vp-add-cr +long_size src2)
			(call 'sys_math :r_mul `(,val1 ,val2) `(,val1))
			(call 'sys_math :r_add `(,val1 ,sum) `(,sum))
		(loop-end)
	(endif)

	(exit 'reals :dot `(,this ,sum))
	(vp-ret)

(def-func-end)
