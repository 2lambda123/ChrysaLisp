(include 'sys/func.inc)
(include 'class/nums/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(def-method 'nums 'lisp_vecop1)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;r2 = nums method (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = 0 if error, else value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_vecop1 '(r9 r10 r11))

	(assign '((r10 array_length)) '(r12))
(errorcases
	(gotoif '(r12 > 3) 'error)
	(call 'lisp 'env_args_type `(r10 (@ ,(f-path 'nums 'vtable)) 2) '(r2))
	(gotoif '(r2 = 0) 'error))
	(assign '((r10 array_begin)) '(r1))
	(class/array/get_args r1 '(r6 r7))
	(assign '((r6 array_length)) '(r13))
(errorcases
	(gotoif '(r13 = 0) 'error)
	(assign '((r7 array_length)) '(r14))
	(gotoif '(r13 /= r14) 'error))
	(vpif '(r12 = 2))
		(call 'nums 'create nil '(r0))
		(call 'nums 'set_capacity '(r0 r13) '(r0))
		(call 'nums 'set_length '(r0 r13) '(r0 _))
	(else)
		(vp-cpy-ir r1 (* ptr_size 2) r0)
	(errorcases
		(assign '((r0 array_length)) '(r14))
		(gotoif '(r13 /= r14) 'error))
		(call 'obj 'ref '(r0) '(r0))
	(endif)
	(r-call 'nums 'add '(r0 r6 r7 r11) '(r0))

	(exit 'nums 'lisp_vecop1 '(r9 r0))
	(vp-ret)

(vp-label 'error)
	(exit 'nums 'lisp_vecop1 '(r9 0))
	(vp-ret)

(def-func-end)

(def-method 'nums 'lisp_vecop2)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;r2 = nums method (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = 0 if error, else value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_vecop2 '(r9 r10 r11))

	(assign '((r10 array_length)) '(r12))
(errorcases
	(gotoif '(r12 > 2) 'error)
	(call 'lisp 'env_args_type `(r10 (@ ,(f-path 'nums 'vtable)) 1) '(r2))
	(gotoif '(r2 = 0) 'error))
	(assign '((r10 array_begin) (r1 0)) '(r1 r6))
	(assign '((r6 array_length)) '(r13))
(errorcases
	(gotoif '(r13 = 0) 'error))
	(vpif '(r12 = 1))
		(call 'nums 'create nil '(r0))
		(call 'nums 'set_capacity '(r0 r13) '(r0))
		(call 'nums 'set_length '(r0 r13) '(r0 _))
	(else)
		(assign '((r1 ptr_size)) '(r0))
	(errorcases
		(assign '((r0 array_length)) '(r14))
		(gotoif '(r13 /= r14) 'error))
		(call 'obj 'ref '(r0) '(r0))
	(endif)
	(r-call 'nums 'abs '(r0 r6 r11) '(r0))

	(exit 'nums 'lisp_vecop2 '(r9 r0))
	(vp-ret)

(vp-label 'error)
	(exit 'nums 'lisp_vecop2 '(r9 0))
	(vp-ret)

(def-func-end)

(def-method 'nums 'lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_add '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'nums 'add))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_add '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-add nums nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_sub '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'nums 'sub))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_sub '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-sub nums nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_mul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_mul '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'nums 'mul))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_mul '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-mul nums nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_div)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_div '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'nums 'div))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_div '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-div nums nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_mod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_mod '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'nums 'mod))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_mod '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-mod nums nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_fmul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_fmul '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'nums 'fmul))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_fmul '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-fmul nums nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_fdiv)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_fdiv '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'nums 'fdiv))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_fdiv '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-fdiv nums nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_fmod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_fmod '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop1 `(r0 r1 (@ ,(f-path 'nums 'fmod))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_fmod '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-fmod nums nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_sum)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_sum '(r0 r1))

(errorcases
	(call 'lisp 'env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(class/array/bind_args r1 '(r0))
	(call 'nums 'sum '(r0) '(_ r0))
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0)

	(exit 'nums 'lisp_sum '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-sum nums)" error_msg_wrong_types r1))
	(signature '(nums)))

(def-func-end)

(def-method 'nums 'lisp_fscale)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_fscale '(r9 r10))

	(assign '((r10 array_length)) '(r12))
(errorcases
	(gotoif '(r12 < 2) 'error)
	(gotoif '(r12 > 3) 'error)
	(call 'lisp 'env_args_sig `(r10 ($ sig) r12) '(r2))
	(gotoif '(r2 = 0) 'error))
	(assign '((r10 array_begin)) '(r1))
	(class/array/get_args r1 '(r6 r7))
	(assign '((r6 array_length)) '(r13))
(errorcases
	(gotoif '(r13 = 0) 'error))
	(vpif '(r12 = 2))
		(call 'nums 'create nil '(r0))
		(call 'nums 'set_capacity '(r0 r13) '(r0))
		(call 'nums 'set_length '(r0 r13) '(r0 _))
	(else)
		(vp-cpy-ir r1 (* ptr_size 2) r0)
	(errorcases
		(assign '((r0 array_length)) '(r14))
		(gotoif '(r13 /= r14) 'error))
		(call 'obj 'ref '(r0) '(r0))
	(endif)
	(call 'nums 'fscale '(r0 r6 (r7 num_value)) '(r0))

	(exit 'nums 'lisp_fscale '(r9 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r9 "(nums-fscale nums scale [nums])" error_msg_wrong_types r10))
	(signature '(nums num nums)))

(def-func-end)

(def-method 'nums 'lisp_abs)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_abs '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop2 `(r0 r1 (@ ,(f-path 'nums 'abs))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_abs '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-abs nums [nums])" error_msg_wrong_types r3)))

(def-func-end)

(def-method 'nums 'lisp_frac)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'nums 'lisp_frac '(r0 r1))

	(vp-push r1)
	(call 'nums 'lisp_vecop2 `(r0 r1 (@ ,(f-path 'nums 'frac))) '(r0 r1))
	(vp-pop r3)
	(errorif '(r1 = 0) 'error)

	(exit 'nums 'lisp_frac '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(nums-frac nums [nums])" error_msg_wrong_types r3)))

(def-func-end)
