(include "sys/func.inc")
(include "class/nums/class.inc")
(include "sys/math/class.inc")

(gen-create 'nums)
(gen-vtable 'nums)

(defun addop (_)
	;trashes
	;r1-r6+
	(vp-def (dst src1 src2 dst1 src_end))
	(entry 'nums _ `(,dst ,src1 ,src2))
	(class/array/get_both src1 src1 src_end)
	(assign `((,dst array_begin) (,src2 array_begin)) `(,dst1 ,src2))
	(vec-set 5)
	(loop-start)
		(vec-load-long 1 src1)
		(vec-load-long 1 src2)
		((eval (sym (cat "vec-" (slice 1 -1 _)))) 1)
		(vec-store-long 1 dst1)
		(vp-add-cr +long_size dst1)
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
	(loop-until (list src1 '= src_end))
	(exit 'nums _ `(,dst -1))
	(vp-ret))

(defun divop (_)
	;trashes
	;r1-r8+
	(vp-def (s1 s2 dst src1 src2 dst1 src_end) '(r1 r2 r4 r5 r6 r7 r8))
	(entry 'nums _ `(,dst ,s1 ,s2))
	(class/array/get_both s1 src1 src_end)
	(assign `((,dst array_begin) (,s2 array_begin)) `(,dst1 ,src2))
	(vec-set 0)
	(loop-start)
		(vec-load-long 1 src1)
		(vec-load-long 1 src2)
		(errorif (list (elem 0 (vec-top 1)) '= 0) 'error)
		((eval (sym (cat "vec-" (slice 1 -1 _)))) 1)
		(vec-store-long 1 dst1)
		(vp-add-cr +long_size dst1)
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
	(loop-until (list src1 '= src_end))
	(exit 'nums _ `(,dst -1))
	(vp-ret)
(errorcases
(vp-label 'error)
	(exit 'nums _ `(,dst 0))
	(vp-ret)))

(defun absop (_)
	;trashes
	;r1-r4+
	(vp-def (dst src dst1 src_end))
	(entry 'nums _ `(,dst ,src))
	(class/array/get_both src src src_end)
	(assign `((,dst array_begin)) `(,dst1))
	(vec-set 4)
	(loop-start)
		(vec-load-long 1 src)
		((eval (sym (cat "vec-" (slice 1 -1 _)))) 1)
		(vec-store-long 1 dst1)
		(vp-add-cr +long_size src)
		(vp-add-cr +long_size dst1)
	(loop-until (list src '= src_end))
	(exit 'nums _ `(,dst))
	(vp-ret))

(def-method 'nums :add)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source1 nums object, can be same (ptr)
	;r2 = source2 nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r6

	(addop :add)

(def-func-end)

(def-method 'nums :sub)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source1 nums object, can be same (ptr)
	;r2 = source2 nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r6

	(addop :sub)

(def-func-end)

(def-method 'nums :min)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source1 nums object, can be same (ptr)
	;r2 = source2 nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r6

	(addop :min)

(def-func-end)

(def-method 'nums :max)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source1 nums object, can be same (ptr)
	;r2 = source2 nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r6

	(addop :max)

(def-func-end)

(def-method 'nums :mul)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source1 nums object, can be same (ptr)
	;r2 = source2 nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r6

	(addop :mul)

(def-func-end)

(def-method 'nums :div)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source1 nums object, can be same (ptr)
	;r2 = source2 nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r8

	(divop :div)

(def-func-end)

(def-method 'nums :mod)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source1 nums object, can be same (ptr)
	;r2 = source2 nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r8

	(divop :mod)

(def-func-end)

(def-method 'nums :abs)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r4

	(absop :abs)

(def-func-end)

(def-method 'nums :sum)
	;inputs
	;r0 = nums object (ptr)
	;outputs
	;r0 = nums object (ptr)
	;r1 = sum (long)
	;trashes
	;r1-r4

	(vp-def (dst dst1 src_end sum val))

	(entry 'nums :sum `(,dst))

	(call 'nums :get_both `(,dst) `(,dst ,dst1 ,src_end))
	(vp-xor-rr sum sum)
	(loop-while (list dst1 '/= src_end))
		(assign `((,dst1 0)) `(,val))
		(vp-add-cr +long_size dst1)
		(vp-add-rr val sum)
	(loop-end)

	(exit 'nums :sum `(,dst ,sum))
	(vp-ret)

(def-func-end)

(def-method 'nums :scale)
	;inputs
	;r0 = nums object (ptr)
	;r1 = source nums object, can be same (ptr)
	;r2 = scale (int)
	;outputs
	;r0 = nums object (ptr)
	;trashes
	;r1-r5

	(vp-def (dst src scale dst1 src_end))

	(entry 'nums :scale `(,dst ,src ,scale))

	(class/array/get_both src src src_end)
	(assign `((,dst array_begin)) `(,dst1))
	(vec-set 5)
	(loop-start)
		(vec-load-long 1 src)
		(vec-mul 1 `(,scale))
		(vec-store-long 1 dst1)
		(vp-add-cr +long_size src)
		(vp-add-cr +long_size dst1)
	(loop-until (list src '= src_end))

	(exit 'nums :scale `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'nums :dot)
	;inputs
	;r0 = nums object (ptr)
	;r1 = nums object, can be same (ptr)
	;outputs
	;r0 = nums object (ptr)
	;r1 = dot product (long)
	;trashes
	;r1-r6

	(vp-def (this sum src2 src1 src_end val1 val2))

	(entry 'nums :dot `(,this r1))

	(class/array/get_both this src1 src_end)
	(assign '((r1 array_begin)) `(,src2))
	(vp-xor-rr sum sum)
	(loop-while (list src1 '/= src_end))
		(assign `((,src1 0) (,src2 0)) `(,val1 ,val2))
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
		(vp-mul-rr val1 val2)
		(vp-add-rr val2 sum)
	(loop-end)

	(exit 'nums :dot `(,this ,sum))
	(vp-ret)

(def-func-end)

(def-method 'nums :hash)
	;inputs
	;r0 = nums object (ptr)
	;outputs
	;r0 = nums object (ptr)
	;r1 = hash code (long)
	;trashes
	;r1-r4

	(vp-def (dst dst1 src_end hcode val))

	(entry 'nums :hash `(,dst))

	(call 'nums :get_both `(,dst) `(,dst ,dst1 ,src_end))
	(vp-xor-rr hcode hcode)
	(loop-while (list dst1 '/= src_end))
		(assign `((,dst1 0)) `(,val))
		(vp-add-cr +long_size dst1)
		(vp-xor-rr val hcode)
	(loop-end)
	(vpif (list hcode '< 0))
		(vp-mul-cr -1 hcode)
	(endif)

	(exit 'nums :hash `(,dst ,hcode))
	(vp-ret)

(def-func-end)
