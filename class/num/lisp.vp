(include 'sys/func.inc)
(include 'sys/math/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(defun addop (_ p)
	(entry 'num _ '(r6 r7))
(errorcases
	(call 'lisp 'env_args_type `(r7 (@ ,(f-path 'num 'vtable)) -2) '(r1))
	(gotoif '(r1 == 0) 'error))
	(call 'vector 'get_iters '(r7) '(_ r1 r2))
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(vp-cpy-ir r0 num_value r0)
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(vp-cpy-ir r3 num_value r3)
		(exec p)
	(loop-until '(r1 == r2))
	(call 'num 'create '(r0) '(r0))
	(exit 'num _ '(r6 r0))
	(vp-ret))

(def-method 'num 'lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(addop 'lisp_add
		'(vp-add-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(add num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(addop 'lisp_sub
		'(vp-sub-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(sub num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_mul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(addop 'lisp_mul
		'(vp-mul-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(mul num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_min)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(addop 'lisp_min
		'(progn
			(vpif '(r3 < r0))
				(vp-cpy-rr r3 r0)
			(endif)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(min num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_max)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(addop 'lisp_max
		'(progn
			(vpif '(r3 > r0))
				(vp-cpy-rr r3 r0)
			(endif)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(max num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_fmul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(addop 'lisp_fmul
		'(progn
			(vp-mul-rr r3 r0)
			(vp-asr-cr fp_shift r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(fmul num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(defun andop (_ i p)
	(entry 'num _ '(r6 r7))
(errorcases
	(call 'lisp 'env_args_type `(r7 (@ ,(f-path 'num 'vtable)) 0) '(r1))
	(gotoif '(r1 == 0) 'error))
	(call 'vector 'get_iters '(r7) '(_ r1 r2))
	(vp-cpy-cr i r0)
	(vpif '(r1 != r2))
		(loop-start)
			(vp-cpy-ir r1 0 r3)
			(vp-add-cr ptr_size r1)
			(vp-cpy-ir r3 num_value r3)
			(exec p)
		(loop-until '(r1 == r2))
	(endif)
	(call 'num 'create '(r0) '(r0))
	(exit 'num _ '(r6 r0))
	(vp-ret))

(def-method 'num 'lisp_band)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(andop 'lisp_band -1
		'(vp-and-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(logand [num] ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_bor)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(andop 'lisp_bor 0
		'(vp-or-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(logior [num] ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_bxor)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(andop 'lisp_bxor 0
		'(vp-xor-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(logxor [num] ...)" error_msg_wrong_types r7)))

(def-func-end)

(defun divop (_ p)
	(entry 'num _ '(r6 r7))
(errorcases
	(call 'lisp 'env_args_type `(r7 (@ ,(f-path 'num 'vtable)) -2) '(r1))
	(gotoif '(r1 == 0) 'error))
	(call 'vector 'get_iters '(r7) '(_ r1 r4))
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(vp-cpy-ir r0 num_value r0)
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(vp-cpy-ir r3 num_value r3)
	(errorcases
		(gotoif '(r3 == 0) 'error))
		(exec p)
	(loop-until '(r1 == r4))
	(call 'num 'create '(r0) '(r0))
	(exit 'num _ '(r6 r0))
	(vp-ret))

(def-method 'num 'lisp_div)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(divop 'lisp_div
		'(progn
			(vp-ext-rr r0 r2)
			(vp-div-rrr r3 r2 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(div num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_mod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(divop 'lisp_mod
		'(progn
			(vp-ext-rr r0 r2)
			(vp-div-rrr r3 r2 r0)
			(vp-cpy-rr r2 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(mod num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_fdiv)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(divop 'lisp_fdiv
		'(progn
			(vp-shl-cr fp_shift r0)
			(vp-ext-rr r0 r2)
			(vp-div-rrr r3 r2 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(fdiv num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_fmod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'num 'lisp_fmod '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type `(r7 (@ ,(f-path 'num 'vtable)) -2) '(r1))
	(gotoif '(r1 == 0) 'error))

	(call 'vector 'get_iters '(r7) '(_ r4 r5))
	(vp-cpy-ir r4 0 r0)
	(vp-add-cr ptr_size r4)
	(vp-cpy-ir r0 num_value r0)
	(loop-start)
		(vp-cpy-ir r4 0 r1)
		(vp-add-cr ptr_size r4)
		(vp-cpy-ir r1 num_value r1)
	(errorcases
		(gotoif '(r1 == 0) 'error))
		(vec-set 2)
		(vec-fmod 1)
	(loop-until '(r4 == r5))
	(call 'num 'create '(r0) '(r0))
	(exit 'num 'lisp_fmod '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(fmod num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(defun shift (_ p)
	(entry 'num _ '(r6 r7))
(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2) '(r1))
	(gotoif '(r1 == 0) 'error))
	(vp-cpy-ir r7 array_array r1)
	(vp-cpy-ir r1 0 r0)
	(vp-cpy-ir r1 ptr_size r1)
	(vp-cpy-ir r0 num_value r0)
	(vp-cpy-ir r1 num_value r1)
	(exec p)
	(call 'num 'create '(r0) '(r0))
	(exit 'num _ '(r6 r0))
	(vp-ret))

(def-method 'num 'lisp_basr)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(shift 'lisp_basr
		'(vp-asr-rr r1 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(asr num cnt)" error_msg_wrong_types r7))
	(signature 'sig 'num 'num))

(def-func-end)

(def-method 'num 'lisp_bshl)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(shift 'lisp_bshl
		'(vp-shl-rr r1 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(shl num cnt)" error_msg_wrong_types r7))
	(signature 'sig 'num 'num))

(def-func-end)

(def-method 'num 'lisp_bshr)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(shift 'lisp_bshr
		'(vp-shr-rr r1 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(shr num cnt)" error_msg_wrong_types r7))
	(signature 'sig 'num 'num))

(def-func-end)

(defun compare (_ p)
	(entry 'num _ '(r6 r7))
(errorcases
	(call 'lisp 'env_args_type `(r7 (@ ,(f-path 'num 'vtable)) -2) '(r1))
	(gotoif '(r1 == 0) 'error))
	(call 'vector 'get_iters '(r7) '(_ r1 r2))
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(vp-cpy-ir r0 num_value r0)
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(vp-cpy-ir r3 num_value r3)
		(exec p)
	(loop-until '(r1 == r2))
	(call 'obj 'ref '((r6 lisp_sym_t)) '(r0))
	(exit 'num _ '(r6 r0))
	(vp-ret)
(vp-label 'fail)
	(call 'obj 'ref '((r6 lisp_sym_nil)) '(r0))
	(exit 'num _ '(r6 r0))
	(vp-ret))

(def-method 'num 'lisp_eq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(compare 'lisp_eq
		'(gotoif '(r3 != r0) 'fail))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(eq num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_ge)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(compare 'lisp_ge
		'(progn
			(gotoif '(r3 > r0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(ge num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_gt)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(compare 'lisp_gt
		'(progn
			(gotoif '(r3 >= r0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(gt num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_le)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(compare 'lisp_le
		'(progn
			(gotoif '(r3 < r0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(le num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_lt)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(compare 'lisp_lt
		'(progn
			(gotoif '(r3 <= r0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(lt num num ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'num 'lisp_ne)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'num 'lisp_ne '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type `(r7 (@ ,(f-path 'num 'vtable)) -2) '(r1))
	(gotoif '(r1 == 0) 'error))

	(call 'vector 'get_iters '(r7) '(_ r1 r2))
	(vp-lea-i r2 (neg ptr_size) r5)
	(loop-start)
		(vp-cpy-ir r1 0 r0)
		(vp-add-cr ptr_size r1)
		(vp-cpy-rr r1 r4)
		(vp-cpy-ir r0 num_value r0)
		(loop-start)
			(vp-cpy-ir r4 0 r3)
			(vp-add-cr ptr_size r4)
			(vp-cpy-ir r3 num_value r3)
			(gotoif '(r3 == r0) 'fail)
		(loop-until '(r4 == r2))
	(loop-until '(r1 == r5))

	(call 'obj 'ref '((r6 lisp_sym_t)) '(r0))
	(exit 'num 'lisp_ne '(r6 r0))
	(vp-ret)

(vp-label 'fail)
	(call 'obj 'ref '((r6 lisp_sym_nil)) '(r0))
	(exit 'num 'lisp_ne '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(ne num num ...)" error_msg_wrong_types r7)))

(def-func-end)
