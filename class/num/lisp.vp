(include 'sys/func.inc)
(include 'sys/math/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(defun addop (_ p)
	(entry 'num _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type3 `(r1 (@ ,(f-path 'num 'vtable)) 2) '(r2))
	(gotoif '(r2 = 0) 'error))
	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(assign '((r3 num_value)) '(r3))
		(exec p)
	(loop-until '(r1 = r2))
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0)
	(exit 'num _ '(r0 r1))
	(vp-ret))

(def-method 'num 'lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_add
		'(vp-add-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(+ num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_sub
		'(vp-sub-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(- num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_mul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_mul
		'(vp-mul-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(* num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_min)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_min
		'(progn
			(vpif '(r3 < r0))
				(vp-cpy-rr r3 r0)
			(endif)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(min num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_max)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_max
		'(progn
			(vpif '(r3 > r0))
				(vp-cpy-rr r3 r0)
			(endif)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(max num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_fmul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_fmul
		'(progn
			(vp-mul-rr r3 r0)
			(vp-asr-cr fp_shift r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(fmul num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(defun andop (_ i p)
	(entry 'num _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type3 `(r1 (@ ,(f-path 'num 'vtable)) 0) '(r2))
	(gotoif '(r2 = 0) 'error))
	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-cpy-cr i r0)
	(vpif '(r1 /= r2))
		(loop-start)
			(vp-cpy-ir r1 0 r3)
			(vp-add-cr ptr_size r1)
			(assign '((r3 num_value)) '(r3))
			(exec p)
		(loop-until '(r1 = r2))
	(endif)
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0)
	(exit 'num _ '(r0 r1))
	(vp-ret))

(def-method 'num 'lisp_and)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(andop 'lisp_and -1
		'(vp-and-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(logand [num] ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_or)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(andop 'lisp_or 0
		'(vp-or-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(logior [num] ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_xor)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(andop 'lisp_xor 0
		'(vp-xor-rr r3 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(logxor [num] ...)" error_msg_wrong_types r1)))

(def-func-end)

(defun divop (_ p)
	(entry 'num _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type3 `(r1 (@ ,(f-path 'num 'vtable)) 2) '(r2))
	(gotoif '(r2 = 0) 'error1))
	(vp-push r0 r1)
	(class/array/get_both r1 r1 r4)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(assign '((r3 num_value)) '(r3))
	(errorcases
		(gotoif '(r3 = 0) 'error))
		(exec p)
	(loop-until '(r1 = r4))
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0 r2)
	(exit 'num _ '(r0 r1))
	(vp-ret))

(def-method 'num 'lisp_div)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(divop 'lisp_div
		'(progn
			(vp-ext-rr r0 r2)
			(vp-div-rrr r3 r2 r0)))

(errorcases
(vp-label 'error)
	(vp-pop r0 r1)
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(/ num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_mod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(divop 'lisp_mod
		'(progn
			(vp-ext-rr r0 r2)
			(vp-div-rrr r3 r2 r0)
			(vp-cpy-rr r2 r0)))

(errorcases
(vp-label 'error)
	(vp-pop r0 r1)
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(% num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_fdiv)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(divop 'lisp_fdiv
		'(progn
			(vp-shl-cr fp_shift r0)
			(vp-ext-rr r0 r2)
			(vp-div-rrr r3 r2 r0)))

(errorcases
(vp-label 'error)
	(vp-pop r0 r1)
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(fdiv num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_fmod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'num 'lisp_fmod '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type2 `(r1 (@ ,(f-path 'num 'vtable)) 2) '(r2))
	(gotoif '(r2 = 0) 'error1))

	(vp-push r0 r1)
	(class/array/get_both r1 r4 r5)
	(vp-cpy-ir r4 0 r0)
	(vp-add-cr ptr_size r4)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r4 0 r1)
		(vp-add-cr ptr_size r4)
		(assign '((r1 num_value)) '(r1))
	(errorcases
		(gotoif '(r1 = 0) 'error))
		(vec-set 2)
		(vec-fmod 1)
	(loop-until '(r4 = r5))
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0 r2)
	(exit 'num 'lisp_fmod '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(vp-pop r0 r1)
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(fmod num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(defun shift (_ p)
	(entry 'num _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type1 '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))
	(vp-push r0)
	(class/vector/bind_args r1 '(r0 r1) '(num num))
	(exec p)
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0)
	(exit 'num _ '(r0 r1))
	(vp-ret))

(def-method 'num 'lisp_asr)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(shift 'lisp_asr
		'(vp-asr-rr r1 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(>>> num cnt)" error_msg_wrong_types r7))
	(signature '(num num)))

(def-func-end)

(def-method 'num 'lisp_shl)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(shift 'lisp_shl
		'(vp-shl-rr r1 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(<< num cnt)" error_msg_wrong_types r7))
	(signature '(num num)))

(def-func-end)

(def-method 'num 'lisp_shr)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(shift 'lisp_shr
		'(vp-shr-rr r1 r0))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(>> num cnt)" error_msg_wrong_types r7))
	(signature '(num num)))

(def-func-end)

(defun compare (_ p)
	(entry 'num _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type2 `(r1 (@ ,(f-path 'num 'vtable)) 2) '(r2))
	(gotoif '(r2 = 0) 'error))
	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(assign '((r3 num_value)) '(r3))
		(exec p)
	(loop-until '(r1 = r2))
	(vp-pop r0)
	(assign '((r0 lisp_sym_t)) '(r1))
	(class/obj/ref r1 r2)
	(exit 'num _ '(r0 r1))
	(vp-ret)
(vp-label 'fail)
	(vp-pop r0)
	(assign '((r0 lisp_sym_nil)) '(r1))
	(class/obj/ref r1 r2)
	(exit 'num _ '(r0 r1))
	(vp-ret))

(def-method 'num 'lisp_eq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_eq
		'(gotoif '(r3 /= r0) 'fail))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(= num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_ge)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_ge
		'(progn
			(gotoif '(r3 > r0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(>= num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_gt)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_gt
		'(progn
			(gotoif '(r3 >= r0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(> num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_le)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_le
		'(progn
			(gotoif '(r3 < r0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(<= num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_lt)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_lt
		'(progn
			(gotoif '(r3 <= r0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(< num num ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'num 'lisp_ne)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'num 'lisp_ne '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type2 `(r1 (@ ,(f-path 'num 'vtable)) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-lea-i r2 (neg ptr_size) r5)
	(loop-start)
		(vp-cpy-ir r1 0 r0)
		(vp-add-cr ptr_size r1)
		(assign '((r0 num_value) r1) '(r0 r4))
		(loop-start)
			(vp-cpy-ir r4 0 r3)
			(vp-add-cr ptr_size r4)
			(assign '((r3 num_value)) '(r3))
			(gotoif '(r3 = r0) 'fail)
		(loop-until '(r4 = r2))
	(loop-until '(r1 = r5))

	(vp-pop r0)
	(assign '((r0 lisp_sym_t)) '(r1))
	(class/obj/ref r1 r2)
	(exit 'num 'lisp_ne '(r0 r1))
	(vp-ret)

(vp-label 'fail)
	(vp-pop r0)
	(assign '((r0 lisp_sym_nil)) '(r1))
	(class/obj/ref r1 r2)
	(exit 'num 'lisp_ne '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(/= num num ...)" error_msg_wrong_types r1)))

(def-func-end)

;generic fixed math op
(defun mathop (_ p)
	(entry 'num _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type1 '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))
	(vp-push r0)
	(class/vector/bind_args r1 '(r0) '(num))
	(exec p)
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0)
	(exit 'num _ '(r0 r1))
	(vp-ret))

(def-method 'num 'lisp_fsin)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_fsin
		'(call 'sys_math 'f_sin '(r0) '(r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(fsin angle)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'num 'lisp_fcos)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_fcos
		'(call 'sys_math 'f_cos '(r0) '(r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(fcos angle)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'num 'lisp_fsqrt)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_fsqrt
		'(progn
			(errorif '(r0 < 0) 'error)
			(call 'sys_math 'f_sqrt '(r0) '(r0))))

(errorcases
(vp-label 'error)
	(vp-pop r0)
	(jump 'lisp 'repl_error '(r0 "(fsqrt num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'num 'lisp_frac)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_frac
		'(progn
			(vec-set 1)
			(vec-frac 1)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(frac num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'num 'lisp_floor)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_floor
		'(progn
			(vec-set 1)
			(vec-floor 1)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(floor num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'num 'lisp_random)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_random
		'(call 'sys_math 'i_rand '(r0) '(r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(random num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)
