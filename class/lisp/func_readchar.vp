(include 'sys/func.inc)
(include 'class/stream_str/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_readchar)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(pptr 'iter_begin)
	(pubyte 'chars)
	(int 'length)
	(uint 'width)

	(push-scope)
	(entry 'lisp 'func_readchar {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length == 1 || length == 2} 'error1)
	(call 'vector 'get_begin {args} {_, iter_begin})

(errorcases
	(call 'obj 'inst_of (cat {iter_begin[0], @} (f-path 'stream 'vtable)))
	(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))

	(assign {1} {width})
	(vpif {length == 2})
		(assign {iter_begin[ptr_size]} {value})
		(errorif (cat {value->obj_vtable != @} (f-path 'integer 'vtable)) 'error3)
		(call 'integer 'get_value {value} {_, width})
		(assign {((width - 1) & 7) + 1} {width})
	(endif)

	(call 'integer 'create {0} {value})
	(assign {&value->integer_value} {chars})
	(loop-start)
		(call 'stream_str 'read_char {iter_begin[0]} {_, length})
		(vpif {length == -1})
			(call 'obj 'deref {value})
			(call 'obj 'ref {this->lisp_sym_nil} {value})
			(break)
		(endif)
		(assign {length} {*chars})
		(assign {chars + 1} {chars})
	(loop-untilnot {width - 1 => width})

	(exit 'lisp 'func_readchar {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(read-char stream [width])", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(chain 'lisp 'repl_error {this, "(read-char stream [width])", error_msg_not_a_stream, args})
(vp-label 'error3)
	(chain 'lisp 'repl_error {this, "(read-char stream [width])", error_msg_not_a_number, args}))

	(pop-scope-syms)

(def-func-end)
