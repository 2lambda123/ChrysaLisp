(include 'sys/func.inc)
(include 'class/integer/class.inc)
(include 'class/symbol/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_type)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)

	(push-scope)
	(entry 'lisp 'func_type {this, args})

(errorcases
	(d-call 'vector 'get_length {args} '(_ r1))
	(errorif '(r1 != 1) 'error1))

	(vp-def (value obj vtable))
	(call 'vector 'get_first {args} (list '_ obj))
	(vp-cpy-ir obj obj_vtable obj)
	(switch 'done)
		(fn-bind (f-path 'vector 'vtable) vtable)
		(vpif (list obj '== vtable))
			(vp-cpy-cr lisp_type_list value)
			(break 'done)
		(endif)
		(fn-bind (f-path 'integer 'vtable) vtable)
		(vpif (list obj '== vtable))
			(vp-cpy-cr lisp_type_integer value)
			(break 'done)
		(endif)
		(fn-bind (f-path 'symbol 'vtable) vtable)
		(vpif (list obj '== vtable))
			(vp-cpy-cr lisp_type_symbol value)
			(break 'done)
		(endif)
		(fn-bind (f-path 'string 'vtable) vtable)
		(vpif (list obj '== vtable))
			(vp-cpy-cr lisp_type_string value)
			(break 'done)
		(endif)
		(vp-cpy-cr 0 value)
	(endswitch)
	(call 'integer 'create (list value) {args})

(vp-label 'funcexit)
	(exit 'lisp 'func_type {this, args})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(type? obj)", error_msg_wrong_num_of_args, args} {_, args})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
