(include 'sys/func.inc)
(include 'class/stream/class.inc)
(include 'class/lisp/class.inc)
(include 'class/str/class.inc)

(def-method 'lisp 'read)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = next char (uint)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = form object (ptr)
	;r2 = next char (uint)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(union
			'(ptr 'stream)
			'(int 'char))
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'lisp 'read '(r0 r1 r2))
	(assign '(r0 r1) '((rsp local_this) (rsp local_stream)))

	;skip white space
(vp-label 'skip_white)
	(loop-start)
		(breakif '(r2 > char_space))
		(breakif '(r2 = -1))
		(call 'lisp 'read_char '(r0 r1 r2) '(r0 r2))
		(vp-cpy-ir rsp local_stream r1)
	(loop-end)

	;what are we reading ?
	(switch)
	(vpcase '(r2 = -1))
		(vp-cpy-ir r0 lisp_sym_nil r1)
		(class/obj/ref r1 r3)
		(break)
	(vpcase '(r2 = char_lrb))
		(call 'lisp 'read_list '(r0 r1 r2) '(r0 r1 r2))
		(break)
	(vpcase '(r2 >= char_0) '(r2 <= char_9))
		(call 'lisp 'read_num '(r0 r1 r2) '(r0 r1 r2))
		(break)
	(vpcase '(r2 = char_minus))
		(call 'lisp 'read_num '(r0 r1 r2) '(r0 r1 r2))
		(break)
	(vpcase '(r2 = char_double_quote))
		(call 'lisp 'read_str '(r0 r1 r2) '(r0 r1 r2))
		(break)
	(vpcase '(r2 = char_lcb))
		(call 'lisp 'read_str '(r0 r1 char_rcb) '(r0 r1 r2))
		(break)
	(vpcase '(r2 = char_quote))
		(call 'lisp 'read_rmacro '(r0 r1 r2 (r0 lisp_sym_quote)) '(r0 r1 r2))
		(break)
	(vpcase '(r2 = char_tick))
		(call 'lisp 'read_rmacro '(r0 r1 r2 (r0 lisp_sym_qquote)) '(r0 r1 r2))
		(break)
	(vpcase '(r2 = char_comma))
		(call 'lisp 'read_rmacro '(r0 r1 r2 (r0 lisp_sym_unquote)) '(r0 r1 r2))
		(break)
	(vpcase '(r2 = char_tilda))
		(call 'lisp 'read_rmacro '(r0 r1 r2 (r0 lisp_sym_splicing)) '(r0 r1 r2))
		(break)
	(vpcase '(r2 = char_semi))
		(call 'stream 'skip_not '(r1 char_lf) '(r0))
		(call 'stream 'read_char '(r0) '(r1 r2))
		(vp-cpy-ir rsp local_this r0)
		(goto 'skip_white)
	(vpcase '(r2 = char_rrb))
		(call 'stream 'read_char '(r1) '(_ (rsp local_char i)))
		(vp-cpy-ir rsp local_this r0)
		(call 'lisp 'repl_error '(r0 "unexpected )" 0 (r0 lisp_sym_nil)) '(r0 r1))
		(vp-cpy-ir-i rsp local_char r2)
		(break)
	(vpcase '(r2 = char_rcb))
		(call 'stream 'read_char '(r1) '(_ (rsp local_char i)))
		(vp-cpy-ir rsp local_this r0)
		(call 'lisp 'repl_error '(r0 "unexpected }" 0 (r0 lisp_sym_nil)) '(r0 r1))
		(vp-cpy-ir-i rsp local_char r2)
		(break)
	(default)
		(call 'lisp 'read_sym '(r0 r1 r2) '(r0 r1 r2))
	(endswitch)

	(exit 'lisp 'read '(r0 r1 r2))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
