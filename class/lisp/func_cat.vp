(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'gui/points/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_cat)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(uint 'length)

	(vp-def (r_value r_iter_begin r_iter_end r_args r_elem r_length) '(r12 r13 r14 r6))

	(push-scope)
	(entry 'lisp 'func_cat {this, args})

	(d-call 'vector 'get_length {args} (list r_args r_length))
	(errorif (list r_length '== 0) 'error)
	(assign (list r_length) {length})

	(call 'vector 'get_iters (list r_args) (list '_ r_iter_begin r_iter_end))
	(call 'lisp 'env_args_type (list r_args `(@ ,(f-path 'string 'vtable)) -1))
	(vpif (list (method-output 'lisp 'env_args_type 0) '!= 0))
		(assign {length} (list r_length))
		(vpif (list r_length '== 2))
			(call 'string 'append `((,r_iter_begin 0) (,r_iter_begin ptr_size)) (list r_value))
		(else)
			(call 'string 'cat (list r_args) (list r_value))
		(endif)
	(else)
		(call 'lisp 'env_args_type (list r_args `(@ ,(f-path 'vector 'vtable)) -1))
		(vpif (list (method-output 'lisp 'env_args_type 0) '!= 0))
			(call 'vector 'create nil (list r_value))
		(vp-label 'docat)
			;use r4 as dispatch register as we are using r14 !
			(loop-start)
				(call 'vector 'get_length `((,r_iter_begin 0)) (list r_elem r_length) r4)
				(call 'vector 'append (list r_value r_elem 0 r_length) (list r_value) r4)
				(vp-add-cr ptr_size r_iter_begin)
			(loop-until (list r_iter_begin '== r_iter_end))
		(else)
			(call 'lisp 'env_args_type (list r_args `(@ ,(f-path 'array 'vtable)) -1))
			(vpif (list (method-output 'lisp 'env_args_type 0) '!= 0))
				(call 'array 'create nil (list r_value))
				(goto 'docat)
			(else)
			(errorcases
				(call 'lisp 'env_args_type (list r_args `(@ ,(f-path 'points 'vtable)) -1))
				(errorif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))
				(call 'points 'create nil (list r_value))
				(goto 'docat)
			(endif)
		(endif)
	(endif)
	(assign {this} (list r0))

(vp-label 'funcexit)
	(exit 'lisp 'func_cat (list r0 r_value))
	(return)

(errorcases
(vp-label 'error)
	(call 'lisp 'repl_error {this, "(cat seq ...)", error_msg_wrong_types, args} (list r0 r_value))
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
