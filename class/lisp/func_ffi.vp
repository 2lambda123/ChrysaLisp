(include 'sys/func.inc)
(include 'sys/load/class.inc)
(include 'class/func/class.inc)
(include 'class/sym/class.inc)
(include 'class/hmap/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_ffi)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'value 'name)
	(union
		'(ptr 'args)
		'(uint 'flags))

	(push-scope)
	(entry 'lisp 'func_ffi {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 4})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_third {args} {_, value})
	(call 'sys_load 'bind {&value->str_data} {value})
	(errorifnot {value} 'error1)
	(call 'vector 'get_second {args} {_, name})
	(call 'vector 'get_forth {args} {_, args})
	(call 'num 'get_value {args} {_, flags})
	(call 'func 'create {value | flags} {value})
	(call 'hmap 'insert {this->lisp_environment, name, value})

	(exit 'lisp 'func_ffi {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(ffi sym path flags)", error_msg_wrong_types, args})
	(signature 'sig 'obj 'sym 'str 'num))

	(pop-scope-syms)

(def-func-end)
