(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_char)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_len r_value r_iter_begin r_iter_end r_width) '(r7 r8 r9))

	(entry 'lisp 'func_char (list r_this r_args))

	(vp-cpy-ir-ui r_args array_length r_len)

(errorcases
	(gotoif (list r_len '< 1) 'error1)
	(gotoif (list r_len '> 2) 'error1)
	(call 'lisp 'env_args_type `(,r_args (@ ,(f-path 'integer 'vtable)) 0))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir r_args array_array r_iter_begin)
	(vp-cpy-cr 1 r_width)
	(vp-cpy-ir r_iter_begin 0 r_value)
	(vpif (list r_len '> 1))
		(vp-cpy-ir r_iter_begin ptr_size r_width)
		(vp-cpy-ir r_width integer_value r_width)
		(vp-sub-cr 1 r_width)
		(vp-and-cr (dec long_size) r_width)
		(vp-add-cr 1 r_width)
	(endif)
	(call 'string 'create_from_buffer (list (list '& r_value integer_value) r_width) (list r_value))

	(exit 'lisp 'func_char (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(char num [width])" error_msg_wrong_types r_args)))

(def-func-end)
