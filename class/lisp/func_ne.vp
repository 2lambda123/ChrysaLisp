(include 'sys/func.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

;ne all different

(def-method 'lisp 'func_ne)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_num r_value r_iter_begin r_iter_end r_num1 r_iter r_iter_stop) '(r6 r7))

	(entry 'lisp 'func_ne (list r_this r_args))

(errorcases
	(call 'lisp 'env_args_type `(,r_args (@ ,(f-path 'integer 'vtable)) -2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_iters (list r_args) (list '_ r_iter_begin r_iter_end))
	(vp-lea-i r_iter_end (neg ptr_size) r_iter_stop)
	(loop-start)
		(vp-cpy-ir r_iter_begin 0 r_num)
		(vp-add-cr ptr_size r_iter_begin)
		(vp-cpy-rr r_iter_begin r_iter)
		(vp-cpy-ir r_num integer_value r_num)
		(loop-start)
			(vp-cpy-ir r_iter 0 r_num1)
			(vp-add-cr ptr_size r_iter)
			(vp-cpy-ir r_num1 integer_value r_num1)
			(gotoif (list r_num1 '== r_num) 'fail)
		(loop-until (list r_iter '== r_iter_end))
	(loop-until (list r_iter_begin '== r_iter_stop))

	(call 'obj 'ref (list (list r_this lisp_sym_t)) (list r_value))
	(exit 'lisp 'func_ne (list r_this r_value))
	(vp-ret)

(vp-label 'fail)
	(call 'obj 'ref (list (list r_this lisp_sym_nil)) (list r_value))
	(exit 'lisp 'func_ne (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(ne num num ...)" error_msg_wrong_types r_args)))

(def-func-end)
