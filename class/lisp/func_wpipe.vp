(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/pipe/class.inc)
(include 'class/msg_out/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_wpipe)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'pipe)
	(union
		'(pptr 'iter_begin)
		'(ptr 'stream)
		'(uint 'state))

	(push-scope)
	(entry 'lisp 'func_wpipe {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {pipe, value})
	(call 'pipe 'get_state {pipe} {_, state})
	(errorif {state != stream_mail_state_started} 'error2)
	(call 'pipe 'get_input {pipe} {_, stream})
	(call 'stream 'write {stream, &value->string_data, value->string_length})
	(call 'stream 'write_flush {stream})
	(call 'obj 'ref {value})

	(exit 'lisp 'func_wpipe {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(pipe-write pipe str)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(pipe-write pipe str)", error_msg_open_error, args})
	(signature 'sig 'pipe 'string))

	(pop-scope-syms)

(def-func-end)
