(include 'sys/func.inc)
(include 'class/hmap/class.inc)
(include 'class/pair/class.inc)
(include 'class/sym/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'repl_expand)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = form object iter (pptr)
	;r2 = 0
	;outputs
	;r0 = lisp object (ptr)
	;r1 = expansion count (uint)

	(ptr 'this 'macro 'form 'args)
	(pptr 'iter 'iter_begin 'iter_end)
	(uint 'cnt 'length)

	(push-scope)
	(entry 'lisp 'repl_expand {this, iter, cnt})

	(assign {*iter} {form})
	(vpif (cat {form->obj_vtable == @} (f-path 'vector 'vtable)))
		(d-call 'vector 'get_length {form} {_, length})
		(breakifnot {length})
		(call 'vector 'get_first {form} {_, macro})
		(breakif {macro == this->lisp_sym_quote})
		(vpif (cat {macro->obj_vtable == @} (f-path 'sym 'vtable)))
			(call 'hmap 'search {this->lisp_environment, macro} {_, iter_begin, _})
			(gotoifnot {iter_begin} 'decend)
			(call 'pair 'get_second {*iter_begin} {_, macro})
			(gotoif (cat {macro->obj_vtable != @} (f-path 'vector 'vtable)) 'decend)
			(call 'vector 'get_first {macro} {_, args})
			(gotoif {args != this->lisp_sym_macro} 'decend)
			(d-call 'vector 'slice {form, 1, length} {_, args})
			(call 'lisp 'repl_apply {this, args, macro} {_, form})
			(call 'obj 'deref {args})
			(call 'obj 'deref {*iter})
			(assign {form, cnt + 1} {*iter, cnt})
		(else)
		(vp-label 'decend)
			(call 'vector 'get_iters {form} {_, iter_begin, iter_end})
			(loop-while {iter_begin != iter_end})
				(call 'lisp 'repl_expand {this, iter_begin, cnt} {_, cnt})
				(assign {iter_begin + ptr_size} {iter_begin})
			(loop-end)
		(endif)
	(endif)

	(exit 'lisp 'repl_expand {this, cnt})
	(pop-scope)
	(return)

(def-func-end)
