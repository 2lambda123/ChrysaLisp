(include 'sys/func.inc)
(include 'class/hmap/class.inc)
(include 'class/pair/class.inc)
(include 'class/sym/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'repl_expand)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = form object iter (pptr)
	;outputs
	;r0 = lisp object (ptr)

	(def-struct 'local)
		(ptr 'this 'form 'args 'macro)
		(pptr 'iter)
		(uint 'start)
	(def-struct-end)

	(entry 'lisp 'repl_expand '(r0 r1))

	;expand it if list ?
	(vp-cpy-ir r1 0 r2)
	(f-bind 'vector 'vtable r3)
	(vp-cpy-ir r2 obj_vtable r4)
	(vpif '(r4 = r3))
		(vp-alloc local_size)
		(vp-cpy-ir r0 lisp_stack r3)
		(vp-cpy-ri r0 rsp local_this)
		(class/array/get_length r3 r3)
		(vp-cpy-ri-i r3 rsp local_start)
		(loop-start 'try_expand)
			(switch 'next_iter)
				;check if a macro
				(switch)
				;not 0 length ?
				(class/array/get_length r2 r3)
				(breakif '(r3 = 0) 'next_iter)
				;not quoted list ?
				(class/array/bind_args r2 '(r3))
				(vp-cpy-ir r0 lisp_sym_quote r4)
				(breakif '(r4 = r3) 'next_iter)

				;is a symbol ?
				(vp-cpy-ri r1 rsp local_iter)
				(vp-cpy-ri r2 rsp local_form)
				(f-bind 'sym 'vtable r4)
				(vp-cpy-ir r3 obj_vtable r5)
				(breakif '(r4 /= r5))
				;is defined ?
				(call 'hmap 'search '((r0 lisp_environment) r3) '(_ r1 _))
				(breakif '(r1 = 0))
				;is a list ?
				(vp-cpy-ir r1 0 r1)
				(class/pair/get_second r1 r1)
				(f-bind 'vector 'vtable r2)
				(vp-cpy-ir r1 obj_vtable r3)
				(breakif '(r2 /= r3))
				;not 0 length ?
				(class/array/get_length r1 r2)
				(breakif '(r2 = 0))
				;is a macro ?
				(vp-cpy-ir rsp local_this r0)
				(class/array/bind_args r1 '(r2))
				(vp-cpy-ir r0 lisp_sym_macro r3)
				(breakif '(r2 /= r3))
				(default)
					;replace form with macro expantion
					(vp-cpy-ir rsp local_form r0)
					(vp-cpy-ri r1 rsp local_macro)
					(d-call 'vector 'slice '(r0 1 (r0 array_length ui)) '(r0 (rsp local_args)))
					(call 'obj 'deref '(r0))
					(call 'lisp 'repl_apply '((rsp local_this) (rsp local_args) (rsp local_macro)) '(_ r1))
					(vp-cpy-ir rsp local_iter r0)
					(vp-cpy-ri r1 r0 0)
					(call 'obj 'deref '((rsp local_args)))
					(vp-cpy-ir rsp local_iter r1)
					(vp-cpy-ir rsp local_this r0)
					(vp-cpy-ir r1 0 r2)
					(f-bind 'vector 'vtable r3)
					(vp-cpy-ir r2 obj_vtable r4)
					(continueif '(r4 = r3) 'try_expand)
					(break 'next_iter)
				(endswitch)

				;down this lists branches
				(vp-cpy-ir rsp local_this r0)
				(vp-cpy-ir rsp local_form r1)
				(vp-cpy-ir r0 lisp_stack r0)
				(class/array/get_both r1 r1 r6)
				(f-bind 'vector 'vtable r7)
				(loop-start)
					(vp-cpy-ir r1 0 r2)
					(vp-cpy-ir r2 obj_vtable r2)
					(vpif '(r2 = r7))
						(call 'array 'push_back '(r0 r1) '(r0 r1 _ _))
					(endif)
					(vp-add-cr ptr_size r1)
				(loop-until '(r1 = r6))
			(endswitch)

			;pop back stack
			(vp-cpy-ir rsp local_this r0)
			(vp-cpy-ir-ui rsp local_start r3)
			(vp-cpy-ir r0 lisp_stack r2)
			(class/array/get_length r2 r1)
			(breakif '(r1 = r3))
			(vp-sub-cr 1 r1)
			(class/array/set_length r2 r1)
			(class/array/get_element r2 r1 r1 r2)
			(vp-cpy-ir r1 0 r2)
		(loop-end)
		(vp-free local_size)
	(endif)

	(exit 'lisp 'repl_expand '(r0))
	(vp-ret)

(def-func-end)
