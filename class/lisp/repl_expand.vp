(include 'sys/func.inc)
(include 'class/hmap/class.inc)
(include 'class/pair/class.inc)
(include 'class/sym/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'repl_expand)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = form object iter (pptr)
	;outputs
	;r0 = lisp object (ptr)

	(ptr 'this 'form)
	(pptr 'iter)
	(union
		'(pptr 'iter_begin 'iter_end)
		'(ptr 'args 'macro))
	(uint 'length)

	(push-scope)
	(entry 'lisp 'repl_expand {this, iter})

	(assign {*iter} {form})
	(loop-start 'try_expand)
		(breakif (cat {form->obj_vtable != @} (f-path 'vector 'vtable)))
		(d-call 'vector 'get_length {form} {_, length})
		(breakifnot {length})
		(call 'vector 'get_first {form} {_, macro})
		(breakif {macro == this->lisp_sym_quote})
		(vpif (cat {macro->obj_vtable == @} (f-path 'sym 'vtable)))
			(call 'hmap 'search {this->lisp_environment, macro} {_, iter_begin, _})
			(breakifnot {iter_begin})
			(call 'pair 'get_second {*iter_begin} {_, macro})
			(breakif (cat {macro->obj_vtable != @} (f-path 'vector 'vtable)))
			(call 'vector 'get_first {macro} {_, args})
			(breakif {args != this->lisp_sym_macro})
			(d-call 'vector 'slice {form, 1, length} {_, args})
			(call 'obj 'deref {form})
			(call 'lisp 'repl_apply {this, args, macro} {_, form})
			(call 'obj 'deref {args})
			(assign {form} {*iter})
			(continue 'try_expand)
		(endif)
		(call 'vector 'get_iters {form} {_, iter_begin, iter_end})
		(loop-while {iter_begin != iter_end})
			(call 'lisp 'repl_expand {this, iter_begin})
			(assign {iter_begin + ptr_size} {iter_begin})
		(loop-end)
	(endswitch)

	(exit 'lisp 'repl_expand {this})
	(pop-scope)
	(return)

(def-func-end)
