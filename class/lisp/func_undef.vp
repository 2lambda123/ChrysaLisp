(include 'sys/func.inc)
(include 'class/hash_map/class.inc)
(include 'class/symbol/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_undef)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'env 'var 'bucket)
	(union
		'(pptr 'iter_begin 'iter_end)
		'(uint 'length))

	(push-scope)
	(entry 'lisp 'func_undef {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 2} 'error1)
	(call 'vector 'get_iters {args} {_, iter_begin, iter_end})
	(assign {iter_begin[ptr_size * 0]} {env})

(errorcases
	(call 'obj 'inst_of (cat {env, @} (f-path 'hash_map 'vtable)))
	(errorif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))

	(assign {&iter_begin[ptr_size * 1]} {iter_begin})
	(loop-start)
		(assign {iter_begin[ptr_size * 0]} {var})
		(errorif (cat {var->obj_vtable != @} (f-path 'symbol 'vtable)) 'error3)
		(call 'hash_map 'find {env, var} {_, var, bucket})
		(vpif {var})
			(call 'hash_map 'erase {env, var, bucket})
		(endif)
	(loop-until {(&iter_begin[ptr_size] => iter_begin) == iter_end})
	(call 'obj 'ref {this->lisp_sym_nil} {var})

	(exit 'lisp 'func_undef {this, var})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(undef env var [var] ...)", error_msg_wrong_num_of_args, args})
	(return)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(undef env var [var] ...)", error_msg_not_an_environment, args})
	(return)
(vp-label 'error3)
	(call 'lisp 'repl_error {this, "(undef env var [var] ...)", error_msg_not_a_symbol, args})
	(return))

	(pop-scope-syms)

(def-func-end)
