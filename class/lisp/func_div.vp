(include 'sys/func.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(defun divmod (_ p)
	(vp-def (r_this r_args r_num r_value r_numhi r_iter_begin r_iter_end r_num1) '(r6 r7))
	(entry 'lisp _ (list r_this r_args))
(errorcases
	(call 'lisp 'env_args_type `(,r_args (@ ,(f-path 'integer 'vtable)) -2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))
	(call 'vector 'get_iters (list r_args) (list '_ r_iter_begin r_iter_end))
	(vp-cpy-ir r_iter_begin 0 r_num)
	(vp-add-cr ptr_size r_iter_begin)
	(vp-cpy-ir r_num integer_value r_num)
	(loop-start)
		(vp-cpy-ir r_iter_begin 0 r_num1)
		(vp-add-cr ptr_size r_iter_begin)
		(vp-cpy-ir r_num1 integer_value r_num1)
		(vp-ext-rr r_num r_numhi)
		(exec p)
	(loop-until (list r_iter_begin '== r_iter_end))
	(call 'integer 'create (list r_num) (list r_value))
	(exit 'lisp _ (list r_this r_value))
	(vp-ret))

(def-method 'lisp 'func_div)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(divmod 'func_div '(vp-div-rrr r_num1 r_numhi r_num))
(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error (list r_this "(div num num ...)" error_msg_wrong_types r_args)))

(def-func-end)

(def-method 'lisp 'func_mod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(divmod 'func_mod
		'(progn
			(vp-div-rrr r_num1 r_numhi r_num)
			(vp-cpy-rr r_numhi r_num)))
(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error (list r_this "(mod num num ...)" error_msg_wrong_types r_args)))

(def-func-end)
