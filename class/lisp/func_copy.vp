(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_copy)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'lisp 'func_copy '(r0 r1))

(errorcases
	(vp-cpy-ir-ui r1 array_length r2)
	(gotoif '(r2 != 1) 'error))

	(vp-cpy-ir r1 array_array r1)
	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir-ui r1 obj_count r2)
	(vp-add-cr 1 r2)
	(vp-cpy-ri-i r2 r1 obj_count)
	(vp-push r0 r1)
	(vp-cpy-rr rsp r1)
	(vp-call 'copy_elem)
	(vp-pop r0 r1)

	(exit 'lisp 'func_copy '(r0 r1))
	(vp-ret)

(vp-label 'copy_elem)
	;inputs
	;r1 = element iterator (pptr)
	;outputs
	;r1 = element iterator (pptr)

	(vp-cpy-ir r1 0 r0)
	(f-bind 'vector 'vtable r2)
	(vp-cpy-ir r0 obj_vtable r3)
	(vpif '(r2 == r3))
		(vp-push r1)
		(d-call 'vector 'slice '(r0 0 (r0 array_length ui)) '(r0 r1))
		(vp-push r1)
		(call 'vector 'deref '(r0))
		(vp-pop r0)
		(vp-cpy-ir rsp 0 r1)
		(vp-cpy-ri r0 r1 0)
		(call 'vector 'get_iters '(r0) '(_ r1 r2))
		(loop-while '(r1 != r2))
			(vp-push r2)
			(vp-call 'copy_elem)
			(vp-add-cr ptr_size r1)
			(vp-pop r2)
		(loop-end)
		(vp-pop r1)
	(endif)
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(copy form)" error_msg_wrong_num_of_args r1)))

(def-func-end)
