(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_copy)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'lisp 'func_copy '(r0 r1))

(errorcases
	(class/array/get_length r1 r2)
	(gotoif '(r2 != 1) 'error))

	;ref and copy if list
	(class/array/bind_args r1 '(r1))
	(class/obj/ref r1 r2)
	(f-bind 'vector 'vtable r3)
	(vp-cpy-ir r1 obj_vtable r2)
	(vpif '(r2 == r3))
		(vp-push r1)
		(vp-cpy-rr r0 r8)
		(vp-cpy-ir r0 lisp_stack r9)
		(vp-lea-i rsp 0 r10)
		(class/array/get_length r9 r9)
		(loop-start)
			;replace form with copy, deref can't cause destroy !
			(vp-cpy-ir r10 0 r0)
			(d-call 'vector 'slice '(r0 0 (r0 array_length ui)) '(r0 r1))
			(class/obj/ref r0 r2 -1)
			(vp-cpy-ri r1 r10 0)

			;down this lists branches
			(class/array/get_both r1 r1 r6)
			(vp-cpy-ir r8 lisp_stack r0)
			(f-bind 'vector 'vtable r7)
			(loop-start)
				(vp-cpy-ir r1 0 r2)
				(vp-cpy-ir r2 obj_vtable r2)
				(vpif '(r2 == r7))
					(call 'array 'push_back '(r0 r1) '(r0 r1 _ _))
				(endif)
				(vp-add-cr ptr_size r1)
			(loop-until '(r1 == r6))

			;pop back stack
			(class/array/get_length r0 r1)
			(breakif '(r1 == r9))
			(vp-sub-cr 1 r1)
			(class/array/set_length r0 r1)
			(class/array/get_element r0 r1 r10 r2)
		(loop-end)

		(vp-cpy-rr r8 r0)
		(vp-pop r1)
	(endif)

	(exit 'lisp 'func_copy '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(copy form)" error_msg_wrong_num_of_args r1)))

(def-func-end)
