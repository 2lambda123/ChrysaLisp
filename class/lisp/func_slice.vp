(include 'sys/func.inc)
(include 'class/sequence/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_slice)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'slc 'value1 'value2)
	(union
		'(pptr 'iter_begin)
		'(int 'length 'start 'end))

	(push-scope)
	(entry 'lisp 'func_slice {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 3})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size], iter_begin[ptr_size * 2]} {value1, value2, slc})

	(call 'integer 'get_value {value1} {_, start})
	(call 'integer 'get_value {value2} {_, end})
	(call 'sequence 'get_length {slc} {_, length})
	(vpif {start < 0})
		(assign {length + start + 1} {start})
	(endif)
	(vpif {end < 0})
		(assign {length + end + 1} {end})
	(endif)
	(errorif {start > end || start < 0 || end > length} 'error2)
	(call 'sequence 'slice {slc, start, end} {_, value1})

	(exit 'lisp 'func_slice {this, value1})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(slice start end seq)", error_msg_wrong_types, args})
	(return)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(slice start end seq)", error_msg_not_valid_index, args})
	(return)
	(signature 'sig 'integer 'integer 'sequence))

	(pop-scope-syms)

(def-func-end)
