(include "sys/func.inc")
(include "sys/load/class.inc")
(include "sys/str/class.inc")
(include "class/sym/class.inc")
(include "class/sstream/class.inc")
(include "class/fixed/class.inc")
(include "class/lisp/class.inc")
(include "lib/consts/chars.inc")

(def-method 'lisp :read_num)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = next char (uint)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = num object (ptr)
	;r2 = next char (uint)
	;trashes
	;r1-r14

	(def-struct local 0
		(ptr this stream)
		(pubyte bufp)
		(int char sign)
		(struct buffer 64))

	(vp-def (bufp num val char bufe) '(r0))

	(vp-alloc local_size)
	(entry 'lisp :read_num `((rsp local_this) (rsp local_stream) ,char))
	(assign `(,char ,char) '((rsp local_char) (rsp local_sign)))

	(vpif `(,char = +char_minus))
		(call 'stream :read_char `((rsp local_stream)) `(_ ,char))
		(breakif `(,char >= +char_0))
		(assign `(,char) `((rsp local_char)))
		(call 'sym :intern_cstr '("-") `(,num))
		(goto 'exit)
	(endif)

	(assign `((& rsp local_buffer)) `(,bufp))
	(loop-start 'num_loop)
		(assign `((& rsp ,(+ local_buffer 63))) `(,bufe))
		(breakif `(,bufp = ,bufe))
		(gotoif `(,char = +char_dot) 'valid_digit)
		(vpif `(,char >= +char_0))
			(gotoif `(,char <= +char_9) 'valid_digit)
		(endif)
		(vpif `(,char >= +char_a))
			(gotoif `(,char <= +char_z) 'valid_digit)
		(endif)
		(breakif `(,char < +char_A))
		(breakif `(,char > +char_Z))
	(vp-label 'valid_digit)
		(assign `(,char) `((,bufp 0 ub)))
		(vp-add-cr 1 bufp)
		(assign `(,bufp) '((rsp local_bufp)))
		(call 'stream :read_char `((rsp local_stream)) `(_ ,char))
		(assign '((rsp local_bufp)) `(,bufp))
	(loop-end)
	(assign `(,char) `((rsp local_char)))
	(vp-xor-rr char char)
	(assign `(,char) `((,bufp 0 ub)))

	;pick base
	(assign '((& rsp local_buffer)) `(,bufp))
	(assign `((,bufp 1 ub)) `(,val))
	(vpif `(,val = +char_x))
		(vp-add-cr 2 bufp)
		(vp-cpy-cr 16 val)
	(elseif `(,val = +char_o))
		(vp-add-cr 2 bufp)
		(vp-cpy-cr 8 val)
	(elseif `(,val = +char_b))
		(vp-add-cr 2 bufp)
		(vp-cpy-cr 2 val)
	(else)
		(vp-cpy-cr 10 val)
	(endif)

	;create the number
	(call 'sys_str :to_long `(,bufp ,val) `(,val ,num))
	(assign '((rsp local_sign)) `(,char))
	(vpif `(,char = +char_minus))
		(vp-mul-cr -1 val)
	(endif)
	(vpif `(,num /= 0))
		;there was a fixed point
		(call 'fixed :create `(,val) `(,num))
	(else)
		;just parsed an int
		(call 'num :create `(,val) `(,num))
	(endif)
	(call 'num :intern `(,num) `(,num))

(vp-label 'exit)
	(exit 'lisp :read_num `((rsp local_this) ,num (rsp local_char)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
