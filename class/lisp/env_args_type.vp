(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'env_args_type)
	;inputs
	;r1 = args vector object (ptr) vector
	;r3 = type/sig pointer
	;r4 = - or 0 all same type check, else + for type signature check
	;outputs
	;r2 = 0 if error, else ok
	;trashes
	;r2-r7

	(entry 'lisp 'env_args_type '(r1 r3 r4))

	(vp-cpy-rr r0 r6)
	(vp-cpy-rr r1 r7)
	(assign '((r1 array_length)) '(r2))
	(switch 'fail)
		(vpif '(r4 <= 0))
			(vp-mul-cr -1 r4)
			(breakif '(r2 < r4) 'fail)
			(class/array/get_both r1 r4 r5)
			(loop-while '(r4 /= r5))
				(call 'obj 'inst_of '((r4 0) r3) '(_ r1))
				(breakif '(r1 = 0) 'fail)
				(vp-add-cr ptr_size r4)
			(loop-end)
		(else)
			(breakif '(r2 /= r4) 'fail)
			(class/array/get_both r1 r4 r5)
			(loop-while '(r4 /= r5))
				(vp-cpy-ir-us r3 0 r1)
				(vp-cpy-dr r3 r1 r1)
				(call 'obj 'inst_of '((r4 0) r1) '(_ r1))
				(breakif '(r1 = 0) 'fail)
				(vp-add-cr ptr_size r4)
				(vp-add-cr short_size r3)
			(loop-end)
		(endif)
		(vp-cpy-cr -1 r2)
		(vp-cpy-rr r6 r0)
		(vp-cpy-rr r7 r1)

		(exit 'lisp 'env_args_type '(r2))
		(vp-ret)
	(endswitch)
	(vp-xor-rr r2 r2)
	(vp-cpy-rr r6 r0)
	(vp-cpy-rr r7 r1)

	(exit 'lisp 'env_args_type '(r2))
	(vp-ret)

(def-func-end)
