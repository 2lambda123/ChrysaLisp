(include 'sys/func.inc)
(include 'class/stream_str/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_writechar)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'stream)
	(pptr 'iter_begin 'iter_end)
	(ulong 'length)
	(uint 'width)

	(push-scope)
	(entry 'lisp 'func_writechar {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length == 2 || length == 3} 'error1)
	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0]} {stream})

(errorcases
	(call 'obj 'inst_of (cat {stream, @} (f-path 'stream 'vtable)))
	(errorif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))

	(assign {1} {width})
	(vpif {length == 3})
		(assign {iter_begin[ptr_size * 2]} {value})
		(errorif (cat {value->obj_vtable != @} (f-path 'integer 'vtable)) 'error3)
		(call 'integer 'get_value {value} {_, width})
		(assign {((width - 1) & 7) + 1} {width})
	(endif)

	(assign {iter_begin[ptr_size]} {value})
	(vpif (cat {value->obj_vtable == @} (f-path 'vector 'vtable)))
		(call 'vector 'get_iters {value} {_, iter_begin, iter_end})
		(errorif {iter_begin == iter_end} 'error1)
		(loop-start)
			(assign {*iter_begin} {value})
			(errorif (cat {value->obj_vtable != @} (f-path 'integer 'vtable)) 'error3)
			(call 'integer 'get_value {value} {_, length})
			(call 'stream_str 'write {stream, &length, width})
		(loop-until {(iter_begin + ptr_size => iter_begin) == iter_end})
	(else)
		(errorif (cat {value->obj_vtable != @} (f-path 'integer 'vtable)) 'error3)
		(call 'integer 'get_value {value} {_, length})
		(call 'stream_str 'write {stream, &length, width})
	(endif)
	(call 'obj 'ref {value})

	(exit 'lisp 'func_writechar {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(write-char stream list|num [width])", error_msg_wrong_num_of_args, args})
	(return)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(write-char stream list|num [width])", error_msg_not_a_stream, args})
	(return)
(vp-label 'error3)
	(call 'lisp 'repl_error {this, "(write-char stream list|num [width])", error_msg_not_a_number, args})
	(return))

	(pop-scope-syms)

(def-func-end)
