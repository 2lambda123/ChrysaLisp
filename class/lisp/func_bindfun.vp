(include 'sys/func.inc)
(include 'class/sym/class.inc)
(include 'class/hmap/class.inc)
(include 'class/func/class.inc)
(include 'class/pair/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_bindfun)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this 'form)
		(pptr 'iter_begin 'iter_end)
		(uint 'start)
	(def-struct-end)

	(entry 'lisp 'func_bindfun '(r0 r1))

(errorcases
	(vp-cpy-ir-ui r1 array_length r2)
	(gotoif '(r2 != 1) 'error))

	;deep copy form
	(call 'lisp 'func_copy '(r0 r1) '(r0 r1))
	(f-bind 'vector 'vtable r2)
	(vp-cpy-ir r1 obj_vtable r3)
	(vpif '(r2 == r3))
		;is a list so down we go
		(vp-alloc local_size)
		(vp-cpy-ri r0 rsp local_this)
		(vp-cpy-ri r1 rsp local_form)
		(call 'lisp 'repl_expand '(r0 (& rsp local_form)) '(r0))
		(vp-cpy-ir r0 lisp_stack r0)
		(vp-cpy-ir-ui r0 array_length r1)
		(vp-cpy-ri-i r1 rsp local_start)
		(call 'array 'push_back '(r0 (rsp local_form)) '(r0 _))
		(loop-start)
			;pop back stack
			(vp-cpy-ir-ui r0 array_length r1)
			(vp-cpy-ir-ui rsp local_start r2)
			(breakif '(r1 == r2))
			(vp-cpy-ir r0 array_array r2)
			(vp-sub-cr 1 r1)
			(vp-cpy-ri-i r1 r0 array_length)
			(vp-shl-cr (log2 long_size) r1)
			(vp-cpy-dr r2 r1 r1)

			;loop form elements
			(vp-cpy-ir-ui r1 array_length r2)
			(vp-cpy-ir r1 array_array r1)
			(vp-shl-cr (log2 long_size) r2)
			(vp-add-rr r1 r2)
			(vp-cpy-ri r2 rsp local_iter_end)
			(loop-while '(r1 != r2))
				(vp-cpy-ri r1 rsp local_iter_begin)
				(vp-cpy-ir rsp local_this r0)
				(vp-cpy-ir r1 0 r1)

				(switch 'next_elem)
					;is list ?
					(switch)
					(f-bind 'vector 'vtable r2)
					(vp-cpy-ir r1 obj_vtable r3)
					(breakif '(r2 != r3))
					;not 0 length ?
					(vp-cpy-ir-ui r1 array_length r2)
					(breakif '(r2 == 0) 'next_elem)
					;not quoted list ?
					(vp-cpy-ir r1 array_array r2)
					(vp-cpy-ir r0 lisp_sym_quote r3)
					(vp-cpy-ir r2 0 r2)
					(breakif '(r2 == r3) 'next_elem)
					(default)
						;come back to this branch
						(call 'array 'push_back '((r0 lisp_stack) r1))
						(break 'next_elem)
					(endswitch)

					;is a symbol ?
					(switch)
					(f-bind 'sym 'vtable r2)
					(breakif '(r2 != r3))
					;not lambda ?
					(vp-cpy-ir r0 lisp_sym_lambda r3)
					(breakif '(r1 == r3))
					;not macro ?
					(vp-cpy-ir r0 lisp_sym_macro r3)
					(breakif '(r1 == r3))
					;is defined ?
					(call 'hmap 'search '((r0 lisp_environment) r1) '(_ r1 _))
					(breakif '(r1 == 0))
					;is a function ?
					(vp-cpy-ir r1 0 r1)
					(f-bind 'func 'vtable r2)
					(vp-cpy-ir r1 pair_second r1)
					(vp-cpy-ir r1 obj_vtable r3)
					(gotoif '(r2 == r3) 'bind_it)
					;is a list ?
					(f-bind 'vector 'vtable r2)
					(breakif '(r2 != r3))
					;not 0 length ?
					(vp-cpy-ir-ui r1 array_length r2)
					(breakif '(r2 == 0))
					;is a lambda ?
					(vp-cpy-ir rsp local_this r0)
					(vp-cpy-ir r1 array_array r2)
					(vp-cpy-ir r0 lisp_sym_lambda r3)
					(vp-cpy-ir r2 0 r2)
					(breakif '(r2 != r3))
					(default)
					(vp-label 'bind_it)
						(vp-cpy-ir rsp local_iter_begin r3)
						(vp-cpy-ir-ui r1 obj_count r2)
						(vp-cpy-ir r3 0 r0)
						(vp-add-cr 1 r2)
						(vp-cpy-ri r1 r3 0)
						(vp-cpy-ri-i r2 r1 obj_count)
						(call 'obj 'deref '(r0))
					(endswitch)
				(endswitch)

				(vp-cpy-ir rsp local_iter_begin r1)
				(vp-cpy-ir rsp local_iter_end r2)
				(vp-add-cr ptr_size r1)
			(loop-end)
			(vp-cpy-ir rsp local_this r0)
			(vp-cpy-ir r0 lisp_stack r0)
		(loop-end)

		(vp-cpy-ir rsp local_this r0)
		(vp-cpy-ir rsp local_form r1)
		(vp-free local_size)
	(endif)

	(exit 'lisp 'func_bindfun '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(bind-fun form) -> form" error_msg_wrong_num_of_args r1)))

(def-func-end)
