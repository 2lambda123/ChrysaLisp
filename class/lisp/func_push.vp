(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_push)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(pptr 'iter_end)
	(uint 'length 'alength)

	(push-scope)
	(entry 'lisp 'func_push {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 2} 'error1)
	(call 'vector 'get_first {args} {_, value})
	(vpif (cat {value->obj_vtable == @} (f-path 'vector 'vtable)))
		(d-call 'vector 'append {value, args, 1, length})
	(else)
	(errorcases
		(call 'obj 'inst_of (cat {value, @} (f-path 'array 'vtable)))
		(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error1))
		(d-call 'array 'get_length {value} {_, alength})
		(assign {alength + length - 1} {alength})
		(call 'array 'set_capacity {value, alength})
		(call 'array 'get_end {value} {_, iter_end})
		(call 'array 'set_length {value, alength})
		(call 'lisp 'env_args_set {args, iter_end, 1})
	(endif)
	(call 'obj 'ref {value})

	(exit 'lisp 'func_push {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(push array form ...)", error_msg_wrong_types, args}))

	(pop-scope-syms)

(def-func-end)
