(include 'sys/func.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_basr)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_num r_value r_iter_begin) '(r6 r7))

	(entry 'lisp 'func_basr (list r_this r_args))

(errorcases
	(call 'lisp 'env_args_type `(,r_args ($ sig) 2))
	(errorif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir r_args array_array r_iter_begin)
	(vp-cpy-ir r_iter_begin 0 r_num)
	(vp-cpy-ir r_iter_begin ptr_size r_value)
	(vp-cpy-ir r_num integer_value r_num)
	(vp-cpy-ir r_value integer_value r_value)
	(vp-asr-rr r_value r_num)
	(call 'integer 'create (list r_num) (list r_value))

	(exit 'lisp 'func_basr (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(bit-asr num cnt)" error_msg_wrong_types r_args))
	(signature 'sig 'integer 'integer))

(def-func-end)
