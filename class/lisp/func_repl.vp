(include 'sys/func.inc)
(include 'class/stream/class.inc)
(include 'class/hmap/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)
(include 'class/sym/class.inc)

(def-method 'lisp 'func_repl)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'stream 'ast 'value 'old_file 'old_line)
	(ulong 'char 'cnt)
	(uint 'length)

	(push-scope)
	(entry 'lisp 'func_repl {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 2} 'error1)
	(call 'vector 'get_first {args} {_, stream})

(errorcases
	(call 'obj 'inst_of (cat {stream, @} (f-path 'stream 'vtable)))
	(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))

	(call 'vector 'get_second {args} {_, value})

(errorcases
	(call 'obj 'inst_of (cat {value, @} (f-path 'str 'vtable)))
	(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error3))

	;push old file and line, set to this stream info
	(call 'hmap 'get {this->lisp_environment, this->lisp_sym_stream_name} {_, old_file})
	(call 'hmap 'get {this->lisp_environment, this->lisp_sym_stream_line} {_, old_line})
	(call 'hmap 'set {this->lisp_environment, this->lisp_sym_stream_name, value})
	(call 'num 'create {1} {value})
	(call 'hmap 'set {this->lisp_environment, this->lisp_sym_stream_line, value})
	(call 'obj 'deref {value})

	(call 'stream 'read_char {stream} {_, char})
	(loop-start)
		(call 'stream 'write_flush {this->lisp_stdout})
		(call 'stream 'write_flush {this->lisp_stderr})

		(call 'lisp 'read {this, stream, char} {_, ast, char})
		(breakif {char == -1})

		(loop-start)
			(call 'lisp 'repl_expand {this, &ast, 0} {_, cnt})
		(loop-untilnot {cnt})

		(call 'lisp 'repl_eval {this, ast} {_, value})
		(call 'obj 'deref {ast})
		(vpif {stream == this->lisp_stdin})
			(call 'lisp 'repl_print {this, this->lisp_stdout, value})
			(call 'stream 'write_char {this->lisp_stdout, char_lf})
		(endif)

		(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'exit1)
		(call 'obj 'deref {value})
	(loop-end)
	(call 'obj 'ref {this->lisp_sym_nil} {value})

(vp-label 'exit1)
	;pop old file and line info
	(call 'hmap 'set {this->lisp_environment, this->lisp_sym_stream_name, old_file})
	(call 'obj 'deref {old_file})
	(call 'hmap 'set {this->lisp_environment, this->lisp_sym_stream_line, old_line})
	(call 'obj 'deref {old_line})

	(exit 'lisp 'func_repl {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(repl stream path)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(repl stream path)", error_msg_not_a_stream, args})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(repl stream path)", error_msg_not_a_string, args}))

	(pop-scope-syms)

(def-func-end)
