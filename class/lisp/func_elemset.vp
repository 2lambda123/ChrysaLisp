(include 'sys/func.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_elemset)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'seq)
	(pptr 'iter_begin)
	(int 'length 'index)

	(push-scope)
	(entry 'lisp 'func_elemset {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 3})
	(errorif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {value, seq})
	(call 'integer 'get_value {value} {_, index})
	(d-call 'vector 'get_length {seq} {_, length})
	(vpif {index < 0})
		(assign {length + index + 1} {index})
	(endif)
	(errorif {index < 0 || index >= length} 'error2)
	(call 'obj 'ref {iter_begin[ptr_size * 2]} {value})
	(call 'obj 'ref {value})
	(d-call 'vector 'set_element {seq, value, index})

	(exit 'lisp 'func_elemset {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(elem-set index list val)", error_msg_wrong_types, args})
	(return)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(elem-set index list val)", error_msg_not_valid_index, args})
	(return)
	(signature 'sig 'integer 'vector 'obj))

	(pop-scope-syms)

(def-func-end)
