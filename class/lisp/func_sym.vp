(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/symbol/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_sym)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_value r_form r_vtable r_cmp) '(r6 r7))

	(entry 'lisp 'func_sym (list r_this r_args))

(errorcases
	(d-call 'vector 'get_length (list r_args))
	(gotoif (list (method-output 'vector 'get_length 1) '!= 1) 'error1))

	(call 'vector 'get_first (list r_args) (list '_ r_form))
	(assign `((,r_form obj_vtable) (@ ,(f-path 'symbol 'vtable))) (list r_vtable r_cmp))
	(vpif (list r_vtable '== r_cmp))
		(call 'obj 'ref (list r_form) (list r_value))
	(else)
	(errorcases
		(assign `((@ ,(f-path 'string 'vtable))) (list r_cmp))
		(gotoif (list r_vtable '!= r_cmp) 'error2))
		(call 'symbol 'create_from_buffer `((& ,r_form string_data) (,r_form string_length ui)) (list r_value))
		(call 'symbol 'intern (list r_value) (list r_value))
	(endif)

	(exit 'lisp 'func_sym (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(sym form)" error_msg_wrong_num_of_args r_args))
(vp-label 'error2)
	(jump 'lisp 'repl_error (list r_this "(sym form)" error_msg_not_a_string r_args)))

(def-func-end)
