(include 'sys/func.inc)
(include 'class/hmap/class.inc)
(include 'class/sym/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_defmacro)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(pptr 'iter_begin)

	(push-scope)
	(entry 'lisp 'func_defmacro {this, args})

(errorcases
	(d-call 'vector 'get_length {args})
	(gotoif (list (method-output 'vector 'get_length 1) '< 4) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(errorif (cat {iter_begin[ptr_size * 2]->obj_vtable != @} (f-path 'vector 'vtable)) 'error2)
	(assign {iter_begin[ptr_size * 1]} {value})
	(errorif (cat {value->obj_vtable != @} (f-path 'sym 'vtable)) 'error3)
	(d-call 'vector 'slice {args, 1, args->array_length} {_, args})
	(d-call 'vector 'set_element {args, this->lisp_sym_macro, 0})
	(call 'hmap 'insert {this->lisp_environment, value, args})
	(call 'obj 'deref {args})
	(call 'obj 'ref {this->lisp_sym_macro})
	(call 'obj 'ref {value})

	(exit 'lisp 'func_defmacro {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(defmacro name ([arg ...]) body)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(defmacro name ([arg ...]) body)", error_msg_not_a_list, args})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(defmacro name ([arg ...]) body)", error_msg_not_a_symbol, args}))

	(pop-scope-syms)

(def-func-end)
