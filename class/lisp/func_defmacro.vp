(include 'sys/func.inc)
(include 'class/hmap/class.inc)
(include 'class/sym/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_defmacro)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'vars)
	(uint 'length)

	(push-scope)
	(entry 'lisp 'func_defmacro {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 4} 'error1)
	(call 'vector 'get_third {args} {_, vars})
	(errorif (cat {vars->obj_vtable != @} (f-path 'vector 'vtable)) 'error2)
	(call 'vector 'get_second {args} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'sym 'vtable)) 'error3)
	(call 'obj 'ref {value})
	(call 'obj 'ref {this->lisp_sym_macro} {vars})
	(d-call 'vector 'slice {args, 1, length} {_, args})
	(d-call 'vector 'set_element {args, vars, 0})
	(call 'hmap 'insert {this->lisp_environment, value, args})
	(call 'obj 'deref {args})

	(exit 'lisp 'func_defmacro {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(defmacro name ([arg ...]) body)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(defmacro name ([arg ...]) body)", error_msg_not_a_list, args})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(defmacro name ([arg ...]) body)", error_msg_not_a_symbol, args}))

	(pop-scope-syms)

(def-func-end)
