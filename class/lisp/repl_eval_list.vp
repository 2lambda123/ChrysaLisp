(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'repl_eval_list)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = list vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'value)
	(pptr 'iter_begin 'iter_end)

	(vp-def (r_this r_value r_iter_end r_iter_begin r_vtable r_error))

	(push-scope)
	(entry 'lisp 'repl_eval_list (list r_this r_value))
	(assign (list r_this) {this})
	(call 'vector 'get_iters (list r_value) (list '_ r_iter_begin r_iter_end))
	(assign {this} (list r_this))
	(vp-cpy-ir r_this lisp_sym_nil r_value)
	(loop-while (list r_iter_begin '!= r_iter_end))
		(assign (list r_iter_begin r_iter_end) {iter_begin, iter_end})
		(call 'lisp 'repl_eval `(,r_this (,r_iter_begin 0)) (list r_this r_value))
	(errorcases
		(vp-cpy-ir r_value obj_vtable r_vtable)
		(f-bind 'error 'vtable r_error)
		(errorif (list r_error '== r_vtable) 'funcexit))
		(assign (list r_value) {value})
		(call 'obj 'deref {*iter_begin})
		(assign {value, iter_begin, iter_end, this} (list r_value r_iter_begin r_iter_end r_this))
		(vp-cpy-ri r_value r_iter_begin 0)
		(vp-add-cr ptr_size r_iter_begin)
	(loop-end)
	(call 'obj 'ref (list r_value) (list r_value))
	(assign {this} (list r_this))

(vp-label 'funcexit)
	(exit 'lisp 'repl_eval_list (list r_this r_value))
	(pop-scope)
	(return)

(def-func-end)
