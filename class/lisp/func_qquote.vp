(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_qquote)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'lisp 'func_qquote '(r0 r1))

(errorcases
	(class/array/get_length r1 r2)
	(gotoif '(r2 /= 2) 'error))

	(class/array/get_begin r1 r1)
	(vp-cpy-ir r1 ptr_size r1)
	(class/obj/ref r1 r2)
	(vp-push r1)
	(call 'expand '(r0 (& rsp 0)) '(r0))
	(vp-pop r1)

	(exit 'lisp 'func_qquote '(r0 r1))
	(vp-ret)

(vp-label 'expand)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = iter pointer (pptr)
	;outputs
	;r0 = lisp object (ptr)

	(def-struct 'local)
		(ptr 'this 'list)
		(pptr 'iter 'iter_begin 'iter_end)
	(def-struct-end)

	(vp-cpy-ir r1 0 r4)
	(f-bind 'vector 'vtable r2)
	(vp-cpy-ir r4 obj_vtable r3)
	(vpif '(r3 = r2))
		(vp-alloc local_size)
		(vp-cpy-ri r0 rsp local_this)
		(vp-cpy-ri r1 rsp local_iter)
		(class/array/get_both r4 r1 r2)
		(vp-cpy-ri r1 rsp local_iter_begin)
		(vp-cpy-ri r2 rsp local_iter_end)
		(call 'vector 'create nil '(r0))
		(class/array/get_length r4 r1)
		(call 'vector 'set_capacity '(r0 r1) '((rsp local_list)))
		(loop-start)
			(vp-cpy-ir rsp local_iter_begin r2)
			(vp-cpy-ir rsp local_iter_end r3)
			(breakif '(r2 = r3))
			(vp-cpy-ir r2 0 r1)
			(vp-add-cr ptr_size r2)
			(vp-cpy-ri r2 rsp local_iter_begin)

			;do we eval this element ?
			(f-bind 'vector 'vtable r2)
			(vp-cpy-ir r1 obj_vtable r3)
			(gotoif '(r2 /= r3) 'push_elem_ref)
			(class/array/get_length r1 r2)
			(gotoif '(r2 /= 2) 'push_list_copy)
			(vp-cpy-ir rsp local_this r0)
			(class/array/bind_args r1 '(r2 r3))
			(vp-cpy-ir r0 lisp_sym_unquote r4)
			(vp-cpy-ir r0 lisp_sym_splicing r5)
			(switch)
			(vpcase '(r2 = r4))
				(call 'lisp 'repl_eval '(r0 r3) '(_ r1))
				(goto 'push_elem)
			(vpcase '(r2 = r5))
				(call 'lisp 'repl_eval '(r0 r3) '(_ r1))
				(f-bind 'vector 'vtable r2)
				(vp-cpy-ir r1 obj_vtable r3)
				(gotoif '(r2 /= r3) 'push_elem)
				(vp-cpy-rr r1 r10)
				(call 'vector 'append '((rsp local_list) r1 0 (r1 array_length ui)))
				(call 'obj 'deref '(r10))
				(break)
			(default)
			(vp-label 'push_list_copy)
				(class/obj/ref r1 r2)
				(call 'vector 'push_back '((rsp local_list) r1) '(_ _ _ r3))
				(call 'expand '((rsp local_this) (& r3 (neg ptr_size))))
				(break)
			(vp-label 'push_elem_ref)
				(class/obj/ref r1 r2)
			(vp-label 'push_elem)
				(call 'vector 'push_back '((rsp local_list) r1))
			(endswitch)
		(loop-end)

		;swap new list with old
		(vp-cpy-ir rsp local_iter r1)
		(vp-cpy-ir rsp local_list r2)
		(vp-cpy-ir r1 0 r0)
		(vp-cpy-ri r2 r1 0)
		(call 'obj 'deref '(r0))
		(vp-cpy-ir rsp local_this r0)
		(vp-free local_size)
	(endif)
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(quasi-quote form)" error_msg_wrong_num_of_args r1)))

(def-func-end)
