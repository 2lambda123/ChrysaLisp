(include 'sys/func.inc)
(include 'class/hash_map/class.inc)
(include 'class/symbol/class.inc)
(include 'class/lisp/class.inc)

(defun defsetq (_ p)
	(vp-def (r_this r_length r_iter_begin r_iter_end r_vtable r_cmp r_val r_var) '(r0 r1 r1 r2))
	(ptr 'this 'args 'var 'val)
	(pptr 'iter_begin 'iter_end)
	(push-scope)
	(entry 'lisp (sym-cat "func_" _) {this, args})
	(d-call 'vector 'get_length {args} (list '_ r_length))
(errorcases
	(errorif (list r_length '< 3) 'error1)
	(vp-and-cr 1 r_length)
	(errorif (list r_length '== 0) 'error1))
	(call 'vector 'get_iters {args} (list '_ r_iter_begin r_iter_end))
	(vp-add-cr ptr_size r_iter_begin)
	(vp-xor-rr r_val r_val)
	(assign (list r_val r_iter_end) {val, iter_end})
	(loop-start)
		(assign (list r_iter_begin) {iter_begin})
		(call 'obj 'deref_if {val})
		(assign {iter_begin} (list r_iter_begin))
		(vp-cpy-ir r_iter_begin 0 r_var)
	(errorcases
		(vp-cpy-ir r_var obj_vtable r_vtable)
		(assign `((@ ,(f-path 'symbol 'vtable))) (list r_cmp))
		(errorif (list r_vtable '!= r_cmp) 'error2))
		(assign (list r_var) {var})
		(assign {this} (list r_this))
		(call 'lisp 'repl_eval `(,r_this (,r_iter_begin ptr_size)) (list r_this r_val))
		(assign (list r_val) {val})
	(errorcases
		(vp-cpy-ir r_val obj_vtable r_vtable)
		(assign `((@ ,(f-path 'error 'vtable))) (list r_cmp))
		(errorif (list r_vtable '== r_cmp) 'funcexit))
		(assign {var} (list r_var))
		(eval (macroexpand p))
		(assign {iter_begin, iter_end} (list r_iter_begin r_iter_end))
		(vp-add-cr (mul ptr_size 2) r_iter_begin)
	(loop-until (list r_iter_begin '== r_iter_end))
(vp-label 'funcexit)
	(exit 'lisp (sym-cat "func_" _) {this, val})
	(return))

(def-method 'lisp 'func_defq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(defsetq 'defq
		'(progn
			(call 'hash_map 'insert `((,r_this lisp_environment) ,r_var ,r_val))))

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(defq var val [var val] ...)", error_msg_wrong_num_of_args, args})
	(return)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(defq var val [var val] ...)", error_msg_not_a_symbol, args})
	(return))

	(pop-scope-syms)

(def-func-end)

(def-method 'lisp 'func_setq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(defsetq 'setq
		'(progn
			(call 'hash_map 'set `((,r_this lisp_environment) ,r_var ,r_val))
			(errorif (list (method-output 'hash_map 'set 1) '== 0) 'error3)))

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(setq var val [var val] ...)", error_msg_wrong_num_of_args, args})
	(return)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(setq var val [var val] ...)", error_msg_not_a_symbol, args})
	(return)
(vp-label 'error3)
	(call 'obj 'deref {val})
	(call 'lisp 'repl_error {this, "(setq var val [var val] ...)", error_msg_symbol_not_bound, args})
	(return))

	(pop-scope-syms)

(def-func-end)
