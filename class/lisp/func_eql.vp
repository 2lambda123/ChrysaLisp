(include 'sys/func.inc)
(include 'class/str/class.inc)
(include 'class/func/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_eql)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'lisp 'func_eql '(r0 r1))

(errorcases
	(vp-cpy-ir-ui r1 array_length r2)
	(gotoif '(r2 != 2) 'error))

	(vp-cpy-ir r1 array_array r3)
	(vp-cpy-ir r3 0 r2)
	(vp-cpy-ir r3 ptr_size r3)
	(gotoif '(r2 == r3) 'same)
	(switch)
	(vp-cpy-ir r2 obj_vtable r4)
	(vp-cpy-ir r3 obj_vtable r5)
	(vp-cpy-ir r0 lisp_sym_nil r1)
	(breakif '(r4 != r5))
	(fn-bind (f-path 'str 'vtable) r5)
	(fn-bind (f-path 'func 'vtable) r6)
	(fn-bind (f-path 'num 'vtable) r7)
	(vpcase '(r4 == r5))
		(vp-cpy-rr r0 r7)
		(call 'str 'same '(r2 r3) '(_ r1))
		(vp-cpy-rr r7 r0)
		(gotoif '(r1 == 0) 'same)
		(vp-cpy-ir r0 lisp_sym_nil r1)
		(break)
	(vpcase '(r4 == r6))
		(vp-cpy-ir r2 num_value r2)
		(vp-cpy-ir r3 num_value r3)
		(breakif '(r2 != r3))
		(vp-cpy-ir r0 lisp_sym_t r1)
		(break)
	(vpcase '(r4 == r7))
		(vp-cpy-ir r2 num_value r2)
		(vp-cpy-ir r3 num_value r3)
		(breakif '(r2 != r3))
	(vp-label 'same)
		(vp-cpy-ir r0 lisp_sym_t r1)
	(endswitch)
	(vp-cpy-ir-ui r1 obj_count r2)
	(vp-add-cr 1 r2)
	(vp-cpy-ri-i r2 r1 obj_count)

	(exit 'lisp 'func_eql '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(eql form form)" error_msg_wrong_num_of_args r1)))

(def-func-end)
