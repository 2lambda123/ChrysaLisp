(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_while)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(pptr 'iter_start)
		(pptr 'iter_begin)
		(pptr 'iter_end)
	(def-struct-end)

	(entry 'lisp 'func_while '(r0 r1))

	(call 'sys_task 'yield)

	(class/array/get_length r1 r2)
	(errorif '(r2 < 2) 'error)

	(vp-alloc local_size)
	(class/array/get_begin r1 r1)
	(vp-shl-cr (log2 long_size) r2)
	(vp-add-rr r1 r2)
	(vp-add-cr ptr_size r1)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r1 rsp local_iter_start)
	(vp-cpy-ri r2 rsp local_iter_end)
	(loop-start 'again)
		(vp-cpy-ir rsp local_iter_start r1)
		(vp-cpy-ri r1 rsp local_iter_begin)
		(call 'lisp 'repl_eval '(r0 (r1 0)) '(r0 r1))
		(vp-cpy-ir r0 lisp_sym_nil r2)
		(breakif '(r1 = r2))
		(loop-start)
		(errorcases
			(f-bind 'error 'vtable r2)
			(vp-cpy-ir r1 obj_vtable r3)
			(breakif '(r2 = r3)))
			(call 'obj 'deref '(r1))
			(vp-cpy-ir rsp local_this r0)
			(vp-cpy-ir rsp local_iter_begin r1)
			(vp-cpy-ir rsp local_iter_end r2)
			(vp-add-cr ptr_size r1)
			(continueif '(r1 = r2) 'again)
			(vp-cpy-ri r1 rsp local_iter_begin)
			(call 'lisp 'repl_eval '(r0 (r1 0)) '(r0 r1))
		(loop-end)
	(endswitch)

	(exit 'lisp 'func_while '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(while tst body)" error_msg_wrong_num_of_args r1)))

(def-func-end)
