(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_while)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(pptr 'iter_begin 'iter_end)

	(vp-def (r_this r_value r_args r_iter_end r_iter_begin r_nil r_vtable))

	(push-scope)
	(entry 'lisp 'func_while (list r_this r_args))
	(assign (list r_this r_args) {this, args})

(errorcases
	(d-call 'vector 'get_length (list r_args))
	(gotoif (list (method-output 'vector 'get_length 1) '< 2) 'error))

	(call 'sys_task 'yield)
(vp-label 'again)
	(call 'vector 'get_iters {args} (list '_ r_iter_begin r_iter_end))
	(vp-add-cr ptr_size r_iter_begin)
	(assign {this} (list r_this))
	(assign (list r_iter_begin r_iter_end) {iter_begin, iter_end})
	(call 'lisp 'repl_eval `(,r_this (,r_iter_begin 0)) (list r_this r_value))
	(vp-cpy-ir r_this lisp_sym_nil r_nil)
	(gotoif (list r_value '== r_nil) 'funcexit)
	(loop-start)
	(errorcases
		(f-bind 'error 'vtable r_nil)
		(vp-cpy-ir r_value obj_vtable r_vtable)
		(gotoif (list r_vtable '== r_nil) 'funcexit))
		(call 'obj 'deref (list r_value))
		(assign {iter_begin, iter_end} (list r_iter_begin r_iter_end))
		(vp-add-cr ptr_size r_iter_begin)
		(gotoif (list r_iter_begin '== r_iter_end) 'again)
		(assign {this} (list r_this))
		(assign (list r_iter_begin) {iter_begin})
		(call 'lisp 'repl_eval `(,r_this (,r_iter_begin 0)) (list r_this r_value))
	(loop-end)

(vp-label 'funcexit)
	(exit 'lisp 'func_while (list r_this r_value))
	(return)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error {this, "(while tst body)", error_msg_wrong_num_of_args, args}))

	(pop-scope-syms)

(def-func-end)
