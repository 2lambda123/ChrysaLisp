(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_match)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_value1 r_value2 r_iter r_iter_begin r_iter_end r_wild) '(r6 r7))

	(entry 'lisp 'func_match (list r_this r_args))

(errorcases
	(call 'lisp 'env_args_type `(,r_args ($ sig) 2))
	(errorif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir r_args array_array r_iter_begin)
	(vp-cpy-ir r_iter_begin 0 r_value1)
	(vp-cpy-ir r_iter_begin ptr_size r_value2)
	(vp-cpy-ir-ui r_value1 array_length r_iter_end)
	(vp-cpy-ir-ui r_value2 array_length r_iter_begin)
	(vpif (list r_iter_begin '== r_iter_end))
		(vp-cpy-ir r_value1 array_array r_iter_begin)
		(vp-cpy-ir r_value2 array_array r_iter)
		(vp-shl-cr (log2 ptr_size) r_iter_end)
		(vp-add-rr r_iter_begin r_iter_end)
		(vpif (list r_iter_begin '!= r_iter_end))
			(vp-cpy-ir r_this lisp_sym_underscore r_wild)
			(loop-start)
				(vp-cpy-ir r_iter_begin 0 r_value1)
				(vp-cpy-ir r_iter 0 r_value2)
				(vp-add-cr ptr_size r_iter_begin)
				(vp-add-cr ptr_size r_iter)
				(vpif (list r_value1 '!= r_value2))
					(gotoif (list r_value2 '!= r_wild) 'nomatch)
				(endif)
			(loop-until (list r_iter_begin '== r_iter_end))
		(endif)
		(vp-cpy-ir r_this lisp_sym_t r_value1)
	(else)
	(vp-label 'nomatch)
		(vp-cpy-ir r_this lisp_sym_nil r_value1)
	(endif)
	(call 'obj 'ref (list r_value1))

	(exit 'lisp 'func_match (list r_this r_value1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(match? list list)" error_msg_wrong_types r_args))
	(signature 'sig 'vector 'vector))

(def-func-end)
