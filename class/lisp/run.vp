(include "sys/func.inc")
(include "sys/mail/class.inc")
(include "sys/task/class.inc")
(include "class/sstream/class.inc")
(include "class/lisp/class.inc")
(include "class/sym/class.inc")
(include "gui/view/class.inc")
(include "lib/consts/chars.inc")
(include "sys/statics/class.inc")

(def-func 'class/lisp/run nil 8192)
	;lisp run loop task
	;inputs
	;msg of lisp filename

	(def-vars
		(ptr script stream lisp file value args))

	;init app vars
	(push-scope)

	;get param string
	(call 'sys_mail :mymail nil {script, _})
	(call 'sys_mail :free_obj {script} {script, _, _})

	;string output stream
	(call 'str :create_from_buffer {0, str_gap} {value})
	(call 'sstream :create {value} {stream})

	;create lisp class
	(call 'lisp :create {stream, stream, stream} {lisp})
	(call 'obj :deref {stream})
	(vpif {lisp})
		;fill in lisp object tls
		(assign {lisp} {@sys/statics/statics.statics_sys_task_current_tcb->tk_node_lisp})
		;run lisp file
		(call 'str :create_from_file {&script->str_data} {file})
		(vpif {file})
			;REPL from file stream
			(call 'list :create nil {args})
			(call 'sstream :create {file} {stream})
			(call 'str :ref {script})
			(call 'list :push_back2 {args, stream, script})
			(call 'lisp :lisp_repl {lisp, args} {_, value})
			(call 'list :clear {args})
			(vpif (cat {value->obj_vtable = @} (f-path 'error :vtable)))
			(vp-label 'error)
				;error in repl
				(call 'obj :print {value, lisp->lisp_stderr})
				(call 'stream :write_char {lisp->lisp_stderr, +char_lf})
				(call 'stream :flush {lisp->lisp_stderr})
			(else)
				;do we have a main ?
				(call 'view :get_prop {lisp->lisp_environment, static_sym_main} {_, stream})
				(breakifnot {stream})
				(call 'obj :deref {value})
				(call 'lisp :repl_apply {lisp, args, stream} {_, value})
				(gotoif {value->obj_vtable = @class/error/vtable} 'error)
			(endif)
			(call 'list :deref {args})
			(call 'obj :deref {value})
		(endif)
		(call 'lisp :deref {lisp})
	(endif)
	(call 'str :deref {script})

	;flush interned symbols, nums and mem blocks
	(fn-bind 'sys/statics/statics r0)
	(call 'hset :flush '((r0 statics_sym_intern)))
	(fn-bind 'sys/statics/statics r0)
	(call 'hset :flush '((r0 statics_num_intern)))
	(call 'sys_mem :collect)

	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/lisp/lisp_timeslice)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'lisp :lisp_timeslice '(r3 r4))

	(call 'sys_pii :time nil '(r0))
	(assign '((r3 lisp_then)) '(r1))
	(vp-sub-rr r0 r1)
	(vpif '(r1 < -1000))
		(assign '(r0) '((r3 lisp_then)))
		(call 'sys_task :sleep '(0))
	(endif)
	(class/obj/ref r4 r1)

	(exit 'lisp :lisp_timeslice '(r3 r4))
	(vp-ret)

(def-func-end)
