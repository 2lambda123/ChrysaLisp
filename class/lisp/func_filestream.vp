(include 'sys/func.inc)
(include 'sys/string/class.inc)
(include 'class/stream_str/class.inc)
(include 'class/string/class.inc)
(include 'class/symbol/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_filestream)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)

	(push-scope)
	(entry 'lisp 'func_filestream {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_first {args} {_, value})
	(call 'sys_string 'compare {&value->string_data, "stdin"})
	(vpif (list (method-output 'sys_string 'compare 0) '== 0))
		(call 'obj 'ref {this->lisp_stdin} {value})
		(goto 'funcexit)
	(endif)
	(call 'sys_string 'compare {&value->string_data, "stdout"})
	(vpif (list (method-output 'sys_string 'compare 0) '== 0))
		(call 'obj 'ref {this->lisp_stdout} {value})
		(goto 'funcexit)
	(endif)
	(call 'sys_string 'compare {&value->string_data, "stderr"})
	(vpif (list (method-output 'sys_string 'compare 0) '== 0))
		(call 'obj 'ref {this->lisp_stderr} {value})
		(goto 'funcexit)
	(endif)
	(call 'string 'create_from_file {&value->string_data} {value})
	(vpif {value})
		(call 'stream_str 'create {value} {value})
	(else)
		(call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

(vp-label 'funcexit)
	(exit 'lisp 'func_filestream {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(file-stream path)", error_msg_wrong_types, args})
	(signature 'sig 'string))

	(pop-scope-syms)

(def-func-end)
