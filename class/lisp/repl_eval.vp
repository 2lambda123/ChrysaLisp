(include 'sys/func.inc)
(include 'class/sym/class.inc)
(include 'class/func/class.inc)
(include 'class/hmap/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'repl_eval)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = form object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this 'form 'value 'func 'args)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'lisp 'repl_eval '(r0 r1))

	;evaluate based on type
	(vp-cpy-ir r1 obj_vtable r2)
	(f-bind 'sym 'vtable r3)
	(f-bind 'vector 'vtable r4)
	(switch)
	(vpcase '(r2 = r3))
		;eval to symbol value
		(vp-cpy-ri r0 rsp local_this)
		(vp-cpy-ri r1 rsp local_form)
		(call 'hmap 'get '((r0 lisp_environment) r1) '(_ r1))
		(errorif '(r1 = 0) 'error2)
		(vp-cpy-ir rsp local_this r0)
		(break)
	(vpcase '(r2 = r4))
		;apply function, eval args if needed
		(vp-cpy-ri r0 rsp local_this)
		(vp-cpy-ri r1 rsp local_form)

	(errorcases
		(class/array/get_length r1 r2)
		(gotoif '(r2 = 0) 'error1))

		(class/array/get_begin r1 r1)
		(call 'lisp 'repl_eval '(r0 (r1 0)) '(r0 r1))
		(vp-cpy-ir r1 obj_vtable r2)

	(errorcases
		(f-bind 'error 'vtable r3)
		(gotoif '(r2 = r3) 'funcexit))

		(vp-cpy-ri r1 rsp local_func)
		(f-bind 'func 'vtable r3)
		(switch)
		(vpcase '(r2 = r3))
			(class/num/get_value r1 r2)
			(vp-and-cr 7 r2)
			(gotoif '(r2 = 0) 'args_eval)
			(call 'lisp 'repl_apply '(r0 (rsp local_form) r1) '(_ (rsp local_value)))
			(break)
		(default)
		(vp-label 'args_eval)
			(vp-cpy-ir rsp local_form r0)
			(d-call 'vector 'slice '(r0 1 (r0 array_length ui)) '(_ (rsp local_args)))
			(call 'lisp 'repl_eval_list '((rsp local_this) (rsp local_args)) '(_ r1))

		(errorcases
			(vp-cpy-ir r1 obj_vtable r2)
			(f-bind 'error 'vtable r3)
			(vp-cpy-ri r1 rsp local_value)
			(gotoif '(r2 = r3) 'error))

			(call 'obj 'deref '(r1))
			(call 'lisp 'repl_apply '((rsp local_this) (rsp local_args) (rsp local_func)) '(_ (rsp local_value)))
		(vp-label 'error)
			(call 'obj 'deref '((rsp local_args)))
		(endswitch)
		(call 'obj 'deref '((rsp local_func)))
		(vp-cpy-ir rsp local_this r0)
		(vp-cpy-ir rsp local_value r1)
		(break)
	(default)
		;eval to self
		(class/obj/ref r1 r2)
	(endswitch)

(vp-label 'funcexit)
	(exit 'lisp 'repl_eval '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error1)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_form r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(eval form [env])" error_msg_not_a_lambda r3))
(vp-label 'error2)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_form r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(eval form [env])" error_msg_symbol_not_bound r3)))

(def-func-end)
