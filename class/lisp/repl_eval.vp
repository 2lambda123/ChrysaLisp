(include 'sys/func.inc)
(include 'class/symbol/class.inc)
(include 'class/function/class.inc)
(include 'class/hash_map/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'repl_eval)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = form object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'form 'value 'func 'args)

	(push-scope)
	(entry 'lisp 'repl_eval {this, form})

	;evaluate based on type
	(assign {form->obj_vtable} {func})
	(switch)
	(case (cat {func == @} (f-path 'symbol 'vtable)))
		;eval to symbol value
		(call 'hash_map 'get {this->lisp_environment, form} {_, value})
		(errorifnot {value} 'error2)
		(break)
	(case (cat {func == @} (f-path 'vector 'vtable)))
		;apply function, eval args if needed
		(errorifnot {form->array_length} 'error1)
		(call 'vector 'get_first {form} {_, func})
		(call 'lisp 'repl_eval {this, func} {_, value})
		(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'funcexit)
		(assign {value} {func})
		(switch)
		(case (cat {func->obj_vtable == @} (f-path 'function 'vtable)))
			(gotoifnot {func->integer_value & 7} 'args_eval)
			(call 'lisp 'repl_apply {this, form, func} {_, value})
			(break)
		(default)
		(vp-label 'args_eval)
			(d-call 'vector 'slice {form, 1, form->array_length} {_, args})
			(call 'lisp 'repl_eval_list {this, args} {_, value})
			(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'error)
			(call 'obj 'deref {value})
			(call 'lisp 'repl_apply {this, args, func} {_, value})
		(vp-label 'error)
			(call 'obj 'deref {args})
		(endswitch)
		(call 'obj 'deref {func})
		(break)
	(default)
		;eval to self
		(call 'obj 'ref {form} {value})
	(endswitch)

(vp-label 'funcexit)
	(exit 'lisp 'repl_eval {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(lambda ([arg ...]) body)", error_msg_not_a_lambda, form})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(eval form [env])", error_msg_symbol_not_bound, form}))

	(pop-scope-syms)

(def-func-end)
