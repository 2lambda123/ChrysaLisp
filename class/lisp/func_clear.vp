(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_clear)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(pptr 'iter_begin 'iter_end)

	(vp-def (r_value r_iter_begin r_iter_end r_this))

	(push-scope)
	(entry 'lisp 'func_clear {this, args})

(errorcases
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'array 'vtable) {, -1}))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(call 'vector 'get_iters {args} (list '_ r_iter_begin r_iter_end))
	(loop-start)
		(assign (list r_iter_begin) {iter_begin})
		(call 'array 'clear `((,r_iter_begin 0)) (list r_value))
		(assign {iter_begin, iter_end} (list r_iter_begin r_iter_end))
		(vp-add-cr ptr_size r_iter_begin)
	(loop-until (list r_iter_begin '== r_iter_end))
	(call 'obj 'ref (list r_value) (list r_value))
	(assign {this} (list r_this))

	(exit 'lisp 'func_clear (list r_this r_value))
	(return)

(errorcases
(vp-label 'error)
	(chain 'lisp 'repl_error {this, "(clear array ...)", error_msg_wrong_types, args}))

	(pop-scope-syms)

(def-func-end)
