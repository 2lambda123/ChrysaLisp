(include 'sys/func.inc)
(include 'class/integer/class.inc)
(include 'class/hash_map/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_some)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'mode)
	(union
		'(ptr 'lists)
		'(ptr 'func)
		'(ptr 'type))
	(pptr 'iter 'iter_begin 'iter_end 'params)
	(int 'start 'end)
	(union
		'(int 'dir)
		'(uint 'seq_length))
	(uint 'length)

	(push-scope)
	(entry 'lisp 'func_some {this, args})
	(call 'lisp 'env_push {this})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 5} 'error1)
	(call 'vector 'get_begin {args} {_, params})
	(assign {params[ptr_size * 4]} {lists})
	(errorif (cat {lists->obj_vtable != @} (f-path 'vector 'vtable)) 'error2)

	(assign {1000000} {length})
	(call 'vector 'get_iters {lists} {_, iter_begin, iter_end})
	(assign {iter_begin} {iter})
	(loop-while {iter != iter_end})
		(assign {*iter} {value})
		(call 'obj 'inst_of (cat {value, @} (f-path 'sequence 'vtable)))
		(errorif (list (method-output 'obj 'inst_of 1) '== 0) 'error3)
		(call 'sequence 'get_length {value} {_, seq_length})
		(vpif {seq_length < length})
			(assign {seq_length} {length})
		(endif)
		(assign {iter + ptr_size} {iter})
	(loop-end)

	(call 'obj 'ref {this->lisp_sym_nil} {value})

	(vpif {length != 1000000})
		(assign {0} {start})
		(assign {params[ptr_size * 0]} {type})
		(vpif {type != this->lisp_sym_nil})
			(errorif (cat {type->obj_vtable != @} (f-path 'integer 'vtable)) 'error4)
			(call 'integer 'get_value {type} {_, start})
		(endif)
		(assign {length} {end})
		(assign {params[ptr_size * 1]} {type})
		(vpif {type != this->lisp_sym_nil})
			(errorif (cat {type->obj_vtable != @} (f-path 'integer 'vtable)) 'error4)
			(call 'integer 'get_value {type} {_, end})
		(endif)
		(vpif {start < 0})
			(assign {length + start + 1} {start})
		(endif)
		(vpif {end < 0})
			(assign {length + end + 1} {end})
		(endif)
		(errorif {start < 0 || start > length || end < 0 || end > length} 'error4)
		(assign {1} {dir})
		(vpif {start > end})
			(assign {-1, start - 1, end - 1} {dir, start, end})
		(endif)

		(assign {params[ptr_size * 2]} {mode})
		(assign {params[ptr_size * 3]} {func})
		(call 'vector 'create nil {params})
		(loop-while {start != end})
			(call 'obj 'deref {value})

			(assign {iter_begin} {iter})
			(loop-start)
				(call 'sequence 'ref_element {*iter, start} {_, value})
				(call 'vector 'push_back {params, value})
			(loop-until {(iter + ptr_size => iter) == iter_end})

			(call 'integer 'create {start} {value})
			(call 'hash_map 'insert {this->lisp_environment, this->lisp_sym_underscore, value})
			(call 'obj 'deref {value})

			(call 'lisp 'repl_apply {this, params, func} {_, value})
			(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'error5)
			(breakif {mode != this->lisp_sym_nil && value != this->lisp_sym_nil})
			(breakif {mode == this->lisp_sym_nil && value == this->lisp_sym_nil})
			(d-call 'vector 'clear {params})
			(assign {start + dir} {start})
		(loop-end)
		(call 'vector 'deref {params})
	(endif)

(vp-label 'funcexit)
	(call 'lisp 'env_pop {this})
	(exit 'lisp 'func_some {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(some! start|nil end|nil mode lambda (seq ...))", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'funcexit)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(some! start|nil end|nil mode lambda (seq ...))", error_msg_not_a_list, args} {_, value})
	(goto 'funcexit)
(vp-label 'error3)
	(call 'lisp 'repl_error {this, "(some! start|nil end|nil mode lambda (seq ...))", error_msg_not_a_sequence, args} {_, value})
	(goto 'funcexit)
(vp-label 'error4)
	(call 'lisp 'repl_error {this, "(some! start|nil end|nil mode lambda (seq ...))", error_msg_not_valid_index, args} {_, value})
	(goto 'funcexit)
(vp-label 'error5)
	(call 'vector 'deref {params})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
