(include 'sys/func.inc)
(include 'class/hmap/class.inc)
(include 'class/sym/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'env_bind)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = vars list object (ptr)
	;r2 = vals sequence object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'vars 'vals 'symbol 'value 'args)
	(uint 'index_vars 'index_vals 'len_vars 'len_vals 'state)

	(push-scope)
	(entry 'lisp 'env_bind {this, vars, vals})

(errorcases
	(gotoif (cat {vars->obj_vtable != @} (f-path 'vector 'vtable)) 'error1)
	(call 'obj 'inst_of (cat {vals, @} (f-path 'seq 'vtable)))
	(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))

	(assign {0 => index_vars => index_vals} {state})
	(call 'obj 'ref {this->lisp_sym_nil} {value})
	(d-call 'vector 'get_length {vars} {_, len_vars})
	(call 'seq 'get_length {vals} {_, len_vals})
	(loop-while {index_vars != len_vars})
		;next symbol and state
		(vp-def (r_this r_state r_symbol r_index_vars r_len_vars r_rest r_optional))
		(call 'vector 'get_element {vars, index_vars} (list '_ r_symbol))
		(assign {this, index_vars, len_vars, state} (list r_this r_index_vars r_len_vars r_state))
		(vp-cpy-ir r_this lisp_sym_rest r_rest)
		(vp-cpy-ir r_this lisp_sym_optional r_optional)
		(vpif (list r_symbol '== r_rest))
			(vp-cpy-cr 1 r_state)
			(vp-add-cr 1 r_index_vars)
		(elseif (list r_symbol '== r_optional))
			(vp-cpy-cr 2 r_state)
			(vp-add-cr 1 r_index_vars)
		(endif)
		(breakif (list r_index_vars '== r_len_vars))
		(assign (list r_index_vars r_state) {index_vars, state})

		(call 'obj 'deref {value})
		(call 'vector 'get_element {vars, index_vars} {_, symbol})
		(vpif (cat {symbol->obj_vtable == @} (f-path 'sym 'vtable)))
			;standard symbol
			(vp-def (r_vals r_index_vals r_len_vals r_value r_index_vars r_len_vars r_state))
			(assign {vals, index_vals, len_vals, state} (list r_vals r_index_vals r_len_vals r_state))
			(vpif (list r_state '== 1))
				;rest
				(call 'seq 'slice (list r_vals r_index_vals r_len_vals) (list '_ r_value))
				(assign {len_vals} (list r_index_vals))
			(elseif (list r_state '== 2))
				;optional
				(gotoif (list r_index_vals '!= r_len_vals) 'normal)
				(call 'obj 'ref {this->lisp_sym_nil} (list r_value))
				(assign {index_vals} (list r_index_vals))
			(else)
				;normal
				(errorif (list r_index_vals '== r_len_vals) 'error)
			(vp-label 'normal)
				(call 'seq 'ref_element (list r_vals r_index_vals) (list '_ r_value))
				(assign {index_vals} (list r_index_vals))
				(vp-add-cr 1 r_index_vals)
			(endif)
			(assign {index_vars} (list r_index_vars))
			(vp-add-cr 1 r_index_vars)
			(assign (list r_index_vars r_index_vals r_value) {index_vars, index_vals, value})
			(call 'hmap 'insert {this->lisp_environment, symbol, value})
		(else)
			;destructureing ?
			(errorif (cat {symbol->obj_vtable != @} (f-path 'vector 'vtable)) 'error3)
			(errorif {index_vals == len_vals} 'error)
			(call 'seq 'ref_element {vals, index_vals} {_, args})
			(assign {index_vars + 1, index_vals + 1} {index_vars, index_vals})
			(call 'lisp 'env_bind {this, symbol, args} {_, value})
			(call 'obj 'deref {args})
			(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'funcexit)
		(endif)
	(loop-end)
	(errorif {index_vals != len_vals} 'error4)

(vp-label 'funcexit)
	(exit 'lisp 'env_bind {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(bind (param ...) seq)", error_msg_not_a_list, vars})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(bind (param ...) seq)", error_msg_not_a_sequence, vals})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(bind (param ...) seq)", error_msg_not_a_symbol, vars})
(vp-label 'error4)
	(call 'obj 'deref {value})
(vp-label 'error)
	(jump 'lisp 'repl_error {this, "(bind (param ...) seq)", error_msg_wrong_num_of_args, vals}))

	(pop-scope-syms)

(def-func-end)
