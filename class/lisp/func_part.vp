(include 'sys/func.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_part)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(def-struct 'pdata)
		(ptr 'this)
		(ptr 'func)
		(ptr 'params)
	(def-struct-end)

	(ptr 'this 'func)
	(union
		'(ptr 'args)
		'(ptr 'params))

	(ptr 'value 'list)
	(pptr 'iter_begin 'liter 'hiter)
	(int 'start 'end)
(errorcases
	(int 'length))

	(push-scope)
	(entry 'lisp 'func_part {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 4})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0]} {func})
	(assign {iter_begin[ptr_size]} {list})
	(call 'integer 'get_value {iter_begin[ptr_size * 2]} {_, start})
	(call 'integer 'get_value {iter_begin[ptr_size * 3]} {_, end})
(errorcases
	(d-call 'vector 'get_length {list} {_, length})
	(gotoif {start < 0 || start >= end || end > length} 'error2))

	(call 'vector 'create nil {params})
	(call 'vector 'get_iter {list, start} {_, liter})
	(call 'vector 'get_iter {list, end} {_, hiter})
	(call 'vector 'partition {list, liter, hiter, $callback, &this} {_, liter})
	(call 'vector 'get_begin {list} {_, iter_begin})
	(call 'integer 'create {(liter - iter_begin) >> 3} {value})
	(call 'vector 'deref {params})
	(call 'sys_task 'yield)

	(exit 'lisp 'func_part {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(chain 'lisp 'repl_error {this, "(partition lambda list start end)", error_msg_wrong_types, args})
(vp-label 'error2)
	(chain 'lisp 'repl_error {this, "(partition lambda list start end)", error_msg_not_valid_index, args})
	(signature 'sig 'obj 'vector 'integer 'integer))

	(pop-scope-syms)

(vp-label 'callback)
	(ptr 'pdata)
	(union
		'(pptr 'liter)
		'(ptr 'value))
	(union
		'(pptr 'hiter)
		'(int 'result))

	(push-scope)
	(entry 'array 'sort_callback {pdata, liter, hiter})

	(call 'obj 'ref {*liter} {liter})
	(call 'obj 'ref {*hiter} {hiter})
	(d-call 'vector 'clear {pdata->pdata_params})
	(call 'vector 'push_back {pdata->pdata_params, liter})
	(call 'vector 'push_back {pdata->pdata_params, hiter})
	(call 'lisp 'repl_apply {pdata->pdata_this, pdata->pdata_params, pdata->pdata_func} {_, value})
	(assign {0} {result})
	(vpif (cat {value->obj_vtable == @} (f-path 'integer 'vtable)))
		(call 'integer 'get_value {value} {_, result})
	(endif)
	(call 'obj 'deref {value})

	(exit 'array 'sort_callback {result})
	(pop-scope)
	(return)

(def-func-end)
