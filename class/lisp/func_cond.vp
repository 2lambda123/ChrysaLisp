(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_cond)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args)
	(pptr 'iter_begin 'iter_end 'clause_iter_begin 'clause_iter_end)

	(vp-def (this clause_iter_begin clause_iter_end value iter_begin iter_end cmp vtable))

	(push-scope)
	(entry 'lisp 'func_cond {this, args})

	(call 'vector 'get_both {args} (list '_ iter_begin iter_end))
	(assign (list iter_end) {iter_end})
	(loop-start)
		(vp-add-cr ptr_size iter_begin)
		(breakif (list iter_begin '== iter_end))
		(assign (list iter_begin) {iter_begin})
		(vp-cpy-ir iter_begin 0 value)
	(errorcases
		(assign `((,value obj_vtable) (@ ,(f-path 'vector 'vtable))) (list vtable cmp))
		(gotoif (list vtable '!= cmp) 'error2))
		(call 'vector 'get_both (list value) (list '_ clause_iter_begin clause_iter_end))
		(errorif (list clause_iter_begin '== clause_iter_end) 'error1)
		(assign (list clause_iter_begin clause_iter_end) {clause_iter_begin, clause_iter_end})
		(assign {this} (list this))
		(call 'lisp 'repl_eval `(,this (,clause_iter_begin 0)) (list this value))
		(vp-cpy-ir this lisp_sym_nil cmp)
		(vpif (list value '!= cmp))
		(errorcases
			(assign `((,value obj_vtable) (@ ,(f-path 'error 'vtable))) (list vtable cmp))
			(gotoif (list vtable '== cmp) 'funcexit1))
			(loop-start)
				(assign {clause_iter_begin, clause_iter_end} (list clause_iter_begin clause_iter_end))
				(vp-add-cr ptr_size clause_iter_begin)
				(gotoif (list clause_iter_begin '== clause_iter_end) 'funcexit)
				(assign (list clause_iter_begin) {clause_iter_begin})
				(call 'obj 'deref (list value))
				(call 'lisp 'repl_eval {this, *clause_iter_begin} (list this value))
			(errorcases
				(assign `((,value obj_vtable) (@ ,(f-path 'error 'vtable))) (list vtable cmp))
				(gotoif (list vtable '== cmp) 'funcexit1))
			(loop-end)
		(endif)
		(call 'obj 'deref (list value))
		(assign {iter_begin, iter_end} (list iter_begin iter_end))
	(loop-end)
	(call 'obj 'ref {this->lisp_sym_nil} (list value))

(vp-label 'funcexit)
	(assign {this} (list this))
(vp-label 'funcexit1)
	(exit 'lisp 'func_cond (list this value))
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(cond [(tst body)] ...)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(cond [(tst body)] ...)", error_msg_not_a_list, args}))

	(pop-scope-syms)

(def-func-end)
