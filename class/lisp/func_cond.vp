(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_cond)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(pptr 'iter_begin 'iter_end 'clause_iter_begin 'clause_iter_end)

	(push-scope)
	(entry 'lisp 'func_cond {this, args})

	(call 'vector 'get_iters {args} {_, iter_begin, iter_end})
	(loop-while {(iter_begin + ptr_size => iter_begin) != iter_end})
		(assign {*iter_begin} {value})
		(errorif (cat {value->obj_vtable != @} (f-path 'vector 'vtable)) 'error2)
		(call 'vector 'get_iters {value} {_, clause_iter_begin, clause_iter_end})
		(errorif {clause_iter_begin == clause_iter_end} 'error1)
		(call 'lisp 'repl_eval {this, *clause_iter_begin} {_, value})
		(vpif {value != this->lisp_sym_nil})
			(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'funcexit)
			(call 'obj 'deref {value})
			(call 'obj 'ref {this->lisp_sym_nil} {value})
			(loop-start)
				(gotoif {(clause_iter_begin + ptr_size => clause_iter_begin) == clause_iter_end} 'funcexit)
				(call 'obj 'deref {value})
				(call 'lisp 'repl_eval {this, *clause_iter_begin} {_, value})
				(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'funcexit)
			(loop-end)
		(endif)
		(call 'obj 'deref {value})
	(loop-end)
	(call 'obj 'ref {this->lisp_sym_nil} {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_cond {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(cond (tst body) ...)", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'funcexit)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(cond (tst body) ...)", error_msg_not_a_list, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
