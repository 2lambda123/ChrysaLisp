(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_code)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (this args len value iter_begin width index) '(r6 r7 r8))

	(entry 'lisp 'func_code (list this args))

	(vp-cpy-ir-ui args array_length len)

(errorcases
	(errorif (list len '< 1) 'error1)
	(errorif (list len '> 3) 'error1)
	(call 'lisp 'env_args_type (list args '($ sig) len))
	(errorif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir args array_array iter_begin)
	(vp-cpy-cr 1 width)
	(vp-xor-rr index index)
	(vp-cpy-ir iter_begin 0 value)
	(vpif (list len '> 1))
		(vp-cpy-ir iter_begin ptr_size width)
		(vp-cpy-ir width integer_value width)
		(vp-sub-cr 1 width)
		(vp-and-cr (dec long_size) width)
		(vp-add-cr 1 width)
	(endif)
	(vpif (list len '> 2))
		(vp-cpy-ir iter_begin (mul 2 ptr_size) index)
		(vp-cpy-ir index integer_value index)
	(endif)

	(vp-cpy-ir-ui value string_length len)
	(vpif (list index '< 0))
		(vp-add-rr len index)
		(vp-add-cr 1 index)
	(endif)

(errorcases
	(errorif (list index '< 0) 'error1)
	(vp-sub-rr width len)
	(errorif (list index '> len) 'error1))

	(vp-add-cr string_data value)
	(vp-xor-rr len len)
	(vp-add-rr index value)
	(vp-push len)
	(call 'sys_mem 'copy (list value rsp width))
	(vp-pop value)
	(call 'integer 'create (list value) (list value))

	(exit 'lisp 'func_code (list this value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list this "(code str [width index])" error_msg_wrong_types args))
	(signature 'sig 'string 'integer 'integer))

(def-func-end)
