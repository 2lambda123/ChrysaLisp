(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_code)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_len r_value r_iter_begin r_width r_index) '(r6 r7 r8))

	(entry 'lisp 'func_code (list r_this r_args))

	(vp-cpy-ir-ui r_args array_length r_len)

(errorcases
	(gotoif (list r_len '< 1) 'error1)
	(gotoif (list r_len '> 3) 'error1)
	(call 'lisp 'env_args_type (list r_args '($ sig) r_len))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir r_args array_array r_iter_begin)
	(vp-cpy-cr 1 r_width)
	(vp-xor-rr r_index r_index)
	(vp-cpy-ir r_iter_begin 0 r_value)
	(vpif (list r_len '> 1))
		(vp-cpy-ir r_iter_begin ptr_size r_width)
		(vp-cpy-ir r_width integer_value r_width)
		(vp-sub-cr 1 r_width)
		(vp-and-cr (dec long_size) r_width)
		(vp-add-cr 1 r_width)
	(endif)
	(vpif (list r_len '> 2))
		(vp-cpy-ir r_iter_begin (mul 2 ptr_size) r_index)
		(vp-cpy-ir r_index integer_value r_index)
	(endif)

	(vp-cpy-ir-ui r_value string_length r_len)
	(vpif (list r_index '< 0))
		(vp-add-rr r_len r_index)
		(vp-add-cr 1 r_index)
	(endif)

(errorcases
	(gotoif (list r_index '< 0) 'error1)
	(vp-sub-rr r_width r_len)
	(gotoif (list r_index '> r_len) 'error1))

	(vp-add-cr string_data r_value)
	(vp-xor-rr r_len r_len)
	(vp-add-rr r_index r_value)
	(vp-push r_len)
	(call 'sys_mem 'copy (list r_value rsp r_width))
	(vp-pop r_value)
	(call 'integer 'create (list r_value) (list r_value))

	(exit 'lisp 'func_code (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(code str [width index])" error_msg_wrong_types r_args))
	(signature 'sig 'string 'integer 'integer))

(def-func-end)
