(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_find)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'seq 'elem)
	(int 'length)

	(push-scope)
	(entry 'lisp 'func_find {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 2} 'error1)
	(call 'vector 'get_first {args} {_, elem})
	(call 'vector 'get_second {args} {_, seq})
	(vpif (cat {seq->obj_vtable == @} (f-path 'string 'vtable)))
		(errorif (cat {elem->obj_vtable != @} (f-path 'string 'vtable)) 'error2)
		(call 'string 'find {seq, ubyte (elem->string_data)} {_, length})
		(goto 'ok)
	(else)
		(errorif (cat {seq->obj_vtable != @} (f-path 'vector 'vtable)) 'error2)
		(call 'vector 'find {seq, elem} {_, length})
	(vp-label 'ok)
		(vpif {length == -1})
			(call 'obj 'ref {this->lisp_sym_nil} {value})
		(else)
			(call 'integer 'create {length} {value})
		(endif)
	(endif)

	(exit 'lisp 'func_find {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(find elem seq)", error_msg_wrong_num_of_args, args})
	(return)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(find elem seq)", error_msg_not_a_sequence, args})
	(return))

	(pop-scope-syms)

(def-func-end)
