(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_find)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_args r_value r_length r_vtable r_cmp r_seq r_elem r_this))

	(entry 'lisp 'func_find (list r_this r_args))

	(d-call 'vector 'get_length (list r_args) (list r_args r_length))
	(errorif (list r_length '!= 2) 'error1)
	(call 'vector 'get_first (list r_args) (list r_args r_elem))
	(call 'vector 'get_second (list r_args) (list r_args r_seq))
	(assign `((,r_seq obj_vtable) (@ ,(f-path 'string 'vtable))) (list r_vtable r_cmp))
	(switch)
	(case (list r_vtable '== r_cmp))
		(vp-cpy-ir r_elem obj_vtable r_vtable)
		(errorif (list r_vtable '!= r_cmp) 'error2)
		(call 'string 'find `(,r_seq (,r_elem string_data ub)) (list '_ r_length))
		(goto 'ok)
	(default)
		(assign `((@ ,(f-path 'vector 'vtable))) (list r_cmp))
		(errorif (list r_vtable '!= r_cmp) 'error2)
		(call 'vector 'find (list r_seq r_elem) (list '_ r_length))
	(vp-label 'ok)
		(vpif (list r_length '== -1))
			(call 'obj 'ref `((,r_this lisp_sym_nil)) (list r_value))
		(else)
			(call 'integer 'create (list r_length) (list r_value))
		(endif)
	(endswitch)

	(exit 'lisp 'func_find (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(find elem seq)" error_msg_wrong_num_of_args r_args))
(vp-label 'error2)
	(jump 'lisp 'repl_error (list r_this "(find elem seq)" error_msg_not_a_sequence r_args)))

(def-func-end)
