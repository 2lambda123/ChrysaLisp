(include 'sys/func.inc)
(include 'class/seq/class.inc)
(include 'class/num/class.inc)
(include 'class/hmap/class.inc)
(include 'class/str/class.inc)
(include 'gui/points/class.inc)
(include 'class/lisp/class.inc)

(def-method 'seq 'lisp_length)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'seq 'lisp_length '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 == 0) 'error1))

	(vp-push r0)
	(class/array/bind_args r1 '(r0))
	(call 'seq 'get_length '(r0) '(_ r0))
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0)

	(exit 'seq 'lisp_length '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(length seq)" error_msg_wrong_types r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq 'lisp_elem)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'value)
	(int 'length 'index)
	(union
		'(pptr 'iter_begin)
		'(ptr 'seq))

	(push-scope)
	(entry 'seq 'lisp_elem {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} '(r2))
	(gotoif '(r2 == 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {value, seq})
	(call 'num 'get_value {value} {_, index})
	(call 'seq 'get_length {seq} {_, length})
	(vpif {index < 0})
		(assign {length + index + 1} {index})
	(endif)
	(errorif {index < 0 || index >= length} 'error2)
	(call 'seq 'ref_element {seq, index} {_, value})

	(exit 'seq 'lisp_elem {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(elem index seq)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(elem index seq)", error_msg_not_valid_index, args})
	(signature '(num seq)))

	(pop-scope-syms)

(def-func-end)

(def-method 'seq 'lisp_slice)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'slc 'value1 'value2)
	(union
		'(pptr 'iter_begin)
		'(int 'length 'start 'end))

	(push-scope)
	(entry 'seq 'lisp_slice {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 3} '(r2))
	(gotoif '(r2 == 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size], iter_begin[ptr_size * 2]} {value1, value2, slc})

	(call 'num 'get_value {value1} {_, start})
	(call 'num 'get_value {value2} {_, end})
	(call 'seq 'get_length {slc} {_, length})
	(vpif {start < 0})
		(assign {length + start + 1} {start})
	(endif)
	(vpif {end < 0})
		(assign {length + end + 1} {end})
	(endif)
	(errorif {start > end || start < 0 || end > length} 'error2)
	(call 'seq 'slice {slc, start, end} {_, value1})

	(exit 'seq 'lisp_slice {this, value1})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(slice start end seq)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(slice start end seq)", error_msg_not_valid_index, args})
	(signature '(num num seq)))

	(pop-scope-syms)

(def-func-end)

(def-method 'seq 'lisp_each)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'value 'accum)
	(union
		'(ptr 'lists)
		'(ptr 'func))
	(pptr 'iter 'iter_begin 'iter_end 'params)
	(int 'start 'end)
	(union
		'(int 'dir)
		'(uint 'seq_length))
	(uint 'length)

	(push-scope)
	(entry 'seq 'lisp_each {this, args})
	(call 'lisp 'env_push {this})

(errorcases
	(call 'lisp 'env_args_type '{args, $sig, 5} '(r2))
	(gotoif '(r2 == 0) 'error1))

	(call 'vector 'get_begin {args} {_, params})
	(assign {params[ptr_size * 4]} {lists})
	(assign {max_int} {length})
	(call 'vector 'get_both {lists} {_, iter_begin, iter_end})
	(assign {iter_begin} {iter})
	(loop-while {iter != iter_end})
		(assign {*iter} {value})
		(call 'obj 'inst_of (cat {value, @} (f-path 'seq 'vtable)))
		(errorif `(,(method-output 'obj 'inst_of 1) == 0) 'error3)
		(call 'seq 'get_length {value} {_, seq_length})
		(vpif {seq_length < length})
			(assign {seq_length} {length})
		(endif)
		(assign {iter + ptr_size} {iter})
	(loop-end)

	(vpif {length != max_int})
		(call 'num 'get_value {params[ptr_size * 0]} {_, start})
		(call 'num 'get_value {params[ptr_size * 1]} {_, end})
		(vpif {start < 0})
			(assign {length + start + 1} {start})
		(endif)
		(vpif {end < 0})
			(assign {length + end + 1} {end})
		(endif)
		(errorif {start < 0 || start > length || end < 0 || end > length} 'error4)
		(assign {1} {dir})
		(vpif {start > end})
			(assign {-1, start - 1, end - 1} {dir, start, end})
		(endif)

		(assign {params[ptr_size * 2]} {accum})
		(assign {params[ptr_size * 3]} {func})
		(call 'vector 'create nil {params})
		(loop-while {start != end})
			(assign {iter_begin} {iter})
			(loop-start)
				(call 'seq 'ref_element {*iter, start} {_, value})
				(call 'vector 'push_back {params, value})
			(loop-until {(iter + ptr_size => iter) == iter_end})

			(call 'num 'create {start} {value})
			(call 'hmap 'insert {this->lisp_environment, this->lisp_sym_underscore, value})
			(call 'obj 'deref {value})

			(call 'lisp 'repl_apply {this, params, func} {_, value})
			(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'error5)
			(vpif {accum != this->lisp_sym_nil})
				(d-call 'vector 'clear {params})
				(call 'vector 'push_back {params, value})
				(call 'lisp 'repl_apply {this, params, accum} {_, value})
				(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'error5)
			(endif)
			(d-call 'vector 'clear {params})
			(call 'obj 'deref {value})
			(assign {start + dir} {start})
		(loop-end)
		(call 'vector 'deref {params})
	(endif)
	(call 'obj 'ref {this->lisp_sym_nil} {value})

(vp-label 'funcexit)
	(call 'lisp 'env_pop {this})
	(exit 'seq 'lisp_each {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(each! start end lambda|nil lambda (seq ...))", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'funcexit)
(vp-label 'error3)
	(call 'lisp 'repl_error {this, "(each! start end lambda|nil lambda (seq ...))", error_msg_not_a_sequence, args} {_, value})
	(goto 'funcexit)
(vp-label 'error4)
	(call 'lisp 'repl_error {this, "(each! start end lambda|nil lambda (seq ...))", error_msg_not_valid_index, args} {_, value})
	(goto 'funcexit)
(vp-label 'error5)
	(call 'vector 'deref {params})
	(goto 'funcexit)
	(signature '(num num obj obj vector)))

	(pop-scope-syms)

(def-func-end)

(def-method 'seq 'lisp_some)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'value 'mode)
	(union
		'(ptr 'lists)
		'(ptr 'func))
	(pptr 'iter 'iter_begin 'iter_end 'params)
	(int 'start 'end)
	(union
		'(int 'dir)
		'(uint 'seq_length))
	(uint 'length)

	(push-scope)
	(entry 'seq 'lisp_some {this, args})
	(call 'lisp 'env_push {this})

(errorcases
	(call 'lisp 'env_args_type '{args, $sig, 5} '(r2))
	(gotoif '(r2 == 0) 'error1))

	(call 'vector 'get_begin {args} {_, params})
	(assign {params[ptr_size * 4]} {lists})
	(assign {max_int} {length})
	(call 'vector 'get_both {lists} {_, iter_begin, iter_end})
	(assign {iter_begin} {iter})
	(loop-while {iter != iter_end})
		(assign {*iter} {value})
		(call 'obj 'inst_of (cat {value, @} (f-path 'seq 'vtable)))
		(errorif `(,(method-output 'obj 'inst_of 1) == 0) 'error3)
		(call 'seq 'get_length {value} {_, seq_length})
		(vpif {seq_length < length})
			(assign {seq_length} {length})
		(endif)
		(assign {iter + ptr_size} {iter})
	(loop-end)

	(call 'obj 'ref {this->lisp_sym_nil} {value})

	(vpif {length != max_int})
		(call 'num 'get_value {params[ptr_size * 0]} {_, start})
		(call 'num 'get_value {params[ptr_size * 1]} {_, end})
		(vpif {start < 0})
			(assign {length + start + 1} {start})
		(endif)
		(vpif {end < 0})
			(assign {length + end + 1} {end})
		(endif)
		(errorif {start < 0 || start > length || end < 0 || end > length} 'error4)
		(assign {1} {dir})
		(vpif {start > end})
			(assign {-1, start - 1, end - 1} {dir, start, end})
		(endif)

		(assign {params[ptr_size * 2]} {mode})
		(assign {params[ptr_size * 3]} {func})
		(call 'vector 'create nil {params})
		(loop-while {start != end})
			(call 'obj 'deref {value})

			(assign {iter_begin} {iter})
			(loop-start)
				(call 'seq 'ref_element {*iter, start} {_, value})
				(call 'vector 'push_back {params, value})
			(loop-until {(iter + ptr_size => iter) == iter_end})

			(call 'num 'create {start} {value})
			(call 'hmap 'insert {this->lisp_environment, this->lisp_sym_underscore, value})
			(call 'obj 'deref {value})

			(call 'lisp 'repl_apply {this, params, func} {_, value})
			(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'funcexit1)
			(breakif {mode != this->lisp_sym_nil && value != this->lisp_sym_nil})
			(breakif {mode == this->lisp_sym_nil && value == this->lisp_sym_nil})
			(d-call 'vector 'clear {params})
			(assign {start + dir} {start})
		(loop-end)
	(vp-label 'funcexit1)
		(call 'vector 'deref {params})
	(endif)

(vp-label 'funcexit)
	(call 'lisp 'env_pop {this})
	(exit 'seq 'lisp_some {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(some! start end mode lambda (seq ...))", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'funcexit)
(vp-label 'error3)
	(call 'lisp 'repl_error {this, "(some! start end mode lambda (seq ...))", error_msg_not_a_sequence, args} {_, value})
	(goto 'funcexit)
(vp-label 'error4)
	(call 'lisp 'repl_error {this, "(some! start end mode lambda (seq ...))", error_msg_not_valid_index, args} {_, value})
	(goto 'funcexit)
	(signature '(num num obj obj vector)))

	(pop-scope-syms)

(def-func-end)

(def-method 'seq 'lisp_cat)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'seq 'lisp_cat '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type `(r1 (@ ,(f-path 'seq 'vtable)) -1) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-push r0)
	(class/array/bind_args r1 '(r0))
	(call 'seq 'cat '(r0 r1) '(r1))
	(vp-pop r0)

	(exit 'seq 'lisp_cat '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(cat seq ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'seq 'lisp_find)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(vp-def (args value len vtable cmp seq el this))

	(entry 'seq 'lisp_find (list this args))

	(d-call 'vector 'get_length (list args) (list args len))
	(errorif `(,len != 2) 'error1)
	(call 'vector 'get_first (list args) (list args el))
	(call 'vector 'get_second (list args) (list args seq))
	(assign `((,seq obj_vtable) (@ ,(f-path 'str 'vtable))) (list vtable cmp))
	(switch)
	(vpcase `(,vtable == ,cmp))
	(errorcases
		(vp-cpy-ir el obj_vtable vtable)
		(gotoif `(,vtable != ,cmp) 'error2))
		(call 'str 'find `(,seq (,el str_data ub)) (list '_ '_ len))
		(goto 'ok)
	(default)
	(errorcases
		(assign `((@ ,(f-path 'vector 'vtable))) (list cmp))
		(gotoif `(,vtable != ,cmp) 'error2))
		(call 'vector 'find (list seq el) (list '_ '_ len))
	(vp-label 'ok)
		(vpif `(,len == -1))
			(call 'obj 'ref `((,this lisp_sym_nil)) (list value))
		(else)
			(call 'num 'create (list len) (list value))
		(endif)
	(endswitch)

	(exit 'seq 'lisp_find (list this value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list this "(find elem seq)" error_msg_wrong_num_of_args args))
(vp-label 'error2)
	(jump 'lisp 'repl_error (list this "(find elem seq)" error_msg_not_a_sequence args)))

(def-func-end)
