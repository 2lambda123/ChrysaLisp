(include 'sys/func.inc)
(include 'class/hmap/class.inc)
(include 'class/sym/class.inc)
(include 'class/pair/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(defun defset (_ p)
	(def-struct 'local)
		(ptr 'this 'args 'env)
		(pptr 'iter_begin 'iter_end)
	(def-struct-end)
	(entry 'hmap _ '(r0 r1))
(errorcases
	(class/array/get_length r1 r2)
	(gotoif '(r2 < 3) 'error1)
	(vp-and-cr 1 r2)
	(gotoif '(r2 == 0) 'error1))
	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r1 rsp local_args)
	(class/array/get_both r1 r3 r2)
	(class/array/get_args r3 '(r0))
	(vp-add-cr ptr_size r3)
	(vp-cpy-ri r0 rsp local_env)
	(vp-cpy-ri r2 rsp local_iter_end)
(errorcases
	(call 'obj 'inst_of `(r0 (@ ,(f-path 'hmap 'vtable))))
	(gotoif '(r1 == 0) 'error2))
	(loop-start)
		(vp-cpy-ri r3 rsp local_iter_begin)
		(class/array/get_args r3 '(r1 r2))
	(errorcases
		(vp-cpy-ir r1 obj_vtable r3)
		(f-bind 'sym 'vtable r4)
		(gotoif '(r3 != r4) 'error3))
		(vp-cpy-ir rsp local_env r0)
		(exec p)
		(vp-cpy-ir rsp local_iter_begin r3)
		(vp-cpy-ir rsp local_iter_end r2)
		(vp-add-cr (mul ptr_size 2) r3)
	(loop-until '(r3 == r2))
	(vp-cpy-ir r2 (neg ptr_size) r1)
	(class/obj/ref r1 r2)
	(exit 'hmap _ '((rsp local_this) r1))
	(vp-free local_size)
	(vp-ret))

(def-method 'hmap 'lisp_def)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(defset 'lisp_def
		'(progn
			(call 'hmap 'insert '(r0 r1 r2))))

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(def env var val [var val] ...)" error_msg_wrong_num_of_args r1))
(vp-label 'error2)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(def env var val [var val] ...)" error_msg_not_an_environment r3))
(vp-label 'error3)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(def env var val [var val] ...)" error_msg_not_a_symbol r3)))

(def-func-end)

(def-method 'hmap 'lisp_set)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(defset 'lisp_set
		'(progn
			(call 'hmap 'set '(r0 r1 r2) '(_ r1))
			(errorif '(r1 == 0) 'error4)))

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(set env var val [var val] ...)" error_msg_wrong_num_of_args r1))
(vp-label 'error2)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(set env var val [var val] ...)" error_msg_not_an_environment r3))
(vp-label 'error3)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(set env var val [var val] ...)" error_msg_not_a_symbol r3))
(vp-label 'error4)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(set env var val [var val] ...)" error_msg_symbol_not_bound r3)))

(def-func-end)

(defun defsetq (_ p)
	(def-struct 'local)
		(ptr 'this 'args 'val)
		(pptr 'iter_begin 'iter_end)
	(def-struct-end)
	(entry 'hmap _ '(r0 r1))
(errorcases
	(class/array/get_length r1 r2)
	(gotoif '(r2 < 3) 'error1)
	(vp-and-cr 1 r2)
	(gotoif '(r2 == 0) 'error1))
	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r1 rsp local_args)
	(class/array/get_both r1 r1 r2)
	(vp-xor-rr r0 r0)
	(vp-add-cr ptr_size r1)
	(vp-cpy-ri r0 rsp local_val)
	(vp-cpy-ri r1 rsp local_iter_begin)
	(vp-cpy-ri r2 rsp local_iter_end)
	(loop-start)
		(call 'obj 'deref_if '((rsp local_val)))
		(vp-cpy-ir rsp local_iter_begin r1)
		(call 'lisp 'repl_eval '((rsp local_this) (r1 ptr_size)) '(r0 r1))
		(vp-cpy-ri r1 rsp local_val)
	(errorcases
		(vp-cpy-ir r1 obj_vtable r3)
		(f-bind 'error 'vtable r4)
		(breakif '(r3 == r4)))
		(vp-cpy-rr r1 r2)
		(vp-cpy-ir rsp local_iter_begin r1)
		(vp-cpy-ir r1 0 r1)
	(errorcases
		(vp-cpy-ir r1 obj_vtable r3)
		(f-bind 'sym 'vtable r4)
		(gotoif '(r3 != r4) 'error2))
		(vp-cpy-ir r0 lisp_environment r0)
		(exec p)
		(vp-cpy-ir rsp local_iter_begin r1)
		(vp-cpy-ir rsp local_iter_end r2)
		(vp-add-cr (mul ptr_size 2) r1)
		(vp-cpy-ri r1 rsp local_iter_begin)
	(loop-until '(r1 == r2))
	(exit 'hmap _ '((rsp local_this) (rsp local_val)))
	(vp-free local_size)
	(vp-ret))

(def-method 'hmap 'lisp_defq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(defsetq 'lisp_defq
		'(progn
			(call 'hmap 'insert '(r0 r1 r2))))

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(defq var val [var val] ...)" error_msg_wrong_num_of_args r1))
(vp-label 'error2)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(defq var val [var val] ...)" error_msg_not_a_symbol r3)))

(def-func-end)

(def-method 'hmap 'lisp_setq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(defsetq 'lisp_setq
		'(progn
			(call 'hmap 'set '(r0 r1 r2) '(_ r1))
			(errorif '(r1 == 0) 'error3)))

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(setq var val [var val] ...)" error_msg_wrong_num_of_args r1))
(vp-label 'error2)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(setq var val [var val] ...)" error_msg_not_a_symbol r3))
(vp-label 'error3)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(setq var val [var val] ...)" error_msg_symbol_not_bound r3)))

(def-func-end)

(def-method 'hmap 'lisp_defined)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'hmap 'lisp_defined '(r0 r1))

(errorcases
	(class/array/get_length r1 r2)
	(gotoif '(r2 != 1) 'error))

	(class/array/get_begin r1 r1)
	(vp-push r0)
	(call 'hmap 'search '((r0 lisp_environment) (r1 0)) '(_ r1 _))
	(vp-pop r0)
	(vpif '(r1 != 0))
		(vp-cpy-ir r1 0 r1)
		(class/pair/get_second r1 r1)
	(else)
		(vp-cpy-ir r0 lisp_sym_nil r1)
	(endif)
	(class/obj/ref r1 r2)

	(exit 'hmap 'lisp_defined '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(def? form)" error_msg_wrong_num_of_args r1)))

(def-func-end)

(def-method 'hmap 'lisp_env)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = environment hmap object (ptr)

	(entry 'hmap 'lisp_env '(r0 r1))

	(class/array/get_length r1 r2)
	(errorif '(r2 > 1) 'error1)
	(vpif '(r2 != 0))
		(class/array/bind_args r1 '(r1))
	(errorcases
		(vp-cpy-ir r1 obj_vtable r3)
		(f-bind 'num 'vtable r4)
		(gotoif '(r3 != r4) 'error2))
		(class/vector/cast_args '(r1) '(num))
		(errorif '(r1 == 0) 'error2)
		(vp-push r0)
		(vpif '(r1 > 0))
			(call 'hmap 'copy '((r0 lisp_environment) r1) '(r0 r1))
			(vp-push r1)
			(call 'obj 'deref '(r0))
			(vp-pop r1)
			(vp-pop r0)
			(vp-cpy-ri r1 r0 lisp_environment)
			(goto 'refenv)
		(endif)
		(call 'hmap 'create '(0 r1) '(r1))
		(vp-pop r0)
	(else)
		(vp-cpy-ir r0 lisp_environment r1)
	(vp-label 'refenv)
		(class/obj/ref r1 r2)
	(endif)

	(exit 'hmap 'lisp_env '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(env [num])" error_msg_wrong_num_of_args r1))
(vp-label 'error2)
	(jump 'lisp 'repl_error '(r0 "(env [num])" error_msg_not_a_number r1)))

(def-func-end)

(def-method 'hmap 'lisp_undef)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this 'args 'env)
		(pptr 'iter_begin 'iter_end)
	(def-struct-end)

	(entry 'hmap 'lisp_undef '(r0 r1))

(errorcases
	(class/array/get_length r1 r2)
	(gotoif '(r2 < 2) 'error1))

	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r1 rsp local_args)
	(class/array/get_both r1 r3 r2)
	(class/array/get_args r3 '(r0))
	(vp-add-cr ptr_size r3)
	(vp-cpy-ri r0 rsp local_env)
	(vp-cpy-ri r2 rsp local_iter_end)
(errorcases
	(call 'obj 'inst_of `(r0 (@ ,(f-path 'hmap 'vtable))))
	(gotoif '(r1 == 0) 'error2))
	(loop-start)
		(vp-cpy-ri r3 rsp local_iter_begin)
		(vp-cpy-ir r3 0 r1)
	(errorcases
		(vp-cpy-ir r1 obj_vtable r3)
		(f-bind 'sym 'vtable r4)
		(gotoif '(r3 != r4) 'error3))
		(call 'hmap 'find '((rsp local_env) r1) '(r0 r1 r2))
		(vpif '(r1 != 0))
			(call 'hmap 'erase '(r0 r1 r2))
		(endif)
		(vp-cpy-ir rsp local_iter_begin r3)
		(vp-cpy-ir rsp local_iter_end r2)
		(vp-add-cr ptr_size r3)
	(loop-until '(r3 == r2))
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir r0 lisp_sym_nil r1)
	(class/obj/ref r1 r2)

	(exit 'hmap 'lisp_undef '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(undef env var [var] ...)" error_msg_wrong_num_of_args r1))
(vp-label 'error2)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(undef env var [var] ...)" error_msg_not_an_environment r3))
(vp-label 'error3)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_args r3)
	(vp-free local_size)
	(jump 'lisp 'repl_error '(r0 "(undef env var [var] ...)" error_msg_not_a_symbol r3)))

(def-func-end)
