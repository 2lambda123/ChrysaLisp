(include 'sys/func.inc)
(include 'class/hmap/class.inc)
(include 'class/sym/class.inc)
(include 'class/pair/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(defun defset (_ p)
	(vp-def (r_env r_length r_var r_val r_iter_begin r_iter_end r_vtable r_cmp)
		'(r0 r1 r1 r2))
	(ptr 'this 'args 'env 'val)
	(pptr 'iter_begin 'iter_end)
	(push-scope)
	(entry 'hmap _ {this, args})
	(d-call 'vector 'get_length {args} (list '_ r_length))
(errorcases
	(gotoif (list r_length '< 3) 'error1)
	(vp-and-cr 1 r_length)
	(gotoif (list r_length '== 0) 'error1))
	(call 'vector 'get_iters {args} (list '_ r_iter_begin r_iter_end))
	(assign (list r_iter_begin r_iter_end) {iter_begin, iter_end})
	(vp-cpy-ir r_iter_begin 0 r_env)
	(assign (list r_env) {env})
(errorcases
	(call 'obj 'inst_of `(,r_env (@ ,(f-path 'hmap 'vtable))))
	(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))
	(assign {iter_begin} (list r_iter_begin))
	(vp-add-cr ptr_size r_iter_begin)
	(loop-start)
		(assign (list r_iter_begin) {iter_begin})
		(vp-cpy-ir r_iter_begin 0 r_var)
	(errorcases
		(vp-cpy-ir r_var obj_vtable r_vtable)
		(assign `((@ ,(f-path 'sym 'vtable))) (list r_cmp))
		(gotoif (list r_vtable '!= r_cmp) 'error3))
		(vp-cpy-ir r_iter_begin ptr_size r_val)
		(assign {env} (list r_env))
		(assign (list r_val) {val})
		(exec p)
		(assign {iter_begin, iter_end} (list r_iter_begin r_iter_end))
		(vp-add-cr (mul ptr_size 2) r_iter_begin)
	(loop-until (list r_iter_begin '== r_iter_end))
	(call 'obj 'ref {val})
	(exit 'hmap _ {this, val})
	(return))

(def-method 'hmap 'lisp_def)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(defset 'lisp_def
		'(progn
			(call 'hmap 'insert (list r_env r_var r_val))))

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(def env var val [var val] ...)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(def env var val [var val] ...)", error_msg_not_an_environment, args})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(def env var val [var val] ...)", error_msg_not_a_symbol, args}))

	(pop-scope-syms)

(def-func-end)

(def-method 'hmap 'lisp_set)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(defset 'lisp_set
		'(progn
			(call 'hmap 'set (list r_env r_var r_val))
			(errorif (list (method-output 'hmap 'set 1) '== 0) 'error4)))

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(set env var val [var val] ...)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(set env var val [var val] ...)", error_msg_not_an_environment, args})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(set env var val [var val] ...)", error_msg_not_a_symbol, args})
(vp-label 'error4)
	(jump 'lisp 'repl_error {this, "(set env var val [var val] ...)", error_msg_symbol_not_bound, args}))

	(pop-scope-syms)

(def-func-end)

(defun defsetq (_ p)
	(vp-def (r_this r_length r_iter_begin r_iter_end r_vtable r_cmp r_val r_var) '(r0 r1 r1 r2))
	(ptr 'this 'args 'var 'val)
	(pptr 'iter_begin 'iter_end)
	(push-scope)
	(entry 'hmap _ {this, args})
	(d-call 'vector 'get_length {args} (list '_ r_length))
(errorcases
	(gotoif (list r_length '< 3) 'error1)
	(vp-and-cr 1 r_length)
	(gotoif (list r_length '== 0) 'error1))
	(call 'vector 'get_iters {args} (list '_ r_iter_begin r_iter_end))
	(vp-add-cr ptr_size r_iter_begin)
	(vp-xor-rr r_val r_val)
	(assign (list r_val r_iter_end) {val, iter_end})
	(loop-start)
		(assign (list r_iter_begin) {iter_begin})
		(call 'obj 'deref_if {val})
		(assign {iter_begin} (list r_iter_begin))
		(vp-cpy-ir r_iter_begin 0 r_var)
	(errorcases
		(vp-cpy-ir r_var obj_vtable r_vtable)
		(assign `((@ ,(f-path 'sym 'vtable))) (list r_cmp))
		(gotoif (list r_vtable '!= r_cmp) 'error2))
		(assign {this} (list r_this))
		(assign (list r_var) {var})
		(call 'lisp 'repl_eval `(,r_this (,r_iter_begin ptr_size)) (list r_this r_val))
		(assign (list r_val) {val})
	(errorcases
		(vp-cpy-ir r_val obj_vtable r_vtable)
		(assign `((@ ,(f-path 'error 'vtable))) (list r_cmp))
		(gotoif (list r_vtable '== r_cmp) 'funcexit))
		(assign {var} (list r_var))
		(exec p)
		(assign {iter_begin, iter_end} (list r_iter_begin r_iter_end))
		(vp-add-cr (mul ptr_size 2) r_iter_begin)
	(loop-until (list r_iter_begin '== r_iter_end))
(vp-label 'funcexit)
	(exit 'hmap _ {this, val})
	(return))

(def-method 'hmap 'lisp_defq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(defsetq 'lisp_defq
		'(progn
			(call 'hmap 'insert `((,r_this lisp_environment) ,r_var ,r_val))))

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(defq var val [var val] ...)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(defq var val [var val] ...)", error_msg_not_a_symbol, args}))

	(pop-scope-syms)

(def-func-end)

(def-method 'hmap 'lisp_setq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(defsetq 'lisp_setq
		'(progn
			(call 'hmap 'set `((,r_this lisp_environment) ,r_var ,r_val))
			(errorif (list (method-output 'hmap 'set 1) '== 0) 'error3)))

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(setq var val [var val] ...)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(setq var val [var val] ...)", error_msg_not_a_symbol, args})
(vp-label 'error3)
	(call 'obj 'deref {val})
	(jump 'lisp 'repl_error {this, "(setq var val [var val] ...)", error_msg_symbol_not_bound, args}))

	(pop-scope-syms)

(def-func-end)

(def-method 'hmap 'lisp_defined)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'value)

	(push-scope)
	(entry 'hmap 'lisp_defined {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'vector 'get_first {args} {_, value})
	(call 'hmap 'search {this->lisp_environment, value} {_, value, _})
	(vpif {value})
		(call 'pair 'ref_second {ptr(*value)} {_, value})
	(else)
		(call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

	(exit 'hmap 'lisp_defined {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(def? var)", error_msg_wrong_types, args})
	(signature 'sig 'sym))

	(pop-scope-syms)

(def-func-end)

(def-method 'hmap 'lisp_env)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = environment hmap object (ptr)

	(ptr 'this 'args 'value)
	(uint 'length)

	(push-scope)
	(entry 'hmap 'lisp_env {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length == 0 || length == 1} 'error1)
	(vpif {length})
		(call 'vector 'get_first {args} {_, value})
		(errorif (cat {value->obj_vtable != @} (f-path 'num 'vtable)) 'error2)
		(call 'num 'get_value {value} {_, value})
		(errorifnot {value} 'error2)
		(vpif {value > 0})
			(call 'hmap 'num_buckets {this->lisp_environment} {_, length})
			(gotoif {value == length} 'justref)
			(call 'hmap 'copy {this->lisp_environment, value} {_, value})
			(call 'obj 'deref {this->lisp_environment})
			(call 'obj 'ref {value} {this->lisp_environment})
		(else)
			(call 'hmap 'create {0, -value} {value})
		(endif)
	(else)
	(vp-label 'justref)
		(call 'obj 'ref {this->lisp_environment} {value})
	(endif)

	(exit 'hmap 'lisp_env {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(env [num])", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(env [num])", error_msg_not_a_number, args}))

	(pop-scope-syms)

(def-func-end)

(def-method 'hmap 'lisp_undef)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'env 'var 'bucket)
	(union
		'(pptr 'iter_begin 'iter_end)
		'(uint 'length))

	(push-scope)
	(entry 'hmap 'lisp_undef {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 2} 'error1)
	(call 'vector 'get_iters {args} {_, iter_begin, iter_end})
	(assign {iter_begin[ptr_size * 0]} {env})

(errorcases
	(call 'obj 'inst_of (cat {env, @} (f-path 'hmap 'vtable)))
	(gotoif (list (method-output 'obj 'inst_of 1) '== 0) 'error2))

	(assign {&iter_begin[ptr_size * 1]} {iter_begin})
	(loop-start)
		(assign {iter_begin[ptr_size * 0]} {var})
		(errorif (cat {var->obj_vtable != @} (f-path 'sym 'vtable)) 'error3)
		(call 'hmap 'find {env, var} {_, var, bucket})
		(vpif {var})
			(call 'hmap 'erase {env, var, bucket})
		(endif)
	(loop-until {(&iter_begin[ptr_size] => iter_begin) == iter_end})
	(call 'obj 'ref {this->lisp_sym_nil} {var})

	(exit 'hmap 'lisp_undef {this, var})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(undef env var [var] ...)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(undef env var [var] ...)", error_msg_not_an_environment, args})
(vp-label 'error3)
	(jump 'lisp 'repl_error {this, "(undef env var [var] ...)", error_msg_not_a_symbol, args}))

	(pop-scope-syms)

(def-func-end)
