(include 'sys/func.inc)
(include 'sys/kernel/class.inc)
(include 'sys/str/class.inc)
(include 'class/str/class.inc)
(include 'class/msg_out/class.inc)
(include 'class/msg_in/class.inc)
(include 'class/slave/class.inc)
(include 'class/pipe/class.inc)

(def-method 'pipe 'init)
	;inputs
	;r0 = pipe object (ptr)
	;r1 = vtable (pptr)
	;r2 = command c string (pubyte)
	;outputs
	;r0 = pipe object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(ptr 'this 'buffer)
	(union
		'(ptr 'vtable)
		'(ulong 'ok))
	(uint 'length)

	;read init args
	(push-scope)
	(entry 'pipe 'init {this, vtable, buffer})

	;init parent
	(s-call 'pipe 'init {this, vtable} {_, ok})
	(vpif {ok})
		;init state
		(call 'sys_mem 'clear {&this->pipe_start, pipe_size - pipe_start})
		(assign {stream_mail_state_started} {this->pipe_state})

		;init pipeline
		(ptr 'msg 'data 'string 'commands 'command 'args 'stream 'ids 'cmd 'ack_mbox_addr)
		(pubyte 'start)
		(uint 'cpu 'index 'started 'mbox_id 'ack_mbox_id)
		(struct 'mbox 'id)

		(push-scope)
		;split pipe into separate commands and args
		(call 'sys_str 'length {buffer} {_, length})
		(call 'stream 'create {0, 0, buffer, length} {stream})
		(call 'stream 'split {stream, char_pipe} {_, args})
		(call 'stream 'deref {stream})
		(d-call 'vector 'get_length {args} {_, length})
		(vpif {length})
			;create command prefix/suffix
			(call 'vector 'create nil {command})
			(call 'str 'create_from_buffer {"cmd/", 4} {cmd})
			(call 'vector 'push_back {command, cmd})
			(call 'str 'create_from_buffer {".lisp", 5} {cmd})
			(call 'str 'ref {cmd})
			(call 'vector 'push_back2 {command, cmd, cmd})

			;create command pipeline
			(call 'vector 'create nil {commands})
			(call 'vector 'set_capacity {commands, length})
			(assign {0} {index})
			(loop-while {index /= length})
				(call 'vector 'get_element {args, index} {_, string})
				(call 'stream 'create {0, 0, &string->str_data, string->str_length} {stream})
				(call 'stream 'skip {stream, char_space})
				(assign {stream->stream_bufp} {start})
				(call 'stream 'skip_not {stream, char_space})
				(call 'str 'create_from_buffer {start, stream->stream_bufp - start} {string})
				(d-call 'vector 'set_element {command, string, 1})
				(d-call 'str 'cat {string, command} {cmd})
				(call 'vector 'push_back {commands, cmd})
				(call 'stream 'deref {stream})
				(assign {index + 1} {index})
			(loop-end)
			(call 'vector 'deref {command})

			;open command pipeline
			(call 'sys_task 'open_pipe {commands} {ids})
			(call 'vector 'deref {commands})

			;count how many started
			(assign {0 => started} {index})
			(loop-while {index /= length})
				(call 'array 'get_element {ids, index} {_, mbox.id_id})
				(vpif {mbox.id_mbox})
					(assign {started + 1} {started})
				(endif)
				(assign {index + 1} {index})
			(loop-end)

			;all started ?
			(vpif {started = length})
				;create streams and select array
				(call 'vector 'create nil {this->pipe_streams})
				(call 'vector 'set_capacity {this->pipe_streams, length + 2})
				(call 'array 'create nil {this->pipe_select_array})
				(call 'array 'set_capacity {this->pipe_streams, length + 2})
				(assign {0} {index})
				(loop-while {index /= (length + 2)})
					(call 'msg_in 'create nil {stream})
					(call 'vector 'push_back {this->pipe_streams, stream})
					(call 'array 'push_back {this->pipe_select_array, stream->msg_in_mbox_id})
					(assign {index + 1} {index})
				(loop-end)

				;send args to pipe elements, wiring up id's as we go
				(call 'sys_mail 'alloc_mbox nil {ack_mbox_id, ack_mbox_addr})
				(assign {stream->msg_in_mbox_id} {mbox_id})
				(call 'sys_kernel 'id nil {cpu})
				(assign {index - 2} {index})
				(loop-while {index})
					(assign {index - 1} {index})
					(call 'vector 'get_element {args, index} {_, string})
					(call 'sys_mail 'alloc {slave_msg_init_size + string->str_length} {msg, data})
					(call 'sys_mem 'copy {&string->str_data, &data->slave_msg_init_args, string->str_length})
					(assign {mbox_id} {data->slave_msg_init_stdout_id.id_mbox})
					(assign {cpu} {data->slave_msg_init_stdout_id.id_cpu})
					(call 'vector 'get_element {this->pipe_streams, (index + 1)} {_, stream})
					(assign {stream->msg_in_mbox_id} {data->slave_msg_init_stderr_id.id_mbox})
					(call 'sys_kernel 'id nil {data->slave_msg_init_stderr_id.id_cpu})
					(assign {ack_mbox_id} {data->slave_msg_init_ack_id.id_mbox})
					(call 'sys_kernel 'id nil {data->slave_msg_init_ack_id.id_cpu})
					(call 'array 'get_element {ids, index} {_, mbox.id_id})
					(assign {mbox.id_mbox} {mbox_id})
					(assign {mbox.id_cpu} {cpu})
					(assign {mbox_id} {msg->msg_dest.id_mbox})
					(assign {cpu} {msg->msg_dest.id_cpu})
					(call 'sys_mail 'send {msg})

					;wait for ack with stdin mailbox
					(call 'sys_mail 'read {ack_mbox_addr} {msg, data})
					(assign {data->slave_msg_init_stdin_mbox_id} {mbox_id})
					(call 'sys_mail 'free {msg})
				(loop-end)
				(call 'sys_mail 'free_mbox {ack_mbox_id})

				;create input stream, free the unused space keeper stream
				(call 'msg_out 'create {mbox_id + (cpu << 32)} {stream})
				(d-call 'vector 'set_element {this->pipe_streams, stream, 0})
			(else)
				(assign {0} {ok})
				;send abort to any started pipe elements
				(loop-start)
					(d-call 'array 'get_length {ids} {_, length})
					(breakifnot {length})
					(call 'array 'pop_back {ids} {_, mbox.id_id})
					(continueifnot {mbox.id_mbox})
					(call 'sys_mail 'alloc '(0) {msg, _})
					(assign {mbox.id_id} {msg->msg_dest.id_id})
					(call 'sys_mail 'send {msg})
				(loop-end)
			(endif)

			;free ids
			(call 'array 'deref {ids})
		(endif)

		;free args
		(call 'vector 'deref {args})
		(pop-scope)
	(endif)

	(exit 'pipe 'init {this, ok})
	(pop-scope)
	(return)

(def-func-end)
