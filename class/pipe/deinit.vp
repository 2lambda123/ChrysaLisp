(include 'sys/func.inc)
(include 'class/str/class.inc)
(include 'class/msg_out/class.inc)
(include 'class/msg_in/class.inc)
(include 'class/slave/class.inc)
(include 'class/pipe/class.inc)

(def-method 'pipe 'deinit)
	;inputs
	;r0 = pipe object (ptr)
	;outputs
	;r0 = pipe object (ptr)
	;trashes
	;all but r0

	(ptr 'this)
	(uint 'len)

	(push-scope)
	(entry 'pipe 'deinit {this})

	;flush remaining
	(call 'pipe 'get_input {this} '(_ r0))
	(call 'msg_out 'write_flush '(r0) '(r0))

	;send stopping
	(call 'msg_out 'set_state '(r0 stream_mail_state_stopping) '(r0))
	(call 'msg_out 'write_next '(r0) '(r0))
	(call 'msg_out 'write_flush '(r0) '(r0))

	;send stopped
	(call 'msg_out 'set_state '(r0 stream_mail_state_stopped) '(r0))
	(call 'msg_out 'write_next '(r0) '(r0))
	(call 'msg_out 'write_flush '(r0) '(r0))

	;wait for all stopped, starting with the pipe output, then the error streams
	(d-call 'vector 'get_length {this->pipe_streams} {_, len})
	(loop-while {(len - 1) => len})
		(call 'vector 'get_element {this->pipe_streams, len} '(_ r0))
		(loop-start)
			(assign '((r0 msg_in_state)) '(r1))
			(breakif '(r1 = stream_mail_state_stopped))
			(call 'msg_in 'next_msg '(r0) '(r0))
		(loop-end)
	(loop-end)

	;free streams, select array
	(call 'vector 'deref {this->pipe_streams})
	(call 'array 'deref {this->pipe_select_array})

	;deinit parent
	(s-jump 'pipe 'deinit {this})

	(pop-scope-syms)

(def-func-end)
