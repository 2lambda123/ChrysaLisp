(include 'sys/func.inc)
(include 'sys/kernel/class.inc)
(include 'class/msg_out/class.inc)
(include 'sys/link/class.inc)

(gen-create 'msg_out)
(gen-vtable 'msg_out)

(def-method 'msg_out 'init)
	;inputs
	;r0 = msg_out object (ptr)
	;r1 = vtable (pptr)
	;r2 = target mailbox id (id)
	;outputs
	;r0 = msg_out object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'vtable)
		'(ulong 'ok))

	;save inputs
	(push-scope)
	(entry 'msg_out 'init {this, vtable, this->msg_out_id.id_id})

	;init parent
	(s-call 'msg_out 'init {this, vtable, 0, 0, 0, 0} {_, ok})
	(vpif {ok})
		;init myself
		(assign {0 => this->msg_out_seqnum} {this->msg_out_ack_seqnum})
		(assign {stream_mail_state_started} {this->msg_out_state})
		(call 'sys_mail 'alloc_mbox nil {this->msg_out_ack_mbox_id, this->msg_out_ack_mbox_addr})
	(endif)

	(exit 'msg_out 'init {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'msg_out 'deinit)
	;inputs
	;r0 = msg_out object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'msg)

	(push-scope)
	(entry 'msg_out 'deinit {this})

	;wait for final ack
	(call 'sys_mail 'read {this->msg_out_ack_mbox_addr} {msg, _})
	(call 'sys_mail 'free {msg})

	;free any stream mail buffer
	(call 'sys_mail 'free {this->stream_buffer})
	(assign {0} {this->stream_buffer})

	;free ack mailbox
	(call 'sys_mail 'free_mbox {this->msg_out_ack_mbox_id})

	;deinit parent
	(s-jump 'msg_out 'deinit {this})

	(pop-scope-syms)

(def-func-end)

(def-method 'msg_out 'write_flush)
	;inputs
	;r0 = msg_out object (ptr)
	;outputs
	;r0 = msg_out object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'msg 'data)

	(push-scope)
	(entry 'msg_out 'write_flush {this})

	(assign {this->stream_buffer} {msg})
	(vpif {msg})
		;send current buffer
		(assign {msg->msg_parcel_data} {data})
		(assign {this->stream_bufp - data} {msg->msg_length})
		(assign {this->msg_out_id.id_id} {msg->msg_dest.id_id})
		(assign {this->msg_out_seqnum} {data->stream_msg_seqnum})
		(assign {this->msg_out_state} {data->stream_msg_state})
		(assign {this->msg_out_ack_mbox_id} {data->stream_msg_ack_id.id_mbox})
		(call 'sys_kernel 'id nil {data->stream_msg_ack_id.id_cpu})
		(call 'sys_mail 'send {msg})
		(assign {0} {this->stream_buffer})

		;wait for an ack ?
		(vpif {this->msg_out_seqnum >> msg_out_ack_shift != this->msg_out_ack_seqnum})
			(call 'sys_mail 'read {this->msg_out_ack_mbox_addr} {msg, _})
			(call 'sys_mail 'free {msg})
			(assign {this->msg_out_ack_seqnum + 1} {this->msg_out_ack_seqnum})
		(endif)

		;next seq num
		(assign {this->msg_out_seqnum + 1} {this->msg_out_seqnum})

		;parent actions
		(s-call 'msg_out 'write_flush {this})
	(endif)

	(exit 'msg_out 'write_flush {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'msg_out 'write_next)
	;inputs
	;r0 = msg_out object (ptr)
	;outputs
	;r0 = msg_out object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'msg 'data)

	(push-scope)
	(entry 'msg_out 'write_next {this})

	(call 'stream 'write_flush {this})
	(call 'sys_mail 'alloc {lk_data_size} {msg, data})
	(assign {&data->stream_msg_data} {this->stream_bufp})
	(assign {&data->stream_msg_data + lk_data_size - stream_msg_data} {this->stream_bufe})
	(assign {msg} {this->stream_buffer})

	(exit 'msg_out 'write_next {this})
	(pop-scope)
	(return)

(def-func-end)
