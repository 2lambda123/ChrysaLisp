(include 'sys/func.inc)
(include 'sys/kernel/class.inc)
(include 'class/msg_out/class.inc)
(include 'sys/link/class.inc)

(gen-create 'msg_out)
(gen-vtable 'msg_out)

(def-method 'msg_out 'init)
	;inputs
	;r0 = msg_out object (ptr)
	;r1 = vtable (pptr)
	;r2 = target mailbox id (id)
	;outputs
	;r0 = msg_out object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(entry 'msg_out 'init '(r0 r1 r2))
	(assign '(r2) `((r0 ,(+ msg_out_id id_id))))

	;init parent
	(s-call 'msg_out 'init '(r0 r1 0 0 0 0) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(vp-xor-rr r2 r2)
		(assign '(r2 r2 stream_mail_state_started) '((r0 msg_out_seqnum) (r0 msg_out_ack_seqnum) r2))
		(assign '(r2) '((r0 msg_out_state)))
		(vp-push r0)
		(call 'sys_mail 'alloc_mbox nil '(r2 r1))
		(vp-pop r0)
		(assign '(r2 r1 r0) '((r0 msg_out_ack_mbox_id) (r0 msg_out_ack_mbox_addr) r1))
	(endif)

	(exit 'msg_out 'init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'msg_out 'deinit)
	;inputs
	;r0 = msg_out object (ptr)
	;outputs
	;r0 = msg_out object (ptr)
	;trashes
	;all but r0

	(entry 'msg_out 'deinit '(r0))

	;wait for final ack
	(vp-push r0)
	(call 'sys_mail 'read '((r0 msg_out_ack_mbox_addr)) '(r0 _))
	(call 'sys_mail 'free '(r0))

	;free any stream mail buffer
	(assign '((rsp 0)) '(r2))
	(vp-xor-rr r1 r1)
	(assign '((r2 stream_buffer)) '(r0))
	(assign '(r1) '((r2 stream_buffer)))
	(call 'sys_mail 'free '(r0))

	;free ack mailbox
	(assign '((rsp 0)) '(r0))
	(call 'sys_mail 'free_mbox '((r0 msg_out_ack_mbox_id)))

	;deinit parent
	(vp-pop r0)
	(s-jump 'msg_out 'deinit '(r0))

(def-func-end)

(def-method 'msg_out 'write_flush)
	;inputs
	;r0 = msg_out object (ptr)
	;outputs
	;r0 = msg_out object (ptr)
	;trashes
	;all but r0

	(entry 'msg_out 'write_flush '(r0))

	(assign '((r0 stream_buffer)) '(r1))
	(vpif '(r1 /= 0))
		(vp-push r0)
		(vp-xor-rr r2 r2)
		(assign '(r2) '((r0 stream_buffer)))

		;send current buffer
		(assign '((r1 msg_parcel_data) (r0 stream_bufp)) '(r2 r3))
		(vp-sub-rr r2 r3)
		(assign '(r3) '((r1 msg_length)))

		(vp-cpy-ir r0 (+ msg_out_id id_id) r3)
		(assign '((r0 msg_out_seqnum) (r0 msg_out_state) (r0 msg_out_ack_mbox_id)) '(r4 r5 r6))

		(vp-cpy-ri r3 r1 (+ msg_dest id_id))
		(assign '(r4 r5) '((r2 stream_msg_seqnum) (r2 stream_msg_state)))
		(vp-cpy-ri-i r6 r2 (+ stream_msg_ack_id id_mbox))

		(call 'sys_kernel 'id nil '((r2 (+ stream_msg_ack_id id_cpu) i)))
		(call 'sys_mail 'send '(r1))

		;wait for an ack ?
		(assign '((rsp 0)) '(r0))
		(assign '((r0 msg_out_seqnum) (r0 msg_out_ack_seqnum)) '(r1 r2))
		(vp-shr-cr msg_out_ack_shift r1)
		(vpif '(r1 /= r2))
			(call 'sys_mail 'read '((r0 msg_out_ack_mbox_addr)) '(r0 _))
			(call 'sys_mail 'free '(r0))

			;next ack seq num
			(assign '((rsp 0)) '(r0))
			(assign '((r0 msg_out_ack_seqnum)) '(r1))
			(vp-add-cr 1 r1)
			(assign '(r1) '((r0 msg_out_ack_seqnum)))
		(endif)

		;next seq num
		(vp-pop r0)
		(assign '((r0 msg_out_seqnum)) '(r1))
		(vp-add-cr 1 r1)
		(assign '(r1) '((r0 msg_out_seqnum)))

		;parent actions
		(s-call 'msg_out 'write_flush '(r0))
	(endif)

	(exit 'msg_out 'write_flush '(r0))
	(vp-ret)

(def-func-end)

(def-method 'msg_out 'write_next)
	;inputs
	;r0 = msg_out object (ptr)
	;outputs
	;r0 = msg_out object (ptr)
	;trashes
	;all but r0

	(entry 'msg_out 'write_next '(r0))

	(vp-push r0)
	(call 'stream 'write_flush '(r0))
	(call 'sys_mail 'alloc '(lk_data_size) '(r2 r1))
	(vp-pop r0)
	(vp-lea-i r1 lk_data_size r3)
	(vp-add-cr stream_msg_data r1)
	(assign '(r2 r1 r3) '((r0 stream_buffer) (r0 stream_bufp) (r0 stream_bufe)))

	(exit 'msg_out 'write_next '(r0))
	(vp-ret)

(def-func-end)
