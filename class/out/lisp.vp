(include "sys/func.inc")
(include "class/out/class.inc")
(include "class/str/class.inc")
(include "class/lisp/class.inc")

(def-method 'out :lisp_create)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'out :lisp_create '(:r0 :r1))

(errorcases
	(call 'lisp :env_args_sig '(:r1 ($ sig) 1) '(:r2))
	(gotoif '(:r2 = 0) 'error))

	(vp-push :r0)
	(defq in (method-input 'out :create))
	(list-bind-args :r1 `(,(elem 2 in)) '(:obj))
	(vp-cpy-ir (elem 2 in) (+ str_data net_id_mbox_id) (elem 0 in))
	(vp-cpy-ir (elem 2 in) (+ str_data net_id_node_id node_id_node1) (elem 1 in))
	(vp-cpy-ir (elem 2 in) (+ str_data net_id_node_id node_id_node2) (elem 2 in))
	(call 'out :create in '(:r1))
	(vp-pop :r0)

	(exit 'out :lisp_create '(:r0 :r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(out-stream mbox)" error_msg_wrong_types :r1))
	(signature '(str)))

(def-func-end)
