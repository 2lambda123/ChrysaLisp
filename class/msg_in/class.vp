(include 'sys/func.inc)
(include 'class/msg_out/class.inc)
(include 'class/msg_in/class.inc)

(gen-create 'msg_in)
(gen-vtable 'msg_in)

(def-method 'msg_in 'init)
	;inputs
	;r0 = msg_in object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = msg_in object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'vtable)
		'(ulong 'ok))

	(push-scope)
	(entry 'msg_in 'init {this, vtable})

	;init parent
	(s-call 'msg_in 'init {this, vtable, 0, 0, 0, 0} {_, ok})
	(vpif {ok})
		;init myself
		(assign {0 => this->msg_in_seqnum} {this->msg_in_ack_seqnum})
		(assign {stream_mail_state_started} {this->msg_in_state})
		(call 'sys_mail 'alloc_mbox nil {this->msg_in_mbox_id, this->msg_in_mbox_addr})
		(vp-def (r_lst r_tmp))
		(assign {&this->msg_in_list} (list r_lst))
		(lh-init r_lst r_tmp)
	(endif)

	(exit 'msg_in 'init {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'msg_in 'deinit)
	;inputs
	;r0 = msg_in object (ptr)
	;trashes
	;all but r0

	(ptr 'this)

	(push-scope)
	(entry 'msg_in 'deinit {this})

	;free any mail message buffer
	(call 'sys_mail 'free {this->stream_buffer})
	(assign {0} {this->stream_buffer})

	;free mailbox
	(call 'sys_mail 'free_mbox {this->msg_in_mbox_id})

	;parent deinit
	(exit 'msg_in 'deinit {this})
	(pop-scope)
	(s-jump 'msg_in 'deinit '(r0))

(def-func-end)

(def-method 'msg_in 'next_seq)
	;inputs
	;r0 = list head (ptr)
	;r1 = 0, else new stream msg (ptr)
	;r2 = seqnum (ulong)
	;outputs
	;r0 = 0, else next stream msg (ptr)
	;r1 = 0, else string data (pubyte)

	;save any new msg
	(vpif '(r1 != 0))
		(lh-add-at-tail r0 r1 r3)
	(endif)

	;scan for seqnum
	(loop-list-forward r0 0 r0 r1)
		(vp-cpy-ir r0 msg_parcel_data r3)
		(vp-cpy-ir r3 stream_msg_seqnum r3)
	(loop-until '(r2 == r3))
	(vpif '(r1 == 0))
		;not found
		(vp-cpy-rr r1 r0)
		(vp-ret)
	(endif)
	;remove found from list
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r2)
	(vp-cpy-ir r0 msg_parcel_data r1)
	(vp-ret)

(def-func-end)

(def-method 'msg_in 'next_msg)
	;inputs
	;r0 = msg_in object (ptr)
	;outputs
	;r0 = msg_in object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'msg 'data 'ack_msg)

	(push-scope)
	(entry 'msg_in 'next_msg {this})

	;free any current msg
	(call 'sys_mail 'free {this->stream_buffer})

	;read next in sequence
	(assign {0} {msg})
	(loop-start)
		(call 'msg_in 'next_seq {&this->msg_in_list, msg, this->msg_in_seqnum} {msg, data})
		(breakif {msg})
		(call 'sys_mail 'read {this->msg_in_mbox_addr} {msg, _})
	(loop-end)
	(assign {this->msg_in_seqnum + 1} {this->msg_in_seqnum})

	;save msg buffer details
	(assign {msg} {this->stream_buffer})
	(assign {&data->stream_msg_data} {this->stream_bufp})
	(assign {data + msg->msg_length} {this->stream_bufe})
	(assign {data->stream_msg_state} {this->msg_in_state})

	;send ack if needed
	(vpif {data->stream_msg_seqnum >> msg_out_ack_shift == this->msg_in_ack_seqnum})
		(call 'sys_mail 'alloc {0} {ack_msg, _})
		(assign {data->stream_msg_ack_id.id_id} {ack_msg->msg_dest.id_id})
		(call 'sys_mail 'send {ack_msg})
		(assign {this->msg_in_ack_seqnum + 1} {this->msg_in_ack_seqnum})
	(endif)

	(exit 'msg_in 'next_msg {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'msg_in 'read_next)
	;inputs
	;r0 = msg_in object (ptr)
	;outputs
	;r0 = msg_in object (ptr)
	;r1 = -1 for EOF, else more data
	;trashes
	;all but r0

	(ptr 'this)

	(push-scope)
	(entry 'msg_in 'read_next {this})

	;if started state
	(loop-while {this->msg_in_state == stream_mail_state_started})
		(call 'msg_in 'next_msg {this})
	(loop-until {this->stream_bufp != this->stream_bufe})

	;return -1 if not in started state
	(exit 'msg_in 'read_next {this, (this->msg_in_state == stream_mail_state_started) - 1})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'msg_in 'read_ready)
	;inputs
	;r0 = msg_in object (ptr)
	;outputs
	;r0 = msg_in object (ptr)
	;r1 = 0 if data not available
	;trashes
	;all but r0

	;extend test to include mailbox
	(s-call 'msg_in 'read_ready '(r0) '(r0 r1))
	(vpif '(r1 == 0))
		(vp-cpy-ir r0 (add msg_in_list lh_list_head) r1)
		(vp-cpy-ir r1 ln_node_succ r1)
	(endif)
	(vp-ret)

(def-func-end)
