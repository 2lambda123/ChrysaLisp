(include 'sys/func.inc)
(include 'class/msg_out/class.inc)
(include 'class/msg_in/class.inc)

(gen-create 'msg_in)
(gen-vtable 'msg_in)

(def-method 'msg_in 'init)
	;inputs
	;r0 = msg_in object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = msg_in object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(entry 'msg_in 'init '(r0 r1))

	;init parent
	(s-call 'msg_in 'init '(r0 r1 0 0 0 0) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-xor-rr r1 r1)
		(vp-cpy-ri r1 r0 msg_in_seqnum)
		(vp-cpy-ri r1 r0 msg_in_ack_seqnum)
		(vp-cpy-cr stream_mail_state_started r1)
		(vp-cpy-ri r1 r0 msg_in_state)
		(vp-push r0)
		(call 'sys_mail 'alloc_mbox nil '(r2 r1))
		(vp-pop r0)
		(vp-cpy-ri-i r2 r0 msg_in_mbox_id)
		(vp-cpy-ri r1 r0 msg_in_mbox_addr)
		(vp-lea-i r0 msg_in_list r1)
		(lh-init r1 r2)
	(endif)

	(exit 'msg_in 'init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'msg_in 'deinit)
	;inputs
	;r0 = msg_in object (ptr)
	;trashes
	;all but r0

	(entry 'msg_in 'deinit'(r0))

	;free any stream mail buffer
	(vp-push r0)
	(vp-xor-rr r1 r1)
	(vp-cpy-ir r0 stream_buffer r2)
	(vp-cpy-ri r1 r0 stream_buffer)
	(call 'sys_mail 'free '(r2))

	;free mailbox
	(vp-cpy-ir rsp 0 r0)
	(call 'sys_mail 'free_mbox '((r0 msg_in_mbox_id ui)))

	;deinit parent
	(vp-pop r0)
	(s-jump 'msg_in 'deinit '(r0))

(def-func-end)

(def-method 'msg_in 'next_msg)
	;inputs
	;r0 = msg_in object (ptr)
	;outputs
	;r0 = msg_in object (ptr)
	;trashes
	;all but r0

	(entry 'msg_in 'next_msg '(r0))

	;free any current msg
	(vp-push r0)
	(call 'sys_mail 'free '((r0 stream_buffer)))

	;read next in sequence
	(vp-cpy-ir rsp 0 r9)
	(vp-xor-rr r0 r0)
	(loop-start)
		(call 'next_seq '((& r9 msg_in_list) r0 (r9 msg_in_seqnum)) '(r0 r8))
		(breakif '(r0 != 0))
		(call 'sys_mail 'read '((r9 msg_in_mbox_addr)) '(r0 _))
	(loop-end)
	(vp-cpy-ir r9 msg_in_seqnum r2)
	(vp-add-cr 1 r2)
	(vp-cpy-ri r2 r9 msg_in_seqnum)

	;save msg buffer details
	(vp-cpy-ri r0 r9 stream_buffer)
	(vp-lea-i r8 stream_msg_data r2)
	(vp-cpy-ir-ui r0 msg_length r3)
	(vp-cpy-ir r8 stream_msg_state r4)
	(vp-add-rr r8 r3)
	(vp-cpy-ri r2 r9 stream_bufp)
	(vp-cpy-ri r3 r9 stream_bufe)
	(vp-cpy-ri r4 r9 msg_in_state)

	;send ack if needed
	(vp-cpy-ir r8 stream_msg_seqnum r2)
	(vp-cpy-ir r9 msg_in_ack_seqnum r3)
	(vp-shr-cr msg_out_ack_shift r2)
	(vpif '(r3 == r2))
		(call 'sys_mail 'alloc '(0) '(r0 _))
		(vp-cpy-ir r8 (add stream_msg_ack_id id_id) r2)
		(vp-cpy-ri r2 r0 (add msg_dest id_id))
		(call 'sys_mail 'send '(r0))

		;next ack seq num
		(vp-cpy-ir r9 msg_in_ack_seqnum r1)
		(vp-add-cr 1 r1)
		(vp-cpy-ri r1 r9 msg_in_ack_seqnum)
	(endif)

	(vp-pop r0)
	(exit 'msg_in 'next_msg '(r0))
	(vp-ret)

(vp-label 'next_seq)
	;inputs
	;r0 = list head (ptr)
	;r1 = 0, else new stream msg (ptr)
	;r2 = seqnum (ulong)
	;outputs
	;r0 = 0, else next stream msg (ptr)
	;r1 = 0, else string data (pubyte)
	;trashes
	;r0-r3

	(entry '(r0 r1 r2))

	;save any new msg
	(vpif '(r1 != 0))
		(lh-add-at-tail r0 r1 r3)
	(endif)

	;scan for seqnum
	(loop-list-forward r0 0 r0 r1)
		(vp-cpy-ir r0 msg_parcel_data r3)
		(vp-cpy-ir r3 stream_msg_seqnum r3)
	(loop-until '(r2 == r3))
	(vpif '(r1 == 0))
		;not found
		(exit '(r1 r1))
		(vp-ret)
	(endif)
	;remove found from list
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r2)

	(exit '(r0 (r0 msg_parcel_data)))
	(vp-ret)

(def-func-end)

(def-method 'msg_in 'read_next)
	;inputs
	;r0 = msg_in object (ptr)
	;outputs
	;r0 = msg_in object (ptr)
	;r1 = -1 for EOF, else more data
	;trashes
	;all but r0

	(entry 'msg_in 'read_next '(r0))

	;if started state
	(loop-start)
		(vp-cpy-ir r0 msg_in_state r1)
		(breakif '(r1 != stream_mail_state_started))
		(call 'msg_in 'next_msg '(r0) '(r0))
		(vp-cpy-ir r0 stream_bufp r1)
		(vp-cpy-ir r0 stream_bufe r2)
	(loop-until '(r1 != r2))

	;return -1 if not in started state
	(vp-cpy-ir r0 msg_in_state r2)
	(vp-xor-rr r1 r1)
	(vpif '(r2 != stream_mail_state_started))
		(vp-cpy-cr -1 r1)
	(endif)

	(exit 'msg_in 'read_next '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'msg_in 'read_ready)
	;inputs
	;r0 = msg_in object (ptr)
	;outputs
	;r0 = msg_in object (ptr)
	;r1 = 0 if data not available
	;trashes
	;all but r0

	(entry 'msg_in 'read_ready '(r0))

	;extend test to include mailbox
	(s-call 'msg_in 'read_ready '(r0) '(r0 r1))
	(vpif '(r1 == 0))
		(vp-cpy-ir r0 (add msg_in_list lh_list_head) r1)
		(vp-cpy-ir r1 ln_node_succ r1)
	(endif)

	(exit 'msg_in 'read_ready '(r0 r1))
	(vp-ret)

(def-func-end)
