(include 'sys/func.inc)
(include 'class/str/class.inc)
(include 'class/stream_str/class.inc)

(gen-create 'stream_str)
(gen-vtable 'stream_str)

(def-method 'stream_str 'init)
	;inputs
	;r0 = stream_str object (ptr)
	;r1 = vtable (pptr)
	;r2 = str object (ptr)
	;outputs
	;r0 = stream_str object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r5

	(entry 'stream_str 'init '(r0 r1 r2))

	;init parent
	(s-jump 'stream_str 'init '(r0 r1 r2 0 (& r2 str_data) (r2 str_length)))

(def-func-end)

(def-method 'stream_str 'ref_string)
	;inputs
	;r0 = stream_str object (ptr)
	;outputs
	;r0 = stream_str object (ptr)
	;r1 = str object (ptr)
	;trashes
	;r2

	(entry 'stream_str 'ref_string '(r0))

	(vp-push r0)
	(assign '((r0 stream_bufp)) '(r1))
	(vp-xor-rr r2 r2)
	(vp-cpy-ri-b r2 r1 0)
	(assign '((r0 stream_object) r2) '(r0 (r0 str_hashcode)))
	(vp-lea-i r0 str_data r2)
	(vp-sub-rr r2 r1)
	(assign '(r1) '((r0 str_length)))
	(call 'str 'ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'stream_str 'ref_string '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'stream_str 'write_next)
	;inputs
	;r0 = stream_str object (ptr)
	;outputs
	;r0 = stream_str object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'new_str)
	(uint 'length 'new_length)

	(push-scope)
	(entry 'stream_str 'write_next {this})

	(assign {this->stream_bufp - this->stream_object} {length})
	(call 'sys_mem 'alloc {length * 2} {new_str, new_length})
	(call 'sys_mem 'copy {this->stream_object, new_str, length} {_, this->stream_bufp})
	(assign {new_str + new_length - 1} {this->stream_bufe})
	(assign {1} {new_str->obj_count})
	(call 'str 'deref {this->stream_object})
	(assign {new_str} {this->stream_object})

	(exit 'stream_str 'write_next {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'stream_str 'write_flush)
	;inputs
	;r0 = stream_str object (ptr)
	;outputs
	;r0 = stream_str object (ptr)
	;trashes
	;all but r0

	(entry 'stream_str 'write_flush '(r0))

	;nul byte
	(assign '((r0 stream_bufp)) '(r1))
	(vp-xor-rr r2 r2)
	(vp-cpy-ri-b r2 r1 0)

	(assign '((r0 stream_object)) '(r2))
	(vp-add-cr str_data r2)
	(vpif '(r1 > r2))
		(assign '(r2) '((r0 stream_bufp)))
		(vp-cpy-rr r0 r3)
		(call 'sys_pii 'write_str '(1 r2))
		(vp-cpy-rr r3 r0)
	(endif)

	(exit 'stream_str 'write_flush '(r0))
	(vp-ret)

(def-func-end)
