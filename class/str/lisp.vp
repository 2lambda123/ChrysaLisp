(include 'sys/func.inc)
(include 'class/num/class.inc)
(include 'class/sym/class.inc)
(include 'class/stream_str/class.inc)
(include 'class/lisp/class.inc)

(def-method 'str 'lisp_split)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'str 'lisp_split '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 == 0) 'error1))

	(vp-push r0)
	(defq in (method-input 'str 'split))
	(class/vector/bind_args r1 in '(obj char))
	(call 'str 'split in '(_ r1))
	(vp-pop r0)

	(exit 'str 'lisp_split '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(split str char)" error_msg_wrong_types r1))
	(signature '(str str)))

(def-func-end)

(def-method 'str 'lisp_code)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(vp-def (this args len value iter_begin width index) '(r6 r7 r8))

	(entry 'str 'lisp_code (list this args))

	(class/array/get_length args len)

(errorcases
	(gotoif `(,len < 1) 'error1)
	(gotoif `(,len > 3) 'error1)
	(call 'lisp 'env_args_type (list args '($ sig) len) '(r2))
	(gotoif '(r2 == 0) 'error1))

	(class/array/get_begin args iter_begin)
	(vp-cpy-cr 1 width)
	(vp-xor-rr index index)
	(vp-cpy-ir iter_begin 0 value)
	(vpif `(,len > 1))
		(vp-cpy-ir iter_begin ptr_size width)
		(class/num/get_value width width)
		(vp-sub-cr 1 width)
		(vp-and-cr (dec long_size) width)
		(vp-add-cr 1 width)
	(endif)
	(vpif `(,len > 2))
		(vp-cpy-ir iter_begin (mul 2 ptr_size) index)
		(class/num/get_value index index)
	(endif)

	(vp-cpy-ir-ui value str_length len)
	(vpif `(,index < 0))
		(vp-add-rr len index)
		(vp-add-cr 1 index)
	(endif)

(errorcases
	(gotoif `(,index < 0) 'error1)
	(vp-sub-rr width len)
	(gotoif `(,index > ,len) 'error1))

	(vp-add-cr str_data value)
	(vp-xor-rr len len)
	(vp-add-rr index value)
	(vp-push len)
	(call 'sys_mem 'copy (list value rsp width))
	(vp-pop value)
	(call 'num 'create (list value) (list value))

	(exit 'str 'lisp_code (list this value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list this "(code str [width index])" error_msg_wrong_types args))
	(signature '(str num num)))

(def-func-end)

(def-method 'str 'lisp_char)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(vp-def (this args len value iter_begin iter_end width) '(r7 r8 r9))

	(entry 'str 'lisp_char (list this args))

	(class/array/get_length args len)

(errorcases
	(gotoif `(,len < 1) 'error1)
	(gotoif `(,len > 2) 'error1)
	(call 'lisp 'env_args_type `(,args (@ ,(f-path 'num 'vtable)) 0) '(r2))
	(gotoif '(r2 == 0) 'error1))

	(class/array/get_begin args iter_begin)
	(vp-cpy-cr 1 width)
	(vp-cpy-ir iter_begin 0 value)
	(vpif `(,len > 1))
		(vp-cpy-ir iter_begin ptr_size width)
		(class/num/get_value width width)
		(vp-sub-cr 1 width)
		(vp-and-cr (dec long_size) width)
		(vp-add-cr 1 width)
	(endif)
	(call 'str 'create_from_buffer (list (list '& value num_value) width) (list value))

	(exit 'str 'lisp_char (list this value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list this "(char num [width])" error_msg_wrong_types args)))

(def-func-end)

(def-method 'str 'lisp_cmp)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(vp-def (this args value iter_begin arg1 arg2) '(r6 r7))

	(entry 'str 'lisp_cmp (list this args))

(errorcases
	(call 'lisp 'env_args_type `(,args ($ sig) 2) '(r2))
	(gotoif '(r2 == 0) 'error))

	(call 'vector 'get_begin (list args) (list '_ iter_begin))
	(vp-cpy-ir iter_begin 0 arg1)
	(vp-cpy-ir iter_begin ptr_size arg2)
	(vp-xor-rr value value)
	(vpif `(,arg1 != ,arg2))
		(call 'str 'compare (list arg1 arg2) (list '_ value))
	(endif)
	(call 'num 'create (list value) (list value))

	(exit 'str 'lisp_cmp (list this value))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error (list this "(cmp str str)" error_msg_wrong_types args))
	(signature '(str str)))

(def-func-end)

(def-method 'str 'lisp_save)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'value)
	(union
		'(pptr 'iter_begin)
		'(long 'handle)
		'(ptr 'name))

	(push-scope)
	(entry 'str 'lisp_save {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} '(r2))
	(gotoif '(r2 == 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {value, name})
	(call 'sys_pii 'open {&name->str_data, file_open_write} {handle})
	(errorif {handle < 3} 'error2)
	(call 'sys_pii 'write {handle, &value->str_data, value->str_length})
	(call 'sys_pii 'close {handle})
	(call 'obj 'ref {value})

	(exit 'str 'lisp_save {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(save str path)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(save str path)", error_msg_open_error, args})
	(signature '(str str)))

	(pop-scope-syms)

(def-func-end)

(def-method 'str 'lisp_load)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'args 'value)

	(push-scope)
	(entry 'str 'lisp_load {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1} '(r2))
	(gotoif '(r2 == 0) 'error1))

	(call 'vector 'get_first {args} {_, value})
	(call 'str 'create_from_file {&value->str_data} {value})
	(vpifnot {value})
		(call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

	(exit 'str 'lisp_load {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(load path)", error_msg_wrong_types, args})
	(signature '(str)))

	(pop-scope-syms)

(def-func-end)

(def-method 'str 'lisp_str)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'stream 'data)
	(union
		'(ptr 'args)
		'(ptr 'value))
	(pptr 'iter_begin 'iter_end)

	(push-scope)
	(entry 'str 'lisp_str {this, args})

	(call 'str 'create_from_buffer '(0 str_gap) '(r0))
	(call 'stream_str 'create '(r0) {stream})
	(call 'vector 'get_both {args} '(_ r1 r2))
	(assign '(r2) {iter_end})
	(loop-while '(r1 != r2))
		(vp-cpy-ir r1 0 r0)
		(assign '(r1 r0) {iter_begin, value})
		(vp-cpy-ir r0 obj_vtable r1)
		(f-bind 'str 'vtable r2)
		(f-bind 'stream_str 'vtable r3)
		(switch)
		(vpcase '(r1 == r2))
			(call 'stream 'write {stream, &value->str_data, value->str_length})
			(break)
		(vpcase '(r1 == r3))
			(assign {&value->stream_object->str_data} {data})
			(call 'stream 'write {stream, data, value->stream_bufp - data})
			(break)
		(default)
			(call 'lisp 'repl_print {this, stream, value})
		(endswitch)
		(assign {iter_begin, iter_end} '(r1 r2))
		(vp-add-cr ptr_size r1)
	(loop-end)
	(call 'stream_str 'ref_string {stream} {_, value})
	(call 'obj 'destroy {stream})

	(exit 'str 'lisp_str {this, value})
	(return)

	(pop-scope)

(def-func-end)
