(include 'sys/func.inc)
(include 'class/num/class.inc)
(include 'class/sym/class.inc)
(include 'class/stream_str/class.inc)
(include 'class/lisp/class.inc)

(def-method 'str 'lisp_split)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'str 'lisp_split '(r0 r1))

	(vp-cpy-rr r0 r6)
	(vp-cpy-rr r1 r7)

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_begin '(r7) '(_ r1))
	(vp-cpy-ir r1 ptr_size r2)
	(vp-push r6)
	(call 'str 'split '((r1 0) (r2 str_data ub)) '(_ r1))
	(vp-pop r0)

	(exit 'str 'lisp_split '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r6 "(split str char)" error_msg_wrong_types r7))
	(signature 'sig 'str 'str))

(def-func-end)

(def-method 'str 'lisp_code)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_len r_value r_iter_begin r_width r_index) '(r6 r7 r8))

	(entry 'str 'lisp_code (list r_this r_args))

	(vp-cpy-ir-ui r_args array_length r_len)

(errorcases
	(gotoif (list r_len '< 1) 'error1)
	(gotoif (list r_len '> 3) 'error1)
	(call 'lisp 'env_args_type (list r_args '($ sig) r_len))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir r_args array_array r_iter_begin)
	(vp-cpy-cr 1 r_width)
	(vp-xor-rr r_index r_index)
	(vp-cpy-ir r_iter_begin 0 r_value)
	(vpif (list r_len '> 1))
		(vp-cpy-ir r_iter_begin ptr_size r_width)
		(vp-cpy-ir r_width num_value r_width)
		(vp-sub-cr 1 r_width)
		(vp-and-cr (dec long_size) r_width)
		(vp-add-cr 1 r_width)
	(endif)
	(vpif (list r_len '> 2))
		(vp-cpy-ir r_iter_begin (mul 2 ptr_size) r_index)
		(vp-cpy-ir r_index num_value r_index)
	(endif)

	(vp-cpy-ir-ui r_value str_length r_len)
	(vpif (list r_index '< 0))
		(vp-add-rr r_len r_index)
		(vp-add-cr 1 r_index)
	(endif)

(errorcases
	(gotoif (list r_index '< 0) 'error1)
	(vp-sub-rr r_width r_len)
	(gotoif (list r_index '> r_len) 'error1))

	(vp-add-cr str_data r_value)
	(vp-xor-rr r_len r_len)
	(vp-add-rr r_index r_value)
	(vp-push r_len)
	(call 'sys_mem 'copy (list r_value rsp r_width))
	(vp-pop r_value)
	(call 'num 'create (list r_value) (list r_value))

	(exit 'str 'lisp_code (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(code str [width index])" error_msg_wrong_types r_args))
	(signature 'sig 'str 'num 'num))

(def-func-end)

(def-method 'str 'lisp_char)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_len r_value r_iter_begin r_iter_end r_width) '(r7 r8 r9))

	(entry 'str 'lisp_char (list r_this r_args))

	(vp-cpy-ir-ui r_args array_length r_len)

(errorcases
	(gotoif (list r_len '< 1) 'error1)
	(gotoif (list r_len '> 2) 'error1)
	(call 'lisp 'env_args_type `(,r_args (@ ,(f-path 'num 'vtable)) 0))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir r_args array_array r_iter_begin)
	(vp-cpy-cr 1 r_width)
	(vp-cpy-ir r_iter_begin 0 r_value)
	(vpif (list r_len '> 1))
		(vp-cpy-ir r_iter_begin ptr_size r_width)
		(vp-cpy-ir r_width num_value r_width)
		(vp-sub-cr 1 r_width)
		(vp-and-cr (dec long_size) r_width)
		(vp-add-cr 1 r_width)
	(endif)
	(call 'str 'create_from_buffer (list (list '& r_value num_value) r_width) (list r_value))

	(exit 'str 'lisp_char (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(char num [width])" error_msg_wrong_types r_args)))

(def-func-end)

(def-method 'str 'lisp_cmp)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_value r_iter_begin r_arg1 r_arg2) '(r6 r7))

	(entry 'str 'lisp_cmp (list r_this r_args))

(errorcases
	(call 'lisp 'env_args_type `(,r_args ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(call 'vector 'get_begin (list r_args) (list '_ r_iter_begin))
	(vp-cpy-ir r_iter_begin 0 r_arg1)
	(vp-cpy-ir r_iter_begin ptr_size r_arg2)
	(vp-xor-rr r_value r_value)
	(vpif (list r_arg1 '!= r_arg2))
		(call 'str 'compare (list r_arg1 r_arg2) (list '_ r_value))
	(endif)
	(call 'num 'create (list r_value) (list r_value))

	(exit 'str 'lisp_cmp (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error (list r_this "(cmp str str)" error_msg_wrong_types r_args))
	(signature 'sig 'str 'str))

(def-func-end)

(def-method 'str 'lisp_save)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(union
		'(pptr 'iter_begin)
		'(long 'handle)
		'(ptr 'name))

	(push-scope)
	(entry 'str 'lisp_save {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {value, name})
	(call 'sys_pii 'open {&name->str_data, file_open_write} {handle})
	(errorif {handle < 3} 'error2)
	(call 'sys_pii 'write {handle, &value->str_data, value->str_length})
	(call 'sys_pii 'close {handle})
	(call 'obj 'ref {value})

	(exit 'str 'lisp_save {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(save str path)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(save str path)", error_msg_open_error, args})
	(signature 'sig 'str 'str))

	(pop-scope-syms)

(def-func-end)

(def-method 'str 'lisp_load)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)

	(push-scope)
	(entry 'str 'lisp_load {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_first {args} {_, value})
	(call 'str 'create_from_file {&value->str_data} {value})
	(vpifnot {value})
		(call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

	(exit 'str 'lisp_load {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(load path)", error_msg_wrong_types, args})
	(signature 'sig 'str))

	(pop-scope-syms)

(def-func-end)

(def-method 'str 'lisp_str)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'stream 'data)
	(union
		'(ptr 'args)
		'(ptr 'value))
	(pptr 'iter_begin 'iter_end)

	(push-scope)
	(entry 'str 'lisp_str {this, args})

	(call 'str 'create_from_buffer '(0 str_gap) '(r0))
	(call 'stream_str 'create '(r0) {stream})
	(call 'vector 'get_iters {args} '(_ r1 r2))
	(assign '(r2) {iter_end})
	(loop-while '(r1 != r2))
		(vp-cpy-ir r1 0 r0)
		(assign '(r1 r0) {iter_begin, value})
		(vp-cpy-ir r0 obj_vtable r1)
		(fn-bind (f-path 'str 'vtable) r2)
		(fn-bind (f-path 'stream_str 'vtable) r3)
		(switch)
		(case '(r1 == r2))
			(call 'stream 'write {stream, &value->str_data, value->str_length})
			(break)
		(case '(r1 == r3))
			(assign {&value->stream_object->str_data} {data})
			(call 'stream 'write {stream, data, value->stream_bufp - data})
			(break)
		(default)
			(call 'lisp 'repl_print {this, stream, value})
		(endswitch)
		(assign {iter_begin, iter_end} '(r1 r2))
		(vp-add-cr ptr_size r1)
	(loop-end)
	(call 'stream_str 'ref_string {stream} {_, value})
	(call 'obj 'destroy {stream})

	(exit 'str 'lisp_str {this, value})
	(return)

	(pop-scope)

(def-func-end)
