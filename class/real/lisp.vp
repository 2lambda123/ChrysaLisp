(include 'sys/func.inc)
(include 'sys/math/class.inc)
(include 'class/real/class.inc)
(include 'class/lisp/class.inc)

(defun addop (_ p)
	(entry 'real _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type `(r1 (@ ,(f-path 'real 'vtable)) -2) '(r2))
	(gotoif '(r2 = 0) 'error))
	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(assign '((r3 num_value)) '(r3))
		(exec p)
	(loop-until '(r1 = r2))
	(call 'real 'create '(r0) '(r1))
	(vp-pop r0)
	(exit 'real _ '(r0 r1))
	(vp-ret))

(def-method 'real 'lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_add
		'(call 'sys_math 'r_add '(r0 r3) '(r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(.+ real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'real 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_sub
		'(call 'sys_math 'r_sub '(r0 r3) '(r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(.- real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'real 'lisp_mul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(addop 'lisp_mul
		'(call 'sys_math 'r_mul '(r0 r3) '(r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(.* real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(defun divop (_ p)
	(entry 'real _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type `(r1 (@ ,(f-path 'real 'vtable)) -2) '(r2))
	(gotoif '(r2 = 0) 'error1))
	(vp-push r0 r1)
	(class/array/get_both r1 r1 r4)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(assign '((r3 num_value)) '(r3))
	(errorcases
		(gotoif '(r3 = 0) 'error))
		(exec p)
	(loop-until '(r1 = r4))
	(call 'real 'create '(r0) '(r1))
	(vp-pop r0 r2)
	(exit 'real _ '(r0 r1))
	(vp-ret))

(def-method 'real 'lisp_div)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(divop 'lisp_div
		'(call 'sys_math 'r_div '(r0 r3) '(r0)))

(errorcases
(vp-label 'error)
	(vp-pop r0 r1)
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r0 "(./ real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(defun compare (_ p)
	(entry 'real _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type `(r1 (@ ,(f-path 'real 'vtable)) -2) '(r2))
	(gotoif '(r2 = 0) 'error))
	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(assign '((r3 num_value)) '(r3))
		(exec p)
	(loop-until '(r1 = r2))
	(vp-pop r0)
	(assign '((r0 lisp_sym_t)) '(r1))
	(class/obj/ref r1 r2)
	(exit 'real _ '(r0 r1))
	(vp-ret)
(vp-label 'fail)
	(vp-pop r0)
	(assign '((r0 lisp_sym_nil)) '(r1))
	(class/obj/ref r1 r2)
	(exit 'real _ '(r0 r1))
	(vp-ret))

(def-method 'real 'lisp_eq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_eq
		'(gotoif '(r3 /= r0) 'fail))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(.= real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'real 'lisp_ge)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_ge
		'(progn
			(call 'sys_math 'r_sub '(r3 r0) '(r13))
			(gotoif '(r13 > 0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(.>= real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'real 'lisp_gt)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_gt
		'(progn
			(call 'sys_math 'r_sub '(r3 r0) '(r13))
			(gotoif '(r13 >= 0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(.> real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'real 'lisp_le)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_le
		'(progn
			(call 'sys_math 'r_sub '(r3 r0) '(r13))
			(gotoif '(r13 < 0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(.<= real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'real 'lisp_lt)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(compare 'lisp_lt
		'(progn
			(call 'sys_math 'r_sub '(r3 r0) '(r13))
			(gotoif '(r13 <= 0) 'fail)
			(vp-cpy-rr r3 r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(.< real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'real 'lisp_ne)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'real 'lisp_ne '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type `(r1 (@ ,(f-path 'real 'vtable)) -2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-lea-i r2 (neg ptr_size) r5)
	(loop-start)
		(vp-cpy-ir r1 0 r0)
		(vp-add-cr ptr_size r1)
		(assign '((r0 num_value) r1) '(r0 r4))
		(loop-start)
			(vp-cpy-ir r4 0 r3)
			(vp-add-cr ptr_size r4)
			(assign '((r3 num_value)) '(r3))
			(gotoif '(r3 = r0) 'fail)
		(loop-until '(r4 = r2))
	(loop-until '(r1 = r5))

	(vp-pop r0)
	(assign '((r0 lisp_sym_t)) '(r1))
	(class/obj/ref r1 r2)
	(exit 'real 'lisp_ne '(r0 r1))
	(vp-ret)

(vp-label 'fail)
	(vp-pop r0)
	(assign '((r0 lisp_sym_nil)) '(r1))
	(class/obj/ref r1 r2)
	(exit 'real 'lisp_ne '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(./= real real ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'real 'lisp_i2r)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'real 'lisp_i2r '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type `(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sys_math 'r_i2r)
		out (method-output 'sys_math 'r_i2r))
	(class/vector/bind_args r1 in '(num))
	(call 'sys_math 'r_i2r in out)
	(call 'real 'create out '(r1))
	(vp-pop r0)

	(exit 'real 'lisp_i2r '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(i2r num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'real 'lisp_f2r)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'real 'lisp_f2r '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type `(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sys_math 'r_f2r)
		out (method-output 'sys_math 'r_f2r))
	(class/vector/bind_args r1 in '(num))
	(call 'sys_math 'r_f2r in out)
	(call 'real 'create out '(r1))
	(vp-pop r0)

	(exit 'real 'lisp_f2r '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(f2r num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'real 'lisp_r2i)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'real 'lisp_r2i '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type `(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sys_math 'r_r2i)
		out (method-output 'sys_math 'r_r2i))
	(class/vector/bind_args r1 in '(real))
	(call 'sys_math 'r_r2i in out)
	(call 'num 'create out '(r1))
	(vp-pop r0)

	(exit 'real 'lisp_r2i '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(r2i real)" error_msg_wrong_types r1))
	(signature '(real)))

(def-func-end)

(def-method 'real 'lisp_r2f)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'real 'lisp_r2f '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type `(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sys_math 'r_r2f)
		out (method-output 'sys_math 'r_r2f))
	(class/vector/bind_args r1 in '(real))
	(call 'sys_math 'r_r2f in out)
	(call 'num 'create out '(r1))
	(vp-pop r0)

	(exit 'real 'lisp_r2f '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(r2f real)" error_msg_wrong_types r1))
	(signature '(real)))

(def-func-end)
