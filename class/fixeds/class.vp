(include "sys/func.inc")
(include "class/fixeds/class.inc")
(include "sys/math/class.inc")
(include "lib/consts/chars.inc")

(gen-create 'fixeds)
(gen-vtable 'fixeds)

(defun mulop (_ v)
	;trashes
	;:r1-:r6+
	(vp-def (dst src1 src2 dst1 src_end))
	(entry 'fixeds _ `(,dst ,src1 ,src2))
	(class/array/get_both src1 src1 src_end)
	(assign `((,dst array_begin) (,src2 array_begin)) `(,dst1 ,src2))
	(vec-set 5)
	(loop-start)
		(vec-load-long 1 src1)
		(vec-load-long 1 src2)
		((eval (sym (cat "vec-" v))) 1)
		(vec-store-long 1 dst1)
		(vp-add-cr +long_size dst1)
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
	(loop-until (list src1 '= src_end))
	(exit 'fixeds _ `(,dst -1))
	(vp-ret))

(defun divop (_ v)
	;trashes
	;:r1-:r8+
	(vp-def (s1 s2 dst src1 src2 dst1 src_end) '(:r1 :r2 :r4 :r5 :r6 :r7 :r8))
	(entry 'fixeds _ `(,dst ,s1 ,s2))
	(class/array/get_both s1 src1 src_end)
	(assign `((,dst array_begin) (,s2 array_begin)) `(,dst1 ,src2))
	(vec-set 0)
	(loop-start)
		(vec-load-long 1 src1)
		(vec-load-long 1 src2)
		(errorif (list (elem 0 (vec-top 1)) '= 0) 'error)
		((eval (sym (cat "vec-" v))) 1)
		(vec-store-long 1 dst1)
		(vp-add-cr +long_size dst1)
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
	(loop-until (list src1 '= src_end))
	(exit 'fixeds _ `(,dst -1))
	(vp-ret)
(errorcases
(vp-label 'error)
	(exit 'fixeds _ `(,dst 0))
	(vp-ret)))

(defun fracop (_ v)
	;trashes
	;:r1-:r4+
	(vp-def (dst src dst1 src_end))
	(entry 'fixeds _ `(,dst ,src))
	(class/array/get_both src src src_end)
	(assign `((,dst array_begin)) `(,dst1))
	(vec-set 4)
	(loop-start)
		(vec-load-long 1 src)
		((eval (sym (cat "vec-" v))) 1)
		(vec-store-long 1 dst1)
		(vp-add-cr +long_size src)
		(vp-add-cr +long_size dst1)
	(loop-until (list src '= src_end))
	(exit 'fixeds _ `(,dst))
	(vp-ret))

(def-method 'fixeds :mul)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source1 fixeds object, can be same (ptr)
	;:r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r6

	(mulop :mul 'fmul)

(def-func-end)

(def-method 'fixeds :div)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source1 fixeds object, can be same (ptr)
	;:r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r8

	(divop :div 'fdiv)

(def-func-end)

(def-method 'fixeds :mod)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source1 fixeds object, can be same (ptr)
	;:r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r8

	(divop :mod 'fmod)

(def-func-end)

(def-method 'fixeds :frac)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r5

	(fracop :frac 'frac)

(def-func-end)

(def-method 'fixeds :floor)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r5

	(fracop :floor 'floor)

(def-func-end)

(def-method 'fixeds :scale)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source fixeds object, can be same (ptr)
	;:r2 = scale (fixed)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r5

	(vp-def (dst src scale dst1 src_end))

	(entry 'fixeds :scale `(,dst ,src ,scale))

	(class/array/get_both src src src_end)
	(assign `((,dst array_begin)) `(,dst1))
	(vec-set 5)
	(loop-start)
		(vec-load-long 1 src)
		(vec-fmul 1 `(,scale))
		(vec-store-long 1 dst1)
		(vp-add-cr +long_size src)
		(vp-add-cr +long_size dst1)
	(loop-until (list src '= src_end))

	(exit 'fixeds :scale `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'fixeds :dot)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;:r1 = dot product (fixed)
	;trashes
	;:r1-:r6

	(vp-def (this sum src2 src1 src_end val1 val2))

	(entry 'fixeds :dot `(,this :r1))

	(class/array/get_both this src1 src_end)
	(assign '((:r1 array_begin)) `(,src2))
	(vp-xor-rr sum sum)
	(loop-while (list src1 '/= src_end))
		(assign `((,src1 0) (,src2 0)) `(,val1 ,val2))
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
		(vp-mul-rr val1 val2)
		(vp-asr-cr +fp_shift val2)
		(vp-add-rr val2 sum)
	(loop-end)

	(exit 'fixeds :dot `(,this ,sum))
	(vp-ret)

(def-func-end)
