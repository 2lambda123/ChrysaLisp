(include 'sys/func.inc)
(include 'class/array/class.inc)
(include 'class/num/class.inc)

(gen-create 'array)
(gen-vtable 'array)

(def-method 'array 'deinit)
	;inputs
	;r0 = array object (ptr)
	;trashes
	;all but r0

	(entry 'array 'deinit '(r0))

	;free any dynamic array
	(vp-cpy-ir r0 array_array r2)
	(vp-lea-i r0 array_e0 r1)
	(vpif '(r2 != r1))
		(vp-cpy-rr r0 r4)
		(call 'sys_mem 'free '(r2))
		(vp-cpy-rr r4 r0)
	(endif)
	(s-jump 'array 'deinit '(r0))

(def-func-end)

(def-method 'array 'clear)
	;inputs
	;r0 = array object (ptr)
	;outputs
	;r0 = array object (ptr)
	;trashes
	;r1

	(entry 'array 'clear '(r0))

	;reset length
	(class/array/clear)

	(exit 'array 'clear '(r0))
	(vp-ret)

(def-func-end)

(def-method 'array 'for_each)
	;inputs
	;r0 = array object (ptr)
	;r1 = element start index (uint)
	;r2 = element end index (uint)
	;r3 = predicate function (ptr)
	;r4 = predicate data (ptr)
	;outputs
	;r0 = array object (ptr)
	;r1 = 0, else break iterator (plong)
	;trashes
	;all but r0
		;callback predicate
		;inputs
		;r0 = predicate data (ptr)
		;r1 = element iterator (plong)
		;outputs
		;r1 = 0 if break, else not
		;trashes
		;all

	(def-struct 'local)
		(ptr 'this)
		(ptr 'predicate)
		(ptr 'predicate_data)
		(ptr 'next)
		(ptr 'end)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'array 'for_each '(r0 r1 r2 r3 r4))
	(assign '(r0 r3 r4) '((rsp local_this) (rsp local_predicate) (rsp local_predicate_data)))

	;process elements
	(vp-cpy-ir r0 array_array r0)
	(vp-shl-cr (log2 long_size) r2)
	(vp-shl-cr (log2 long_size) r1)
	(vp-add-rr r0 r2)
	(vp-add-rr r0 r1)
	(vp-cpy-ri r2 rsp local_end)
	(loop-start)
		(vp-cpy-ir rsp local_end r0)
		(vp-cpy-ri r1 rsp local_next)
		(breakif '(r1 == r0))
		(vp-cpy-ir rsp local_predicate_data r0)
		(vp-call-i rsp local_predicate)
		(breakif '(r1 == 0))
		(vp-cpy-ir rsp local_next r1)
		(vp-add-cr long_size r1)
	(loop-end)

	;iterator of break point, else 0
	(assign '((rsp local_next) (rsp local_end) (rsp local_this)) '(r1 r2 r0))
	(vpif '(r1 == r2))
		(vp-xor-rr r1 r1)
	(endif)

	(exit 'array 'for_each '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'array 'find)
	;inputs
	;r0 = array object (ptr)
	;r1 = element (long)
	;outputs
	;r0 = array object (ptr)
	;r1 = -1, else index (int)
	;trashes
	;r1-r4

	(entry 'array 'find '(r0 r1))

	(vp-cpy-ir-ui r0 array_length r3)
	(vp-cpy-ir r0 array_array r2)
	(vp-shl-cr (log2 long_size) r3)
	(vp-add-rr r2 r3)
	(loop-start)
		(vp-sub-cr long_size r3)
		(breakif '(r3 < r2))
		(vp-cpy-ir r3 0 r4)
	(loop-until '(r1 == r4))
	(vp-cpy-rr r3 r1)
	(vp-sub-rr r2 r1)
	(vp-asr-cr (log2 long_size) r1)

	(exit 'array 'find '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'array 'get_back)
	;inputs
	;r0 = array object (ptr)
	;outputs
	;r0 = array object (ptr)
	;r1 = element (long)
	;trashes
	;r2

	(entry 'array 'get_back '(r0))

	(vp-cpy-ir-ui r0 array_length r1)
	(vp-cpy-ir r0 array_array r2)
	(vp-sub-cr 1 r1)
	(vp-shl-cr (log2 long_size) r1)

	(exit 'array 'get_back '(r0 (r2 r1)))
	(vp-ret)

(def-func-end)

(def-method 'array 'get_length)
	;inputs
	;r0 = array object (ptr)
	;outputs
	;r0 = array object (ptr)
	;r1 = array length (uint)

	(entry 'array 'get_length '(r0))

	(class/array/get_length)

	(exit 'array 'get_length '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'array 'pop_back)
	;inputs
	;r0 = array object (ptr)
	;outputs
	;r0 = array object (ptr)
	;trashes
	;r1

	(entry 'array 'pop_back '(r0))

	(class/array/pop_back)

	(exit 'array 'pop_back '(r0))
	(vp-ret)

(def-func-end)

(def-method 'array 'push_back)
	;inputs
	;r0 = array object (ptr)
	;r1 = element (long)
	;outputs
	;r0 = array object (ptr)
	;r1 = element (long)
	;trashes
	;r2-r5

	(entry 'array 'push_back '(r0 r1))

	;increase capacity ?
	(vp-cpy-ir-ui r0 array_length r2)
	(vp-cpy-ir-ui r0 array_capacity r3)
	(vp-add-cr 1 r2)
	(vp-cpy-ri-i r2 r0 array_length)
	(vpif '(r2 > r3))
		;double the capacity
		(vp-add-rr r3 r3)
		(vp-push r1)
		(call 'array 'set_capacity '(r0 r3) '(r0))
		(vp-cpy-ir-ui r0 array_length r2)
		(vp-pop r1)
	(endif)

	;save object
	(vp-cpy-ir r0 array_array r3)
	(vp-shl-cr (log2 long_size) r2)
	(vp-add-rr r2 r3)
	(vp-cpy-ri r1 r3 (neg long_size))

	(exit 'array 'push_back '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'array 'ref_back)
	;inputs
	;r0 = array object (ptr)
	;outputs
	;r0 = array object (ptr)
	;r1 = integer object (ptr)
	;trashes
	;all but r0

	(entry 'array 'ref_back '(r0))

	(vp-cpy-ir-ui r0 array_length r1)
	(vp-cpy-ir r0 array_array r2)
	(vp-sub-cr 1 r1)
	(vp-shl-cr (log2 long_size) r1)
	(vp-push r0)
	(call 'num 'create '((r2 r1)) '(r1))
	(vp-pop r0)

	(exit 'array 'ref_back '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'array 'ref_element)
	;inputs
	;r0 = array object (ptr)
	;r1 = element index (uint)
	;outputs
	;r0 = array object (ptr)
	;r1 = integer object (ptr)
	;trashes
	;all but r0

	(entry 'array 'ref_element '(r0 r1))

	(vp-cpy-ir r0 array_array r2)
	(vp-shl-cr (log2 long_size) r1)
	(vp-push r0)
	(call 'num 'create '((r2 r1)) '(r1))
	(vp-pop r0)

	(exit 'array 'ref_element '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'array 'set_capacity)
	;inputs
	;r0 = array object (ptr)
	;r1 = capacity (uint)
	;outputs
	;r0 = array object (ptr)
	;trashes
	;r1-r5

	(entry 'array 'set_capacity '(r0 r1))

	;do we already have room ?
	(vp-cpy-ir-ui r0 array_capacity r2)
	(vpif '(r1 > r2))
		;realloc the dynamic array
		(vp-push r0)
		(vp-shl-cr (log2 long_size) r1)
		(vp-lea-i r0 array_e0 r3)
		(vp-cpy-ir r0 array_array r0)
		(vpif '(r0 == r3))
			(call 'sys_mem 'alloc '(r1) '(r1 r2))
			(vp-pop r0)
			(vp-cpy-ir r0 array_e0 r3)
			(vp-cpy-ir r0 array_e1 r4)
			(vp-cpy-ir r0 array_e2 r5)
			(vp-cpy-ri r3 r1 (sub array_e0 array_e0))
			(vp-cpy-ri r4 r1 (sub array_e1 array_e0))
			(vp-cpy-ri r5 r1 (sub array_e2 array_e0))
		(else)
			(vp-shl-cr (log2 long_size) r2)
			(vp-swp-rr r1 r2)
			(call 'sys_mem 'realloc '(r0 r1 r2) '(r1 r2))
			(vp-pop r0)
		(endif)
		(vp-shr-cr (log2 long_size) r2)
		(vp-cpy-ri r1 r0 array_array)
		(vp-cpy-ri-i r2 r0 array_capacity)
	(endif)

	(exit 'array 'set_capacity '(r0))
	(vp-ret)

(def-func-end)

(def-method 'array 'set_element)
	;inputs
	;r0 = array object (ptr)
	;r1 = element object (ptr)
	;r2 = element index (uint)
	;outputs
	;r0 = array object (ptr)
	;trashes
	;r2-r3

	(entry 'array 'set_element '(r0 r1 r2))

	(class/array/set_element)

	(exit 'array 'set_element '(r0))
	(vp-ret)

(def-func-end)

(def-method 'array 'partition)
	;inputs
	;r0 = array object (ptr)
	;r1 = lower partition iter (plong)
	;r2 = upper partition iter (plong)
	;r3 = sort callback (ptr)
	;r4 = sort context (ptr)
	;outputs
	;r0 = array object (ptr)
	;r1 = partition iter (plong)
	;trashes
	;all but r0
		;sort callback
		;inputs
		;r0 = sort context (ptr)
		;r1 = iter1 (plong)
		;r2 = iter2 (plong)
		;outputs
		;r0 = +, 0, -
		;trashes
		;all

	(def-struct 'local)
		(ptr 'this)
		(ptr 'func)
		(ptr 'ctx)
		(ptr 'pivot)
		(ptr 'iter)
		(ptr 'lower)
		(ptr 'upper)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'array 'partition '(r0 r1 r2 r3 r4))
	(assign '(r0 r1 r2 r3 r4) '((rsp local_this) (rsp local_lower) (rsp local_upper) (rsp local_func) (rsp local_ctx)))

	(vp-cpy-ri r1 rsp local_iter)
	(vp-cpy-ri r1 rsp local_pivot)
	(loop-start)
		(vp-add-cr long_size r1)
		(breakif '(r1 >= r2))
		(vp-cpy-ri r1 rsp local_iter)
		(vp-cpy-ir rsp local_ctx r0)
		(vp-cpy-ir rsp local_lower r2)
		(vp-call-i rsp local_func)
		(vp-cpy-ir rsp local_iter r1)
		(vp-cpy-ir rsp local_upper r2)
		(continueif '(r0 >= 0))
		(vp-cpy-ir rsp local_pivot r0)
		(vp-add-cr long_size r0)
		(vp-cpy-ri r0 rsp local_pivot)
		(continueif '(r0 == r1))
		(vp-cpy-ir r0 0 r3)
		(vp-cpy-ir r1 0 r4)
		(vp-cpy-ri r3 r1 0)
		(vp-cpy-ri r4 r0 0)
	(loop-end)
	(vp-cpy-ir rsp local_pivot r1)
	(vp-cpy-ir rsp local_lower r0)
	(vpif '(r1 != r0))
		(vp-cpy-ir r0 0 r2)
		(vp-cpy-ir r1 0 r3)
		(vp-cpy-ri r2 r1 0)
		(vp-cpy-ri r3 r0 0)
	(endif)

	(exit 'array 'partition '((rsp local_this) r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'array 'sort)
	;inputs
	;r0 = array object (ptr)
	;r1 = stack array object (ptr)
	;r2 = lower iter (plong)
	;r3 = upper iter (plong)
	;r4 = compare callback (ptr)
	;r5 = sort context (ptr)
	;outputs
	;r0 = array object (ptr)
	;trashes
	;all but r0
		;sort callback
		;inputs
		;r0 = context (ptr)
		;r1 = iter1 (plong)
		;r2 = iter2 (plong)
		;outputs
		;r0 = +, 0, -
		;trashes
		;all

	(ptr 'this 'func 'ctx 'stack)
	(pptr 'pivot 'iter_begin)
	(union
		'(uint 'low 'high)
		'(ulong 'interval))
	(union
		'(pptr 'lower 'upper)
		'(uint 'start 'length))

	(push-scope)
	(entry 'array 'sort {this, stack, lower, upper, func, ctx})

	(call 'array 'get_begin {this} {_, iter_begin})
	(assign {(lower - iter_begin) >> 3, (upper - iter_begin) >> 3} {low, high})
	(d-call 'array 'get_length {stack} {_, start})
	(loop-start)
		(vpif {low < high})
			(call 'array 'partition {this, low * long_size + iter_begin, high * long_size + iter_begin, func, ctx}
				{_, pivot})
			(assign {high} {length})
			(assign {(pivot - iter_begin) >> 3} {high})
			(call 'array 'push_back {stack, interval})
			(assign {high + 1, length} {low, high})
			(call 'array 'push_back {stack, interval})
		(endif)
		(d-call 'array 'get_length {stack} {_, length})
		(breakif {length == start})
		(call 'array 'get_back {stack} {_, interval})
		(d-call 'array 'pop_back {stack})
	(loop-end)

	(exit 'array 'sort {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'array 'slice)
	;inputs
	;r0 = array object (ptr)
	;r1 = element start index (uint)
	;r2 = element end index (uint)
	;outputs
	;r0 = array object (ptr)
	;r1 = slice array object (ptr)
	;trashes
	;r1-r8

	;save inputs
	(entry 'array 'slice '(r6 r7 r8))

	;create new array
	(call 'array 'create '() '(r0))
	(vp-cpy-rr r8 r1)
	(vp-sub-rr r7 r1)
	(vp-cpy-ri-i r1 r0 array_length)
	(call 'array 'set_capacity '(r0 r1) '(r1))
	(vp-cpy-rr r6 r0)

	;copy elements
	(vpif '(r7 != r8))
		(vp-cpy-ir r0 array_array r2)
		(vp-cpy-ir r1 array_array r3)
		(vp-shl-cr (log2 ptr_size) r7)
		(vp-shl-cr (log2 ptr_size) r8)
		(vp-add-rr r2 r8)
		(vp-add-rr r7 r2)
		(loop-start)
			(vp-cpy-ir r2 0 r4)
			(vp-add-cr ptr_size r2)
			(vp-cpy-ri r4 r3 0)
			(vp-add-cr ptr_size r3)
		(loop-until '(r2 == r8))
	(endif)

	(exit 'array 'slice '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'array 'append)
	;inputs
	;r0 = array object (ptr)
	;r1 = source array object (ptr)
	;r2 = element start index (uint)
	;r3 = element end index (uint)
	;outputs
	;r0 = array object (ptr)
	;trashes
	;r1-r9

	;save inputs
	(entry 'array 'append '(r0 r1 r2 r3))

	(vpif '(r2 != r3))
		;save inputs
		(vp-cpy-rr r1 r6)
		(vp-cpy-rr r2 r7)
		(vp-cpy-rr r3 r8)

		;extend array
		(vp-cpy-ir-ui r0 array_length r9)
		(vp-sub-rr r2 r3)
		(vp-lea-d r3 r9 r1)
		(vp-cpy-ri-i r1 r0 array_length)
		(call 'array 'set_capacity '(r0 r1) '(r0))

		;append elements
		(vp-cpy-ir r0 array_array r3)
		(vp-cpy-ir r6 array_array r2)
		(vp-shl-cr (log2 ptr_size) r7)
		(vp-shl-cr (log2 ptr_size) r8)
		(vp-shl-cr (log2 ptr_size) r9)
		(vp-add-rr r2 r8)
		(vp-add-rr r7 r2)
		(vp-add-rr r9 r3)
		(loop-start)
			(vp-cpy-ir r2 0 r4)
			(vp-add-cr ptr_size r2)
			(vp-cpy-ri r4 r3 0)
			(vp-add-cr ptr_size r3)
		(loop-until '(r2 == r8))
	(endif)

	(exit 'array 'append '(r0))
	(vp-ret)

(def-func-end)

(def-method 'array 'cat)
	;inputs
	;r0 = array object (ptr)
	;r1 = vector of array objects (ptr)
	;outputs
	;r0 = 0 if error, else new array object (ptr)
	;trashes
	;r0-r11

	(entry 'array 'cat '(_ r1))

	(call 'array 'get_iters '(r1) '(_ r10 r11))
	(call 'array 'create nil '(r0))
	(vpif '(r0 != 0))
		(loop-start)
			(vp-cpy-ir r10 0 r1)
			(call 'array 'append '(r0 r1 0 (r1 array_length ui)) '(r0))
			(vp-add-cr ptr_size r10)
		(loop-until (list r10 '== r11))
	(endif)

	(exit 'array 'cat '(r0))
	(vp-ret)

(def-func-end)
