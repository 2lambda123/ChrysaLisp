(include 'sys/func.inc)
(include 'class/lisp/class.inc)
(include 'gui/points/class.inc)

(defun to-array (_)
	(entry 'array (sym (cat "lisp_" _)) '(r6 r8))
	(call _ 'create nil '(r7))
	(class/array/get_length r8 r1)
	(class/array/set_length r7 r1)
	(call _ 'set_capacity '(r7 r1))
	(call 'lisp 'env_args_set '(r8 (r7 array_begin) 0))
	(exit 'array (sym (cat "lisp_" _)) '(r6 r7))
	(vp-ret))

(def-method 'array 'lisp_array)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(to-array 'array)

(def-func-end)

(def-method 'array 'lisp_points)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(to-array 'points)

(def-func-end)

(def-method 'array 'lisp_clear)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(pptr 'iter_begin 'iter_end)
	(def-struct-end)

	(entry 'array 'lisp_clear '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type `(r1 (@ ,(f-path 'array 'vtable)) -1) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-alloc local_size)
	(class/array/get_both r1 r1 r2)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r2 rsp local_iter_end)
	(loop-start)
		(vp-cpy-ri r1 rsp local_iter_begin)
		(call 'array 'clear '((r1 0)) '(r0))
		(vp-cpy-ir rsp local_iter_begin r1)
		(vp-cpy-ir rsp local_iter_end r2)
		(vp-add-cr ptr_size r1)
	(loop-until '(r1 == r2))
	(call 'obj 'ref '(r0) '(r0))

	(exit 'array 'lisp_clear '((rsp local_this) r0))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0  "(clear array ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'array 'lisp_pop)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'array 'lisp_pop '(r0 r1))

(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 == 0) 'error))

	(vp-push r0)
	(class/array/bind_args r1 '(r0))
	(class/array/get_length r0 r1)
	(vpif '(r1 != 0))
		(call 'array 'ref_back '(r0) '(_ r1))
	(else)
		(vp-cpy-ir rsp 0 r1)
		(vp-cpy-ir r1 lisp_sym_nil r1)
		(class/obj/ref r1 r2)
	(endif)
	(vp-pop r0)

	(exit 'array 'lisp_pop '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(pop array)" error_msg_wrong_types r1))
	(signature '(array)))

(def-func-end)

(def-method 'array 'lisp_push)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;all but r0

	(entry 'array 'lisp_push '(r6 r7))

	(class/array/get_length r7 r3)
	(errorif '(r3 < 2) 'error)
	(class/array/bind_args r7 '(r0))
	(f-bind 'vector 'vtable r1)
	(vp-cpy-ir r0 obj_vtable r2)
	(vpif '(r1 == r2))
		(d-call 'vector 'append '(r0 r7 1 r3) '(r0))
	(else)
	(errorcases
		(call 'obj 'inst_of `(r0 (@ ,(f-path 'array 'vtable))) '(r0 r1))
		(gotoif '(r1 == 0) 'error))
		(class/array/get_length r0 r8)
		(vp-add-rr r3 r8)
		(vp-sub-cr 1 r8)
		(call 'array 'set_capacity '(r0 r8) '(r0))
		(call 'array 'get_end '(r0) '(r9 r1))
		(class/array/set_length r9 r8)
		(call 'lisp 'env_args_set '(r7 r1 1))
		(vp-cpy-rr r9 r0)
	(endif)
	(call 'obj 'ref '(r0) '(r0))

	(exit 'array 'lisp_push '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(push array form ...)" error_msg_wrong_types r7)))

(def-func-end)
