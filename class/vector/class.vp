(include 'sys/func.inc)
(include 'class/vector/class.inc)

(gen-create 'vector)
(gen-vtable 'vector)

(def-method 'vector 'deinit)
	;inputs
	;r0 = vector object (ptr)
	;trashes
	;all but r0

	(d-call 'vector 'clear '(r0) '(r0))
	(s-jump 'vector 'deinit '(r0))

(def-func-end)

(def-method 'vector 'clear)
	;inputs
	;r0 = vector object (ptr)
	;outputs
	;r0 = vector object (ptr)
	;trashes
	;all but r0

	;deref all elements
	(call 'vector 'for_each '(r0 0 (r0 array_length ui) ($ callback) 0) '(r0 _))
	(s-call 'vector 'clear '(r0) '(r0))
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (pptr)
	;outputs
	;r1 = 0 if break, else not

	(call 'obj 'deref '((r1 0)) '(r1))
	(vp-ret)

(def-func-end)

(def-method 'vector 'pop_back)
	;inputs
	;r0 = vector object (ptr)
	;outputs
	;r0 = vector object (ptr)
	;trashes
	;all but r0

	(vp-cpy-ir-ui r0 array_length r1)
	(vp-push r0)
	(vp-sub-cr 1 r1)
	(vp-cpy-ri-i r1 r0 array_length)
	(vp-cpy-ir r0 array_array r0)
	(vp-shl-cr (log2 ptr_size) r1)
	(call 'obj 'deref '((r0 r1)))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-method 'vector 'ref_back)
	;inputs
	;r0 = vector object (ptr)
	;outputs
	;r0 = vector object (ptr)
	;r1 = element object (ptr)
	;trashes
	;r2

	(vp-cpy-ir-ui r0 array_length r1)
	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r0 array_array r0)
	(vp-sub-cr 1 r1)
	(vp-shl-cr (log2 ptr_size) r1)
	(call 'obj 'ref '((r0 r1)) '(r1))
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-method 'vector 'ref_element)
	;inputs
	;r0 = vector object (ptr)
	;r1 = element index (uint)
	;outputs
	;r0 = vector object (ptr)
	;r1 = element object (ptr)
	;trashes
	;r2

	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r0 array_array r0)
	(vp-shl-cr (log2 ptr_size) r1)
	(call 'obj 'ref '((r0 r1)) '(r1))
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-method 'vector 'set_element)
	;inputs
	;r0 = vector object (ptr)
	;r1 = element object (ptr)
	;r2 = element index (uint)
	;outputs
	;r0 = vector object (ptr)
	;trashes
	;all but r0

	(vp-cpy-ir r0 array_array r3)
	(vp-shl-cr (log2 ptr_size) r2)
	(vp-push r0)
	(vp-cpy-dr r2 r3 r0)
	(vp-cpy-rd r1 r2 r3)
	(call 'obj 'deref '(r0))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-method 'vector 'slice)
	;inputs
	;r0 = vector object (ptr)
	;r1 = element start index (uint)
	;r2 = element end index (uint)
	;outputs
	;r0 = vector object (ptr)
	;r1 = slice vector object (ptr)
	;trashes
	;r1-r8

	;save inputs
	(entry 'vector 'slice '(r6 r7 r8))

	;create new vector
	(call 'vector 'create '() '(r0))
	(vp-cpy-rr r8 r1)
	(vp-sub-rr r7 r1)
	(vp-cpy-ri-i r1 r0 array_length)
	(call 'vector 'set_capacity '(r0 r1) '(r1))
	(vp-cpy-rr r6 r0)

	;copy and ref elements
	(vpif '(r7 != r8))
		(vp-cpy-ir r0 array_array r2)
		(vp-cpy-ir r1 array_array r3)
		(vp-shl-cr (log2 ptr_size) r7)
		(vp-shl-cr (log2 ptr_size) r8)
		(vp-add-rr r2 r8)
		(vp-add-rr r7 r2)
		(loop-start)
			(vp-cpy-ir r2 0 r4)
			(vp-add-cr ptr_size r2)
			(vp-cpy-ir-ui r4 obj_count r5)
			(vp-cpy-ri r4 r3 0)
			(vp-add-cr ptr_size r3)
			(vp-add-cr 1 r5)
			(vp-cpy-ri-i r5 r4 obj_count)
		(loop-until '(r2 == r8))
	(endif)

	(exit 'vector 'slice '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'vector 'append)
	;inputs
	;r0 = vector object (ptr)
	;r1 = source vector object (ptr)
	;r2 = element start index (uint)
	;r3 = element end index (uint)
	;outputs
	;r0 = vector object (ptr)
	;trashes
	;r1-r9

	;save inputs
	(entry 'vector 'append '(r0 r6 r7 r8))

	;extend vector
	(vp-cpy-ir-ui r0 array_length r9)
	(vp-cpy-rr r8 r2)
	(vp-sub-rr r7 r2)
	(vp-lea-d r2 r9 r1)
	(vp-cpy-ri-i r1 r0 array_length)
	(call 'vector 'set_capacity '(r0 r1))

	;append and ref elements
	(vpif '(r7 != r8))
		(vp-cpy-ir r0 array_array r3)
		(vp-cpy-ir r6 array_array r2)
		(vp-shl-cr (log2 ptr_size) r7)
		(vp-shl-cr (log2 ptr_size) r8)
		(vp-shl-cr (log2 ptr_size) r9)
		(vp-add-rr r2 r8)
		(vp-add-rr r7 r2)
		(vp-add-rr r9 r3)
		(loop-start)
			(vp-cpy-ir r2 0 r4)
			(vp-add-cr ptr_size r2)
			(vp-cpy-ir-ui r4 obj_count r5)
			(vp-cpy-ri r4 r3 0)
			(vp-add-cr ptr_size r3)
			(vp-add-cr 1 r5)
			(vp-cpy-ri-i r5 r4 obj_count)
		(loop-until '(r2 == r8))
	(endif)

	(exit 'vector 'append '(r0))
	(vp-ret)

(def-func-end)
