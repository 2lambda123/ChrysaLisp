(include 'sys/func.inc)
(include 'class/vector/class.inc)

(gen-create 'vector)
(gen-vtable 'vector)

(def-method 'vector 'deinit)
	;inputs
	;r0 = vector object (ptr)
	;outputs
	;r0 = vector object (ptr)
	;trashes
	;r1-r14

	(entry 'vector 'deinit '(r0))

	(d-call 'vector 'clear '(r0) '(r0))
	(s-jump 'vector 'deinit '(r0))

(def-func-end)

(def-method 'vector 'clear)
	;inputs
	;r0 = vector object (ptr)
	;outputs
	;r0 = vector object (ptr)
	;trashes
	;r1-r14

	(entry 'vector 'clear '(r0))

	;deref all elements
	(class/array/get_both r0 r1 r2)
	(vp-push r0)
	(loop-while '(r1 /= r2))
		(vp-push r1 r2)
		(call 'obj 'deref '((r1 0)))
		(vp-pop r1 r2)
		(vp-add-cr ptr_size r1)
	(loop-end)
	(vp-pop r0)
	(s-call 'vector 'clear '(r0) '(r0))

	(exit 'vector 'clear '(r0))
	(vp-ret)

(def-func-end)

(def-method 'vector 'ref_element)
	;inputs
	;r0 = vector object (ptr)
	;r1 = element index (uint)
	;outputs
	;r0 = vector object (ptr)
	;r1 = element object (ptr)
	;trashes
	;r1-r2

	(entry 'vector 'ref_element '(r0 r1))

	(class/array/get_element r0 r1 r1 r2)
	(class/obj/ref r1 r2)

	(exit 'vector 'ref_element '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'vector 'ref_back)
	;inputs
	;r0 = vector object (ptr)
	;outputs
	;r0 = vector object (ptr)
	;r1 = element object (ptr)
	;trashes
	;r1-r2

	(entry 'vector 'ref_back '(r0))

	(call 'vector 'pop_back '(r0) '(r0 r1))

	(exit 'vector 'ref_back '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'vector 'set_element)
	;inputs
	;r0 = vector object (ptr)
	;r1 = element object (ptr)
	;r2 = element index (uint)
	;outputs
	;r0 = vector object (ptr)
	;trashes
	;r1-r14

	(entry 'vector 'set_element '(r0 r1 r2))

	(assign '((r0 array_begin)) '(r3))
	(vp-shl-cr (log2 ptr_size) r2)
	(vp-push r0)
	(assign '((r2 r3) r1) '(r0 (r2 r3)))
	(call 'obj 'deref '(r0))
	(vp-pop r0)

	(exit 'vector 'set_element '(r0))
	(vp-ret)

(def-func-end)

(def-method 'vector 'slice)
	;inputs
	;r0 = vector object (ptr)
	;r1 = element start index (uint)
	;r2 = element end index (uint)
	;outputs
	;r0 = vector object (ptr)
	;r1 = slice vector object (ptr)
	;trashes
	;r1-r8

	;save inputs
	(entry 'vector 'slice '(r6 r7 r8))

	;create new vector
	(call 'vector 'create nil '(r0))
	(vp-cpy-rr r8 r1)
	(vp-sub-rr r7 r1)
	(assign '(r1) '((r0 array_length)))
	(call 'vector 'set_capacity '(r0 r1) '(r1))
	(vp-cpy-rr r6 r0)

	;copy and ref elements
	(vpif '(r7 /= r8))
		(class/array/get_iters r0 r7 r8 r2)
		(assign '((r1 array_begin)) '(r3))
		(loop-start)
			(assign '((r7 0)) '(r2))
			(vp-add-cr ptr_size r7)
			(assign '(r2) '((r3 0)))
			(vp-add-cr ptr_size r3)
			(class/obj/ref r2 r4)
		(loop-until '(r7 = r8))
	(endif)

	(exit 'vector 'slice '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'vector 'append)
	;inputs
	;r0 = vector object (ptr)
	;r1 = source vector object (ptr)
	;r2 = element start index (uint)
	;r3 = element end index (uint)
	;outputs
	;r0 = vector object (ptr)
	;trashes
	;r1-r9

	(entry 'vector 'append '(r0 r1 r2 r3))

	(vpif '(r2 /= r3))
		;save inputs
		(assign '(r1 r2 r3) '(r6 r7 r8))

		;extend vector
		(assign '((r0 array_length)) '(r9))
		(vp-sub-rr r2 r3)
		(assign '((& r3 r9)) '(r1))
		(assign '(r1) '((r0 array_length)))
		(call 'vector 'set_capacity '(r0 r1) '(r0))

		;append and ref elements
		(class/array/get_iters r6 r7 r8 r1)
		(class/array/get_iter r0 r9 r1)
		(loop-start)
			(assign '((r7 0)) '(r1))
			(vp-add-cr ptr_size r7)
			(assign '(r1) '((r9 0)))
			(vp-add-cr ptr_size r9)
			(class/obj/ref r1 r2)
		(loop-until '(r7 = r8))
	(endif)

	(exit 'vector 'append '(r0))
	(vp-ret)

(def-func-end)
