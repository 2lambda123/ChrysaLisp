(include 'sys/func.inc)
(include 'class/num/class.inc)
(include 'class/sym/class.inc)
(include 'class/lisp/class.inc)

(def-method 'vector 'lisp_list)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'vector 'lisp_list '(r9 r1))

	(d-call 'vector 'slice '(r1 0 (r1 array_length ui)) '(_ r1))

	(exit 'vector 'lisp_list '(r9 r1))
	(vp-ret)

(def-func-end)

(def-method 'vector 'lisp_elemset)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'seq)
	(pptr 'iter_begin)
	(int 'length 'index)

	(push-scope)
	(entry 'vector 'lisp_elemset {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 3})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {value, seq})
	(call 'num 'get_value {value} {_, index})
	(d-call 'vector 'get_length {seq} {_, length})
	(vpif {index < 0})
		(assign {length + index + 1} {index})
	(endif)
	(errorif {index < 0 || index >= length} 'error2)
	(call 'obj 'ref {iter_begin[ptr_size * 2]} {value})
	(call 'obj 'ref {value})
	(d-call 'vector 'set_element {seq, value, index})

	(exit 'vector 'lisp_elemset {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(elem-set index list val)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(elem-set index list val)", error_msg_not_valid_index, args})
	(signature 'sig 'num 'vector 'obj))

	(pop-scope-syms)

(def-func-end)

(def-method 'vector 'lisp_merge)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_iter_begin r_iter_end r_dlist r_slist r_length r_vtable r_cmp)
		'(r6 r7 r8 r9 r10))

	(entry 'vector 'lisp_merge (list r_this r_args))

(errorcases
	(call 'lisp 'env_args_type `(,r_args ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error))

	(call 'vector 'get_first (list r_args) (list '_ r_dlist))
	(call 'vector 'get_second (list r_args) (list '_ r_slist))
	(call 'vector 'get_iters (list r_slist) (list r_slist r_iter_begin r_iter_end))
	(d-call 'vector 'get_length (list r_slist) (list '_ r_length))
	(call 'vector 'set_capacity (list r_dlist r_length))
	(loop-while (list r_iter_begin '!= r_iter_end))
		(vp-cpy-ir r_iter_begin 0 r_args)
		(vp-add-cr ptr_size r_iter_begin)
	(errorcases
		(assign `((,r_args obj_vtable) (@ ,(f-path 'sym 'vtable))) (list r_vtable r_cmp))
		(gotoif (list r_vtable '!= r_cmp) 'error))
		(call 'vector 'find (list r_dlist r_args) (list '_ r_length))
		(continueif (list r_length '!= -1))
		(call 'obj 'ref (list r_args))
		(call 'vector 'push_back (list r_dlist r_args))
	(loop-end)
	(call 'obj 'ref (list r_dlist))

	(exit 'vector 'lisp_merge (list r_this r_dlist))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error (list r_this "(merge-sym dlist slist) -> dlist" error_msg_wrong_types r_args))
	(signature 'sig 'vector 'vector))

(def-func-end)

(def-method 'vector 'lisp_part)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(def-struct 'pdata)
		(ptr 'this)
		(ptr 'func)
		(ptr 'params)
	(def-struct-end)

	(ptr 'this 'func)
	(union
		'(ptr 'args)
		'(ptr 'params))

	(ptr 'value 'list)
	(pptr 'iter_begin 'liter 'hiter)
	(int 'start 'end)
(errorcases
	(int 'length))

	(push-scope)
	(entry 'vector 'lisp_part {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 4})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0]} {func})
	(assign {iter_begin[ptr_size]} {list})
	(call 'num 'get_value {iter_begin[ptr_size * 2]} {_, start})
	(call 'num 'get_value {iter_begin[ptr_size * 3]} {_, end})
(errorcases
	(d-call 'vector 'get_length {list} {_, length})
	(gotoif {start < 0 || start >= end || end > length} 'error2))

	(call 'vector 'create nil {params})
	(call 'vector 'get_iter {list, start} {_, liter})
	(call 'vector 'get_iter {list, end} {_, hiter})
	(call 'vector 'partition {list, liter, hiter, $callback, &this} {_, liter})
	(call 'vector 'get_begin {list} {_, iter_begin})
	(call 'num 'create {(liter - iter_begin) >> 3} {value})
	(call 'vector 'deref {params})
	(call 'sys_task 'yield)

	(exit 'vector 'lisp_part {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(partition lambda list start end)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(partition lambda list start end)", error_msg_not_valid_index, args})
	(signature 'sig 'obj 'vector 'num 'num))

	(pop-scope-syms)

(vp-label 'callback)
	(ptr 'pdata)
	(union
		'(pptr 'liter)
		'(ptr 'value))
	(union
		'(pptr 'hiter)
		'(int 'result))

	(push-scope)
	(entry 'array 'sort_callback {pdata, liter, hiter})

	(call 'obj 'ref {*liter} {liter})
	(call 'obj 'ref {*hiter} {hiter})
	(d-call 'vector 'clear {pdata->pdata_params})
	(call 'vector 'push_back {pdata->pdata_params, liter})
	(call 'vector 'push_back {pdata->pdata_params, hiter})
	(call 'lisp 'repl_apply {pdata->pdata_this, pdata->pdata_params, pdata->pdata_func} {_, value})
	(assign {0} {result})
	(vpif (cat {value->obj_vtable == @} (f-path 'num 'vtable)))
		(call 'num 'get_value {value} {_, result})
	(endif)
	(call 'obj 'deref {value})

	(exit 'array 'sort_callback {result})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'vector 'lisp_match)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_value1 r_value2 r_iter r_iter_begin r_iter_end r_wild) '(r6 r7))

	(entry 'vector 'lisp_match (list r_this r_args))

(errorcases
	(call 'lisp 'env_args_type `(,r_args ($ sig) 2))
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir r_args array_array r_iter_begin)
	(vp-cpy-ir r_iter_begin 0 r_value1)
	(vp-cpy-ir r_iter_begin ptr_size r_value2)
	(vp-cpy-ir-ui r_value1 array_length r_iter_end)
	(vp-cpy-ir-ui r_value2 array_length r_iter_begin)
	(vpif (list r_iter_begin '== r_iter_end))
		(vp-cpy-ir r_value1 array_array r_iter_begin)
		(vp-cpy-ir r_value2 array_array r_iter)
		(vp-shl-cr (log2 ptr_size) r_iter_end)
		(vp-add-rr r_iter_begin r_iter_end)
		(vpif (list r_iter_begin '!= r_iter_end))
			(vp-cpy-ir r_this lisp_sym_underscore r_wild)
			(loop-start)
				(vp-cpy-ir r_iter_begin 0 r_value1)
				(vp-cpy-ir r_iter 0 r_value2)
				(vp-add-cr ptr_size r_iter_begin)
				(vp-add-cr ptr_size r_iter)
				(vpif (list r_value1 '!= r_value2))
					(gotoif (list r_value2 '!= r_wild) 'nomatch)
				(endif)
			(loop-until (list r_iter_begin '== r_iter_end))
		(endif)
		(vp-cpy-ir r_this lisp_sym_t r_value1)
	(else)
	(vp-label 'nomatch)
		(vp-cpy-ir r_this lisp_sym_nil r_value1)
	(endif)
	(call 'obj 'ref (list r_value1))

	(exit 'vector 'lisp_match (list r_this r_value1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(match? list list)" error_msg_wrong_types r_args))
	(signature 'sig 'vector 'vector))

(def-func-end)
