(include 'sys/func.inc)
(include 'class/num/class.inc)
(include 'class/sym/class.inc)
(include 'class/lisp/class.inc)

(def-method 'vector 'lisp_list)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'vector 'lisp_list '(r9 r1))

	(d-call 'vector 'slice '(r1 0 (r1 array_length ui)) '(_ r1))

	(exit 'vector 'lisp_list '(r9 r1))
	(vp-ret)

(def-func-end)

(def-method 'vector 'lisp_elemset)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'vector 'lisp_elemset '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 3) '(r1))
	(gotoif '(r1 == 0) 'error1))

	(vp-cpy-ir r7 array_array r1)
	(vp-cpy-ir r1 0 r2)
	(vp-cpy-ir r1 ptr_size r0)
	(vp-cpy-ir r1 (mul ptr_size 2) r1)
	(vp-cpy-ir r2 num_value r2)
	(vp-cpy-ir-ui r0 array_length r3)
	(vpif '(r2 < 0))
		(vp-add-rr r3 r2)
		(vp-add-cr 1 r2)
	(endif)
(errorcases
	(gotoif '(r2 < 0) 'error2)
	(gotoif '(r2 >= r3) 'error2))
	(vp-push r6 r1)
	(vp-cpy-ir-ui r1 obj_count r3)
	(vp-add-cr 2 r3)
	(vp-cpy-ri-i r3 r1 obj_count)
	(d-call 'vector 'set_element '(r0 r1 r2))
	(vp-pop r0 r1)

	(exit 'vector 'lisp_elemset '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r6 "(elem-set index list val)" error_msg_wrong_types r7))
(vp-label 'error2)
	(jump 'lisp 'repl_error '(r6 "(elem-set index list val)" error_msg_not_valid_index r7))
	(signature 'sig 'num 'vector 'obj))

(def-func-end)

(def-method 'vector 'lisp_merge)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'vector 'lisp_merge '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2) '(r1))
	(gotoif '(r1 == 0) 'error))

	(vp-cpy-ir r7 array_array r1)
	(vp-cpy-ir r1 0 r10)
	(vp-cpy-ir r1 ptr_size r7)

(errorcases
	(call 'lisp 'env_args_type `(r7 (@ ,(f-path 'sym 'vtable)) 0) '(r1))
	(gotoif '(r1 == 0) 'error))

	(call 'vector 'get_iters '(r7) '(r0 r8 r7))
	(call 'vector 'set_capacity '(r10 (r0 array_length ui)) '(r0))
	(loop-while '(r8 != r7))
		(vp-cpy-ir r8 0 r1)
		(vp-add-cr ptr_size r8)
		(call 'vector 'find '(r0 r1) '(r0 r1 r2))
		(continueif '(r2 != -1))
		(vp-cpy-ir-ui r1 obj_count r2)
		(vp-add-cr 1 r2)
		(vp-cpy-ri-i r2 r1 obj_count)
		(call 'vector 'push_back '(r0 r1) '(r0 _))
	(loop-end)
	(call 'obj 'ref '(r0) '(r0))

	(exit 'vector 'lisp_merge '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r6 "(merge-sym dlist slist) -> dlist" error_msg_wrong_types r7))
	(signature 'sig 'vector 'vector))

(def-func-end)

(def-method 'vector 'lisp_part)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(def-struct 'pdata)
		(ptr 'this)
		(ptr 'func)
		(ptr 'params)
	(def-struct-end)

	(ptr 'this 'func)
	(union
		'(ptr 'args)
		'(ptr 'params))

	(ptr 'value 'list)
	(pptr 'iter_begin 'liter 'hiter)
	(int 'start 'end)
(errorcases
	(int 'length))

	(push-scope)
	(entry 'vector 'lisp_part {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 4} '(r1))
	(gotoif '(r1 == 0) 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0]} {func})
	(assign {iter_begin[ptr_size]} {list})
	(call 'num 'get_value {iter_begin[ptr_size * 2]} {_, start})
	(call 'num 'get_value {iter_begin[ptr_size * 3]} {_, end})
(errorcases
	(d-call 'vector 'get_length {list} {_, length})
	(gotoif {start < 0 || start >= end || end > length} 'error2))

	(call 'vector 'create nil {params})
	(call 'vector 'get_iter {list, start} {_, liter})
	(call 'vector 'get_iter {list, end} {_, hiter})
	(call 'vector 'partition {list, liter, hiter, $callback, &this} {_, liter})
	(call 'vector 'get_begin {list} {_, iter_begin})
	(call 'num 'create {(liter - iter_begin) >> 3} {value})
	(call 'vector 'deref {params})
	(call 'sys_task 'yield)

	(exit 'vector 'lisp_part {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(partition lambda list start end)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp 'repl_error {this, "(partition lambda list start end)", error_msg_not_valid_index, args})
	(signature 'sig 'obj 'vector 'num 'num))

	(pop-scope-syms)

(vp-label 'callback)
	(ptr 'pdata)
	(union
		'(pptr 'liter)
		'(ptr 'value))
	(union
		'(pptr 'hiter)
		'(int 'result))

	(push-scope)
	(entry 'array 'sort_callback {pdata, liter, hiter})

	(call 'obj 'ref {*liter} {liter})
	(call 'obj 'ref {*hiter} {hiter})
	(d-call 'vector 'clear {pdata->pdata_params})
	(call 'vector 'push_back {pdata->pdata_params, liter})
	(call 'vector 'push_back {pdata->pdata_params, hiter})
	(call 'lisp 'repl_apply {pdata->pdata_this, pdata->pdata_params, pdata->pdata_func} {_, value})
	(assign {0} {result})
	(vpif (cat {value->obj_vtable == @} (f-path 'num 'vtable)))
		(call 'num 'get_value {value} {_, result})
	(endif)
	(call 'obj 'deref {value})

	(exit 'array 'sort_callback {result})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'vector 'lisp_match)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'vector 'lisp_match '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 2) '(r1))
	(gotoif '(r1 == 0) 'error1))

	(vp-cpy-ir r7 array_array r3)
	(vp-cpy-ir r3 0 r0)
	(vp-cpy-ir r3 ptr_size r1)
	(vp-cpy-ir-ui r0 array_length r4)
	(vp-cpy-ir-ui r1 array_length r3)
	(vpif '(r3 == r4))
		(vp-cpy-ir r0 array_array r3)
		(vp-cpy-ir r1 array_array r2)
		(vp-shl-cr (log2 ptr_size) r4)
		(vp-add-rr r3 r4)
		(vpif '(r3 != r4))
			(vp-cpy-ir r6 lisp_sym_underscore r5)
			(loop-start)
				(vp-cpy-ir r3 0 r0)
				(vp-cpy-ir r2 0 r1)
				(vp-add-cr ptr_size r3)
				(vp-add-cr ptr_size r2)
				(vpif '(r0 != r1))
					(gotoif '(r1 != r5) 'nomatch)
				(endif)
			(loop-until '(r3 == r4))
		(endif)
		(vp-cpy-ir r6 lisp_sym_t r0)
	(else)
	(vp-label 'nomatch)
		(vp-cpy-ir r6 lisp_sym_nil r0)
	(endif)
	(call 'obj 'ref '(r0) '(r0))

	(exit 'vector 'lisp_match '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r6 "(match? list list)" error_msg_wrong_types r7))
	(signature 'sig 'vector 'vector))

(def-func-end)
