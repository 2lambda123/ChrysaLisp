(include 'sys/func.inc)
(include 'class/obj/class.inc)

(gen-vtable 'obj)

(when (> *debug_mode* 1)
(def-method 'obj 'deinit)
	;inputs
	;r0 = object (ptr)
	;trashes
	;all

	(entry 'obj 'deinit '(r0))

	(assign '((& r0 (- sys_mem_header_node sys_mem_header_size))) '(r1))
	(ln-remove-node r1 r2)

	(exit 'obj 'deinit '(r0))
	(vp-ret)

(def-func-end))

(def-method 'obj 'destroy)
	;inputs
	;r0 = object (ptr)
	;trashes
	;all

	(entry 'obj 'destroy '(r0))

	(call 'obj 'deinit '(r0) '(r0))
	(jump 'sys_mem 'free '(r0))

(def-func-end)

(def-method 'obj 'hash)
	;inputs
	;r0 = object (ptr)
	;outputs
	;r0 = object (ptr)
	;r1 = hash code (ulong)
	;trashes
	;all but r0

	(entry 'obj 'hash '(r0))
	(exit 'obj 'hash '(r0 r0))
	(vp-ret)

(def-func-end)

(def-method 'obj 'inst_of)
	;inputs
	;r0 = object (ptr)
	;r1 = vtable of tested type (ptr)
	;outputs
	;r0 = object (ptr)
	;r1 = 0 if not, else vtable of object (ptr)
	;trashes
	;r2

	(entry 'obj 'inst_of '(r0 r2))

	(vp-lea-i r0 obj_vtable r1)
	(loop-start)
		(assign '((r1 ln_fnode_next)) '(r1))
		(gotoif '(r1 = 0) 'funcexit)
	(loop-until '(r1 = r2))
	(assign '((r0 obj_vtable)) '(r1))
(vp-label 'funcexit)

	(exit 'obj 'inst_of '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'obj 'null)

	(vp-ret)

(def-func-end)

(def-method 'obj 'deref)
	;inputs
	;r0 = object (ptr)
	;trashes
	;all

	(entry 'obj 'deref '(r0))

	;destroy if 1
	(assign '((r0 obj_count)) '(r1))
	(vpif '(r1 = 1))
		(jump 'obj 'destroy '(r0))
	(endif)

	;dec ref count
	(vp-sub-cr 1 r1)
	(assign '(r1) '((r0 obj_count)))
	(vp-ret)

(def-func-end)

(def-method 'obj 'deref_if)
	;inputs
	;r0 = 0, else object (ptr)
	;trashes
	;all

	(entry 'obj 'deref_if '(r0))

	(vpif '(r0 /= 0))
		(jump 'obj 'deref '(r0))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'obj 'ref_if)
	;inputs
	;r0 = 0, else object (ptr)
	;outputs
	;r0 = 0, else object (ptr)
	;trashes
	;r1

	(entry 'obj 'ref_if '(r0))

	;inc ref count
	(vpif '(r0 /= 0))
		(call 'obj 'ref '(r0) '(r0))
	(endif)

	(exit 'obj 'ref_if '(r0))
	(vp-ret)

(def-func-end)
