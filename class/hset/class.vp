(include 'sys/func.inc)
(include 'class/vector/class.inc)
(include 'class/hset/class.inc)

(gen-create 'hset)
(gen-vtable 'hset)

(def-method 'hset 'init)
	;inputs
	;r0 = hset object (ptr)
	;r1 = vtable (pptr)
	;r2 = 0, else key compare callback (ptr)
	;r3 = num buckets (uint)
	;outputs
	;r0 = hset object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r2-r5

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset 'init '(r0 r1 r2 r3))
	(assign '(r0 r2 r3) '((rsp local_this) (r0 hset_key_callback) (r0 hset_num_buckets i)))

	;init parent
	(s-call 'hset 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(call 'vector 'create nil '(r0))
		(vp-cpy-ir rsp local_this r1)
		(vp-cpy-ri r0 r1 hset_buckets)
		(vp-cpy-ir-ui r1 hset_num_buckets r1)
		(vpif '(r1 != 1))
			(class/array/set_length r0 r1)
			(call 'vector 'set_capacity '(r0 r1))
			(class/array/get_both r0 r3 r4)
			(loop-start)
				(call 'vector 'create nil '((r3 0)))
				(vp-add-cr ptr_size r3)
			(loop-until '(r3 == r4))
		(endif)
		(vp-cpy-ir rsp local_this r0)
	(endif)

	(exit 'hset 'init '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset 'deinit)
	;inputs
	;r0 = hset object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;all but r0

	(entry 'hset 'deinit '(r0))

	(vp-push r0)
	(call 'vector 'deref '((r0 hset_buckets)))
	(vp-pop r0)
	(s-jump 'hset 'deinit '(r0))

(def-func-end)

(def-method 'hset 'clear)
	;inputs
	;r0 = hset object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;all but r0

	(entry 'hset 'clear '(r0))

	;clear all buckets
	(vp-push r0)
	(vp-cpy-ir-ui r0 hset_num_buckets r1)
	(vp-cpy-ir r0 hset_buckets r0)
	(vpif '(r1 == 1))
		(d-call 'vector 'clear '(r0))
	(else)
		(class/array/get_both r0 r1 r2)
		(loop-start)
			(vp-push r1 r2)
			(d-call 'vector 'clear '((r1 0)))
			(vp-pop r1 r2)
			(vp-add-cr ptr_size r1)
		(loop-until '(r1 == r2))
	(endif)
	(vp-pop r0)

	(exit 'hset 'clear '(r0))
	(vp-ret)

(def-func-end)

(def-method 'hset 'copy)
	;inputs
	;r0 = hset object (ptr)
	;r1 = num buckets (uint)
	;outputs
	;r0 = hset object (ptr)
	;r1 = hset copy object (ptr)
	;trashes
	;all but r0

	(entry 'hset 'copy '(r0 r1))

	(vp-cpy-rr r0 r8)
	(call 'hset 'create '((r0 hset_key_callback) r1) '(r0))
	(vp-push r0)
	(call 'hset 'for_each '(r8 ($ callback) rsp))
	(vp-pop r1)

	(exit 'hset 'copy '(r0 r1))
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (pptr)
	;outputs
	;r1 = 0 if break, else not

	(entry 'hset 'each_callback '(r0 r1))

	(vp-cpy-ir r0 0 r2)
	(call 'obj 'ref '((r1 0)))
	(vp-push r0)
	(call 'hset 'get_bucket '(r2 r0) '(_ r0))
	(vp-pop r1)
	(jump 'vector 'push_back '(r0 r1))

(def-func-end)

(def-method 'hset 'erase)
	;inputs
	;r0 = hset object (ptr)
	;r1 = element iterator (pptr)
	;r2 = bucket vector object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(ptr 'iter)
		(ptr 'bucket)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset 'erase '((rsp local_this) r1 (rsp local_bucket)))
	(assign '(r1) '((rsp local_iter)))

	;swap last entry for erased entry
	(call 'obj 'deref '((r1 0)))
	(vp-cpy-ir rsp local_bucket r0)
	(class/array/get_length r0 r1)
	(vp-sub-cr 1 r1)
	(class/array/set_length r0 r1)
	(vp-shl-cr (log2 ptr_size) r1)
	(class/array/get_begin r0 r0)
	(vp-add-rr r0 r1)
	(vp-cpy-ir rsp local_iter r0)
	(vpif '(r1 != r0))
		(vp-cpy-ir r1 0 r1)
		(vp-cpy-ri r1 r0 0)
	(endif)

	(exit 'hset 'erase '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset 'find)
	;inputs
	;r0 = hset object (ptr)
	;r1 = key object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;r1 = 0, else found iterator (pptr)
	;r2 = bucket vector object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(ptr 'key)
		(ptr 'bucket)
		(pptr 'iter_begin)
		(pptr 'iter_end)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset 'find '(r0 (rsp local_key)))

	(vp-cpy-ir r0 hset_key_callback r2)
	(vpif '(r2 == 0) 'exit)
		;search hash bucket
		(call 'hset 'get_bucket '(r0 r1) '(r0 r2))
		(class/array/get_both r2 r1 r3)
		(vp-cpy-ir rsp local_key r4)
		(loop-while '(r1 != r3))
			(vp-cpy-ir r1 0 r5)
			(breakif '(r4 == r5) 'exit)
			(vp-add-cr ptr_size r1)
		(loop-end)
		(vp-xor-rr r1 r1)
	(else)
		;search hash bucket
		(call 'hset 'get_bucket '(r0 r1) '(r0 r1))
		(vp-cpy-ri r0 rsp local_this)
		(vp-cpy-ri r1 rsp local_bucket)
		(class/array/get_both r1 r1 r2)
		(vp-cpy-ri r2 rsp local_iter_end)
		(loop-while '(r1 != r2))
			(vp-cpy-ri r1 rsp local_iter_begin)
			(vp-cpy-ir r1 0 r1)
			(vp-cpy-ir rsp local_this r2)
			(vp-cpy-ir rsp local_key r0)
			(vp-call-i r2 hset_key_callback)
			(vpif '(r1 == 0))
				(vp-cpy-ir rsp local_this r0)
				(vp-cpy-ir rsp local_iter_begin r1)
				(vp-cpy-ir rsp local_bucket r2)
				(break 'exit)
			(endif)
			(vp-cpy-ir rsp local_iter_begin r1)
			(vp-cpy-ir rsp local_iter_end r2)
			(vp-add-cr ptr_size r1)
		(loop-end)
		(vp-cpy-ir rsp local_this r0)
		(vp-cpy-ir rsp local_bucket r2)
		(vp-xor-rr r1 r1)
	(endif)

	(exit 'hset 'find '(r0 r1 r2))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset 'for_each)
	;inputs
	;r0 = hset object (ptr)
	;r1 = predicate function (ptr)
	;r2 = predicate data (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;r1-r2...
		;callback predicate
		;inputs
		;r0 = predicate data (ptr)
		;r1 = element iterator (pptr)
		;trashes
		;depends on the callback

	(def-struct 'local)
		(ptr 'this)
		(ptr 'predicate)
		(ptr 'predicate_data)
		(pptr 'iter_begin)
		(pptr 'iter_end)
		(pptr 'iter_begin1)
		(pptr 'iter_end1)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset 'for_each '(r0 (rsp local_predicate) (rsp local_predicate_data)))
	(vp-cpy-ri r0 rsp local_this)

	;for all buckets
	(vp-cpy-ir-ui r0 hset_num_buckets r1)
	(vp-cpy-ir r0 hset_buckets r0)
	(vpif '(r1 == 1))
		(class/array/get_both r0 r1 r2)
		(vp-cpy-ri r2 rsp local_iter_end)
		(loop-while '(r1 != r2))
			(vp-cpy-ri r1 rsp local_iter_begin)
			(vp-cpy-ir rsp local_predicate_data r0)
			(vp-call-i rsp local_predicate)
			(vp-cpy-ir rsp local_iter_begin r1)
			(vp-cpy-ir rsp local_iter_end r2)
			(vp-add-cr ptr_size r1)
		(loop-end)
	(else)
		(class/array/get_both r0 r1 r2)
		(vp-cpy-ri r2 rsp local_iter_end)
		(loop-while '(r1 != r2))
			(vp-cpy-ri r1 rsp local_iter_begin)
			(vp-cpy-ir r1 0 r0)
			(class/array/get_both r0 r1 r2)
			(vp-cpy-ri r2 rsp local_iter_end1)
			(loop-while '(r1 != r2))
				(vp-cpy-ri r1 rsp local_iter_begin1)
				(vp-cpy-ir rsp local_predicate_data r0)
				(vp-call-i rsp local_predicate)
				(vp-cpy-ir rsp local_iter_begin1 r1)
				(vp-cpy-ir rsp local_iter_end1 r2)
				(vp-add-cr ptr_size r1)
			(loop-end)
			(vp-cpy-ir rsp local_iter_begin r1)
			(vp-cpy-ir rsp local_iter_end r2)
			(vp-add-cr ptr_size r1)
		(loop-end)
	(endif)

	(exit 'hset 'for_each '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset 'get_bucket)
	;inputs
	;r0 = hset object (ptr)
	;r1 = key object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;r1 = bucket vector object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(uint 'length)
	(def-struct-end)

	(entry 'hset 'get_bucket '(r0 r1))

	;search hash bucket
	(vp-cpy-ir-ui r0 hset_num_buckets r2)
	(vpif '(r2 != 1))
		;save inputs
		(vp-alloc local_size)
		(assign '(r0 r2) '((rsp local_this) (rsp local_length i)))

		(call 'obj 'hash '(r1) '(_ r0))
		(vp-cpy-ir-ui rsp local_length r1)
		(vp-xor-rr r2 r2)
		(vp-div-rrr-u r1 r2 r0)
		(vp-cpy-ir rsp local_this r0)
		(call 'vector 'get_element '((r0 hset_buckets) r2) '(_ r1))

		(exit 'hset 'get_bucket '((rsp local_this) r1))
		(vp-free local_size)
		(vp-ret)
	(endif)

	(exit 'hset 'get_bucket '(r0 (r0 hset_buckets)))
	(vp-ret)

(def-func-end)

(def-method 'hset 'insert)
	;inputs
	;r0 = hset object (ptr)
	;r1 = key object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;r1 = element iterator (pptr)
	;r2 = bucket vector object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(ptr 'key)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset 'insert '(r0 r1))
	(assign '(r1) '((rsp local_key)))

	;search hash bucket
	(call 'hset 'find '(r0 r1) '(r0 r1 r2))
	(vpif '(r1 == 0))
		;new key
		(vp-cpy-ir rsp local_key r1)
		(vp-cpy-ri r0 rsp local_this)
		(vp-cpy-rr r2 r0)
		(class/obj/ref r1 r2)
		(call 'vector 'push_back '(r0 r1) '(r0 _ r2))
		(vp-lea-i r2 (neg ptr_size) r1)
		(vp-cpy-rr r0 r2)
		(vp-cpy-ir rsp local_this r0)
	(endif)

	(exit 'hset 'insert '(r0 r1 r2))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset 'get_both)
	;inputs
	;r0 = hset object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;r1 = begin iter pointer (pptr)
	;r2 = end iter pointer (pptr)
	;trashes
	;r3-r4

	(entry 'hset 'get_both '(r0))

	(vp-cpy-ir r0 hset_buckets r1)
	(vp-cpy-ir-ui r0 hset_num_buckets r3)
	(class/array/get_both r1 r1 r2)
	(vpif '(r3 != 1) 'lbreak)
		(loop-start)
			(vp-cpy-ir r1 0 r3)
			(class/array/get_length r3 r4)
			(vpif '(r4 != 0))
				(class/array/get_begin r3 r1)
				(loop-start)
					(vp-cpy-ir r2 (neg ptr_size) r3)
					(vp-sub-cr ptr_size r2)
					(class/array/get_length r3 r4)
				(loop-until '(r4 != 0))
				(class/array/get_begin r3 r2)
				(vp-shl-cr (log2 ptr_size) r4)
				(vp-add-rr r4 r2)
				(break 'lbreak)
			(endif)
			(vp-add-cr ptr_size r1)
		(loop-until '(r1 == r2))
	(endif)

	(exit 'hset 'get_both '(r0 r1 r2))
	(vp-ret)

(def-func-end)
