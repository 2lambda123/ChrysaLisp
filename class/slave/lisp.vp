(include 'sys/func.inc)
(include 'class/slave/class.inc)
(include 'class/lisp/class.inc)

(def-method 'slave 'lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(def-struct 'local)
		(ptr 'this)
		(ptr 'val)
		(ptr 'stdin)
		(ptr 'stdout)
		(ptr 'stderr)
	(def-struct-end)

	(entry 'slave 'lisp_create '(r0 r1))

(errorcases
	(vp-cpy-ir-ui r1 array_length r2)
	(gotoif '(r2 != 0) 'error))

	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(call 'slave 'create nil '(r0))
	(vpif '(r0 == 0))
		(vp-cpy-ir rsp local_this r0)
		(call 'obj 'ref '((r0 lisp_sym_nil)) '(r1))
	(else)
		;redirect lisp io
		(vp-cpy-ri r0 rsp local_val)
		(vp-cpy-ir rsp local_this r5)
		(vp-cpy-rr r0 r6)
		(vp-cpy-ir r5 lisp_stdin r0)
		(vp-cpy-ir r5 lisp_stdout r1)
		(vp-cpy-ir r5 lisp_stderr r2)
		(vp-cpy-ri r0 rsp local_stdin)
		(vp-cpy-ri r1 rsp local_stdout)
		(vp-cpy-ri r2 rsp local_stderr)
		(call 'obj 'ref '((r6 slave_stdin)) '((r5 lisp_stdin)))
		(call 'obj 'ref '((r6 slave_stdout)) '((r5 lisp_stdout)))
		(call 'obj 'ref '((r6 slave_stderr)) '((r5 lisp_stderr)))
		(call 'obj 'deref '((rsp local_stdin)))
		(call 'obj 'deref '((rsp local_stdout)))
		(call 'obj 'deref '((rsp local_stderr)))
		(vp-cpy-ir rsp local_val r1)
	(endif)

	(exit 'slave 'lisp_create '((rsp local_this) r1))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(create-slave)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'slave 'lisp_get_args)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(entry 'slave 'lisp_get_args '(r6 r7))

(errorcases
	(call 'lisp 'env_args_type '(r7 ($ sig) 1) '(r1))
	(gotoif '(r1 == 0) 'error1))

	(vp-cpy-ir r7 array_array r0)
	(vp-cpy-ir r0 0 r0)
	(call 'slave 'get_args '(r0) '(_ r0))
	(vpif '(r0 == 0))
		(vp-cpy-ir r6 lisp_sym_nil r0)
	(endif)
	(call 'obj 'ref '(r0) '(r0))

	(exit 'slave 'lisp_get_args '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error '(r6 "(slave-get-args slave)" error_msg_wrong_types r7))
	(signature 'sig 'slave))

(def-func-end)
