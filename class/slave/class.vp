(include 'sys/func.inc)
(include 'class/vector/class.inc)
(include 'class/out/class.inc)
(include 'class/in/class.inc)
(include 'class/str/class.inc)
(include 'class/slave/class.inc)

(gen-create 'slave)
(gen-vtable 'slave)

(def-method 'slave 'init)
	;inputs
	;r0 = slave object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = slave object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(ptr 'this 'stream 'msg 'data)
	(union
		'(ptr 'vtable)
		'(ulong 'ok))

	;read init args
	(push-scope)
	(entry 'slave 'init {this, vtable})

	;init parent
	(s-call 'slave 'init {this, vtable} {_, ok})
	(vpif {ok})
		;init myself
		(call 'sys_mail 'mymail nil {msg, data})
		(vpif {msg->msg_length})
			;create stdin, stdout, stderr
			(call 'sys_task 'mailbox nil {stream})
			(call 'in 'create {stream} {this->slave_stdin})
			(call 'out 'create {data->slave_msg_init_stdout_id.id_id} {this->slave_stdout})
			(call 'out 'create {data->slave_msg_init_stderr_id.id_id} {this->slave_stderr})

			;create args
			(call 'stream 'create {0, 0, &data->slave_msg_init_args, msg->msg_length - slave_msg_init_size} {stream})
			(call 'stream 'split {stream, char_space} {_, this->slave_args})
			(call 'stream 'deref {stream})

			;send back ack with stdin mailbox
			(assign {data->slave_msg_init_ack_id.id_id} {msg->msg_dest.id_id})
			(assign {this->slave_stdin->in_mbox_id} {data->slave_msg_init_stdin_mbox_id})
			(call 'sys_mail 'send {msg})
		(else)
			;abort
			(call 'sys_mail 'free {msg})
			(assign {0} {ok})
		(endif)
	(endif)

	(exit 'slave 'init {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'slave 'deinit)
	;inputs
	;r0 = slave object (ptr)
	;outputs
	;r0 = slave object (ptr)
	;trashes
	;all but r0

	(entry 'slave 'deinit '(r0))

	;flush remaining stdout, stderr
	(vp-push r0)
	(call 'out 'write_flush '((r0 slave_stderr)))

	;send stopping on stdout
	(assign '((rsp 0)) '(r0))
	(call 'out 'set_state '((r0 slave_stdout) stream_mail_state_stopping) '(r0))

	;free stdin, stdout and stderr
	(assign '((rsp 0)) '(r0))
	(call 'in 'deref '((r0 slave_stdin)))
	(assign '((rsp 0)) '(r0))
	(call 'out 'deref '((r0 slave_stdout)))
	(assign '((rsp 0)) '(r0))
	(call 'out 'deref '((r0 slave_stderr)))

	;free args
	(assign '((rsp 0)) '(r0))
	(call 'vector 'deref '((r0 slave_args)))
	(vp-pop r0)

	;deinit parent
	(s-jump 'slave 'deinit '(r0))

(def-func-end)
