(include 'sys/func.inc)
(include 'sys/string/class.inc)
(include 'class/string/class.inc)
(include 'class/error/class.inc)

(gen-create 'error)
(gen-vtable 'error)

(def-method 'error 'init)
	;inputs
	;r0 = error object (ptr)
	;r1 = vtable (pptr)
	;r2 = description c string (pubyte)
	;r3 = 0, else error msg index (uint)
	;r4 = error payload object (ptr)
	;r5 = filename c string (pubyte)
	;r6 = line number (uint)
	;outputs
	;r0 = error object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r6

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r0 r2 r3 r4 r5 r6) '((rsp local_this) (r0 error_description) (r0 error_msg i)
									(r0 error_object) (r0 error_file) (r0 error_line i)))

	;init parent
	(s-call 'error 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init self
		(call 'string 'create_from_cstr '((r0 error_description)) '(r0))
		(vp-cpy-ir rsp local_this r1)
		(vp-cpy-ri r0 r1 error_description)
		(call 'string 'create_from_cstr '((r1 error_file)) '(r0))
		(vp-cpy-ir rsp local_this r1)
		(vp-cpy-ri r0 r1 error_file)
		(call 'obj 'ref '((r1 error_object)))
		(vp-cpy-ir rsp local_this r0)
	(endif)

	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'error 'deinit)
	;inputs
	;r0 = error object (ptr)
	;outputs
	;r0 = error object (ptr)
	;trashes
	;all but r0

	(vp-push r0)
	(call 'obj 'deref '((r0 error_description)))
	(vp-cpy-ir rsp 0 r0)
	(call 'obj 'deref '((r0 error_file)))
	(vp-cpy-ir rsp 0 r0)
	(call 'obj 'deref '((r0 error_object)))
	(vp-pop r0)
	(s-jump 'error 'deinit '(r0))

(def-func-end)

(def-method 'error 'get_msg)
	;inputs
	;r0 = error object (ptr)
	;outputs
	;r0 = error object (ptr)
	;r1 = error string object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'msg)
	(pubyte 'next)
	(uint 'length 'cnt)

	(push-scope)
	(entry 'error 'get_msg {this})

	(assign {"", $msgs, this->error_msg} {msg, next, cnt})
	(loop-while {*next && cnt})
		(assign {next} {msg})
		(call 'sys_string 'length {next} {_, length})
		(assign {next + length + byte_size, cnt - 1} {next, cnt})
	(loop-end)

	(exit 'error 'get_msg {this, msg})
	(pop-scope)
	(return)

(vp-label 'msgs)
(errorcases
	(each (lambda (_) (vp-string _) (vp-byte 0)) *error_msgs*))
(vp-label 'unknown)
	(vp-string "unknown_error !") (vp-byte 0)
	(vp-byte 0)

(def-func-end)
