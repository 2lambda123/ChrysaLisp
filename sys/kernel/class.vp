(include "sys/func.inc")
(include "sys/link/class.inc")
(include "sys/load/class.inc")
(include "sys/kernel/class.inc")
(include "sys/str/class.inc")
(include "sys/math/class.inc")
(include "sys/pii/class.inc")
(include "gui/gui/class.inc")
(include "class/sym/class.inc")
(include "class/num/class.inc")
(include "class/node/class.inc")
(include "class/hmap/class.inc")
(include "class/lisp/class.inc")
(include "lib/consts/chars.inc")

;;;;;;;;;;;;;
; kernel task
;;;;;;;;;;;;;

(def-method 'sys_kernel :kernel)
	;inputs
	;r0 = argv pointer (pptr)
	;info
	;loader is already initialized when we get here !

	(union
		(ptr 'argv)
		(ptr 'link))
	(ptr 'statics 'mbox_addr 'msg 'data 'tuple 'key)
	(pptr 'iter_begin 'iter_end)
	(struct 'best_id 'node_id)
	(struct 'node_id 'node_id)
	(uint 'best_cnt)

	(push-scope)
	(entry {argv})

	;init allocator
	(call 'sys_mem :statics_init)

	;init symbols
	(call 'sym :statics_init)

	;init tasks
	(call 'sys_task :statics_init)

	;init gui
	(call 'gui :statics_init)

	;init mailer mailbox list
	(call 'sys_mail :statics_init)

	;start kernel task (get's mailbox id of 0 !)
	(assign {@sys/statics/statics} {statics })
	(call 'sys_task :start {$fn_entry} {statics->statics_sys_task_kernel_tcb, mbox_addr, _, _, _})
	(assign {statics->statics_sys_task_kernel_tcb} {statics->statics_sys_task_current_tcb})

	;init mailer
	(call 'sys_mail :statics_init1)

	;set random node ID
	(call 'sys_pii :rand {&statics->statics_sys_task_kernel_node_id, node_id_size})
	(call 'sys_kernel :id nil {node_id.node_id_node1, node_id.node_id_node2})

	;process command options
	(call 'opts {argv})

	;start routing pings
	(call 'node :create {0, node_id_size} {key})
	(call 'sys_task :start (cat {@} (f-path 'sys_kernel :ping)))

;;;;;;;;;;;;;;;;;;;;;;;
; main kernel task loop
;;;;;;;;;;;;;;;;;;;;;;;

	;loop till no other tasks running
	(call 'sys_task :set_priority '(0))
	(loop-start)
		;service all kernel mail
		(loop-start 'kernel_loop)
			;check if any mail
			(assign {mbox_addr} '(r0))
			(lh-is-empty r0 mbox_list r1)
			(breakif '(r1 = 0))
			(call 'sys_mail :read '(r0) {msg, data})
			;which kernel call number
			(assign {data->kn_msg_func} '(r0))
			(switch)
			(vpcase '(r0 = kn_call_open))
			(vp-label 'run_here)
				;fill in reply ID, user field is left alone !
				(call 'opt_run {&data->kn_msg_open_pathname} '(r0 r1 r2))
				(assign {msg, data, kn_msg_reply_size} '(r3 r4 r5))
				(assign-net-id r4 kn_msg_reply_id r3 msg_dest r6 r7 r8)
				(save-net-id r4 kn_msg_reply_id r0 r1 r2)
				(assign '(r5) '((r3 msg_frag_length)))
				(call 'sys_mail :send '(r3))
				(break)
			(vpcase '(r0 = kn_call_child))
				;find best cpu to run task
				(assign {statics->statics_sys_task_task_count} {best_cnt})
				(assign {node_id.node_id_node1} {best_id.node_id_node1})
				(assign {node_id.node_id_node2} {best_id.node_id_node2})
				(call 'array :get_both {statics->statics_sys_mail_links_array} {_, iter_begin, iter_end})
				(loop-while {iter_begin /= iter_end})
					(assign {*iter_begin} {link})
					(assign {iter_begin + ptr_size} {iter_begin})
					(continueifnot {link->lk_node_task_count})
					(continueif {link->lk_node_task_count >= best_cnt})
					(assign {link->lk_node_task_count} {best_cnt})
					(assign {link->lk_node_peer_node_id.node_id_node1} {best_id.node_id_node1})
					(assign {link->lk_node_peer_node_id.node_id_node2} {best_id.node_id_node2})
				(loop-end)
				(gotoifnot {(best_id.node_id_node1 - node_id.node_id_node1)
						| (best_id.node_id_node2 - node_id.node_id_node2)} 'run_here)
				;send to better kernel
				(assign {best_id.node_id_node1} {msg->msg_dest.net_id_node_id.node_id_node1})
				(assign {best_id.node_id_node2} {msg->msg_dest.net_id_node_id.node_id_node2})
				(call 'sys_mail :send {msg})
				(break)
			(vpcase '(r0 = kn_call_ping))
				;new services/routing ping
				(ptr 'session 'set)
				(long 'hops)
				(union
					(ptr 'bucket 'new_key)
					(ptr 'services 'entries))
				(push-scope)

				;find/create the routing tuple for the origin
				(assign {data, key} '(r0 r1))
				(assign-node-id r0 kn_msg_ping_origin r1 str_data)
				(call 'hmap :find {statics->statics_sys_mail_routing_map, key} {_, tuple, bucket})
				(vpifnot {tuple})
					(call 'node :create {&data->kn_msg_ping_origin, node_id_size} {new_key})
					(call 'array :create nil {tuple})
					;session, hops
					(call 'array :push_back2 {tuple, -1, -1})
					(call 'list :push_back2 {bucket, new_key, tuple})
				(else)
					(assign {(pptr tuple)[ptr_size]} {tuple})
				(endif)

				;update routing entries for the origin ?
				(call 'array :get_first2 {tuple} {_, session, hops})
				(switch)
				(breakif {data->kn_msg_ping_session < session})
				(vpcase {data->kn_msg_ping_session > session})
					;new routing session, clear vias, update session and hops
					(call 'array :set_length {tuple, 0})
					(call 'array :push_back2 {tuple, data->kn_msg_ping_session, data->kn_msg_ping_hops})
					(goto 'new_via)
				(vpcase {data->kn_msg_ping_hops < hops})
					;better route, clear vias, update hops
					(call 'array :set_length {tuple, 1})
					(call 'array :push_back {tuple, data->kn_msg_ping_hops})
					(goto 'new_via)
				(vpcase {data->kn_msg_ping_hops = hops})
				(vp-label 'new_via)
					;equal route, push via, flood to neibours
					(call 'array :push_back2 {tuple,
						data->kn_msg_ping_via.node_id_node1,
						data->kn_msg_ping_via.node_id_node2})
					(call 'flood_fill {statics , msg, data, node_id.node_id_node1, node_id.node_id_node2})
				(endswitch)

				;don't update services if I am orign !
				(vpif {(node_id.node_id_node1 - data->kn_msg_ping_origin.node_id_node1)
						| (node_id.node_id_node2 - data->kn_msg_ping_origin.node_id_node2)})
					;find/create the service tuple for the origin
					(assign {data, key} '(r0 r1))
					(assign-node-id r0 kn_msg_ping_origin r1 str_data)
					(call 'hmap :find {statics->statics_sys_mail_service_map, key} {_, tuple, bucket})
					(vpifnot {tuple})
						(call 'node :create {&data->kn_msg_ping_origin, node_id_size} {new_key})
						(call 'list :create nil {tuple})
						(call 'num :create {0} {session})
						(call 'hset :create `((@ ,(f-path 'str :same)) 1) {set})
						(call 'list :push_back2 {tuple, session, set})
						(call 'list :push_back2 {bucket, new_key, tuple})
					(else)
						(assign {(pptr tuple)[ptr_size]} {tuple})
					(endif)

					;add service entries for the origin ?
					(call 'list :get_first {tuple} {_, session})
					(vpif {data->kn_msg_ping_session > session->num_value})
						;new session
						(assign {data->kn_msg_ping_session} {session->num_value})
						(call 'str :create_from_buffer {&data->kn_msg_ping_services, msg->msg_frag_length - kn_msg_ping_services} {services})
						(call 'str :split_char {services, +char_lf+} {_, entries})
						(call 'str :destroy {services})
						(call 'list :get_both {entries} {_, iter_begin, iter_end})
						(call 'list :get_second {tuple} {_, set})
						(call 'hset :clear {set})
						(loop-while {iter_begin /= iter_end})
							(call 'hset :insert {set, *iter_begin})
							(assign {iter_begin + ptr_size} {iter_begin})
						(loop-end)
						(call 'list :destroy {entries})
					(endif)
				(endif)
				(pop-scope)
			(vp-label 'drop_msg)
				(call 'sys_mail :free {msg})
				(break)
			(vpcase '(r0 = kn_call_callback))
				;call callback with this thread/stack
				(assign {data->kn_msg_user, data->kn_msg_callback_addr} '(r0 r1))
				(vp-call-r r1)
				;reply to originator
				(assign {data, msg} '(r1 r0))
				(assign-net-id r1 kn_msg_reply_id r0 msg_dest)
				(call 'sys_mail :send '(r0))
			(endswitch)
		(loop-end)

		;resume any ready tasks on timer list
		(call 'sys_task :timer nil '(r0))

		;find next task we could defer to
		(assign {statics } '(r3))
		(assign '((& r3 (+ statics_sys_task_task_lists lh_list_size))) '(r1))
		(assign '((& r3 (+ statics_sys_task_task_lists (* num_task_lists lh_list_size)))) '(r2))
		(loop-start)
			(lh-get-head r1 0 r4)
			(ln-get-succ r4 0 r5)
			(breakif '(r5 /= 0))
			(vp-add-cr lh_list_size r1)
		(loop-until '(r1 = r2))

		;defer to task if available
		(vpif '(r5 /= 0))
			(call 'sys_task :defer '(r4))
			(continue 'kernel_loop)
		(endif)

		;no other task ready to run so
		;exit if no task waiting for timer
		(lh-get-head r3 statics_sys_task_timer_list r2)
		(ln-get-succ r2 0 r1)
		(breakif '(r1 = 0))

		;may as well go to sleep till next wake time then
		(vp-swp-rr r0 r2)
		(assign '((r0 tk_node_time)) '(r0))
		(vp-sub-rr r2 r0)
		(vp-cpy-cr 1000 r3)
		(vp-xor-rr r2 r2)
		(vp-div-rrr r3 r2 r0)
		(vpif '(r0 < 1))
			(vp-cpy-cr 1 r0)
		(endif)
		(host-os-call 'host :sleep '(r0))
	(loop-end)

	;deinit allocator
	(call 'sys_mem :statics_deinit)

	;exit back to load init
	(pop-scope)
	(return)

(vp-label 'flood_fill)
	;inputs
	;r0 = mail statics
	;r1 = flood msg
	;r2 = flood data
	;r3-r4 = kernel node_id
	;trashes
	;r0-r14

	(vp-def (statics msg data knode1 knode2 vnode1 vnode2 iter_begin iter_end link_node)
		'(r14 r13 r12 r11 r10 r9 r8 r7 r6 r5))

	(entry `(,statics ,msg ,data ,knode1 ,knode2))

	;inc hops
	(assign `((,data kn_msg_ping_hops)) '(r0))
	(vp-add-cr 1 r0)
	(assign '(r0) `((,data kn_msg_ping_hops)))
	;old via
	(load-node-id data kn_msg_ping_via vnode1 vnode2)
	;set new via
	(save-node-id data kn_msg_ping_via knode1 knode2)
	;loop over the links
	(assign `((,statics statics_sys_mail_links_array)) '(r0))
	(class/array/get_both r0 iter_begin iter_end)
	(loop-while (list iter_begin '/= iter_end))
		(assign `((,iter_begin 0)) `(,link_node))
		(vp-add-cr ptr_size iter_begin)
		;this links peer
		(load-node-id link_node lk_node_peer_node_id knode1 knode2)
		;not there yet ?
		(assign `(,knode1 ,knode2) '(r0 r1))
		(vp-or-rr r1 r0)
		(continueif '(r0 = 0))
		;it's the old via ?
		(assign `(,knode1) '(r0))
		(vp-sub-rr vnode1 r0)
		(vp-sub-rr vnode2 r1)
		(vp-or-rr r1 r0)
		(continueif '(r0 = 0))
		;multi-cast the data
		(call 'sys_mail :alloc_obj `((,msg msg_obj) ,data (,msg msg_frag_length)) '(r0))
		(vp-xor-rr r1 r1)
		(save-net-id r0 msg_dest r1 knode1 knode2)
		(call 'sys_mail :send '(r0))
	(loop-end)
	(vp-ret)

(vp-label 'opts)
	;inputs
	;r0 = argv array (pptr)
	;trashes
	;r0-r14
	;info
	;process command options

	(pptr 'argv)
	(ptr 'arg)
	(plong 'table)
	(long 'offset)
	(int 'len)

	(push-scope)
	(entry {argv})

	(loop-start)
		(assign {*argv} {arg})
		(breakifnot {arg})
		(assign {argv + ptr_size} {argv})
		(assign {$options_table} {table})
		(loop-start 'next_arg)
			(assign {*table} {offset})
			(breakifnot {offset})
			(assign {table + ptr_size} {table})
			(call 'sys_str :compare {table, arg})
			(vpif (list (method-output 'sys_str :compare 0) '= 0))
				(assign {*argv} {arg})
				(breakifnot {arg} 'next_arg)
				(assign {arg, $options_table + offset} '(r0 r1))
				(vp-call-r r1)
				(break 'next_arg)
			(endif)
			(call 'sys_str :length {table} {_, len})
			(assign {(table + len + ptr_size) & - ptr_size} {table})
		(loop-end)
	(loop-end)

	(pop-scope)
	(return)

(vp-label 'opt_run)
	;inputs
	;r0 = argv pointer (pubyte)
	;outputs
	;r0-r2 = 0 if error, else ID (net_id)
	;trashes
	;r0-r14

	(ptr 'arg 'func 'msg)
	(struct 'id 'net_id)
	(uint 'length)

	(push-scope)
	(entry {arg})

	;is this a lisp file
	(assign {0 => id.net_id_mbox_id => id.net_id_node_id.node_id_node1} {id.net_id_node_id.node_id_node2})
	(call 'sys_str :length {arg} {_, length})
	(vpif {length >= 5})
		(call 'sys_str :compare {arg + length - 5, ".lisp"} {length})
	(endif)
	(vpifnot {length})
		;yup it's a .lisp file, check it exists
		(call 'sys_pii :stat {arg, @sys/statics/statics.statics_sys_load_stat_buffer} {func})
		(breakif {func})
		;start lisp run task and send args
		(call 'sys_task :start `((@ ,(f-path 'lisp :run)))
			{_, _, id.net_id_mbox_id, id.net_id_node_id.node_id_node1, id.net_id_node_id.node_id_node2})
		(call 'str :create_from_cstr {arg} {arg})
		(call 'sys_mail :alloc_obj {arg, &arg->str_data, arg->str_length} {msg})
		(assign {msg, id.net_id_mbox_id, id.net_id_node_id.node_id_node1, id.net_id_node_id.node_id_node2}
			'(r0 r2 r3 r4))
		(save-net-id r0 msg_dest)
		(call 'sys_mail :send '(r0))
		(call 'str :deref {arg})
	(else)
		;open as raw task and return mailbox ID
		(call 'sys_load :bind {arg} {func})
		(breakifnot {func})
		;start this function as task
		(call 'sys_task :start {func}
			{_, _, id.net_id_mbox_id, id.net_id_node_id.node_id_node1, id.net_id_node_id.node_id_node2})
	(endif)

	(exit {id.net_id_mbox_id, id.net_id_node_id.node_id_node1, id.net_id_node_id.node_id_node2})
	(pop-scope)
	(return)

(vp-label 'opt_link)
	;inputs
	;r0 = argv pointer (pubyte)
	;trashes
	;r0-r11

	(entry '(r8))

	;start link
	(call 'sys_task :start `((@ ,(f-path 'sys_link :link))) '(_ _ r9 r10 r11))

	;params message
	(call 'sys_mail :alloc '(8) '(r0 r1))
	(save-net-id r0 msg_dest r9 r10 r11)
	(vp-cpy-rr r0 r3)
	(call 'sys_str :copy '(r8 r1))

	;send to link task
	(call 'sys_mail :send '(r3))
	(vp-ret)

	(vp-align ptr_size)
(vp-label 'options_table)
	(vp-long `(- ,(label-sym 'opt_run) ,(label-sym 'options_table)))
		(vp-string "-run") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long `(- ,(label-sym 'opt_link) ,(label-sym 'options_table)))
		(vp-string "-l") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long 0)

(def-func-end)

(def-method 'sys_kernel :id)
	;outputs
	;r0-r1 = node id (node_id)
	;trashes
	;r0-r1

	(fn-bind 'sys/statics/statics r1)
	(exit 'sys_kernel :id
		`((r1 ,(+ statics_sys_task_kernel_node_id node_id_node1))
		(r1 ,(+ statics_sys_task_kernel_node_id node_id_node2))))
	(vp-ret)

(def-func-end)

(def-method 'sys_kernel :ping)
	;started by kernel at boot

	(ptr 'msg)
	(struct 'node_id 'node_id)

	(push-scope)

	;don't count ping or postman tasks in load balancing
	(assign {@sys/statics/statics} {msg})
	(assign {msg->statics_sys_task_task_count - 2} {msg->statics_sys_task_task_count})

	(call 'sys_kernel :id nil {node_id.node_id_node1, node_id.node_id_node2})
	(call 'sys_math :i_rand '(1000000) '(r0))
	(vp-add-cr 3000000 r0)
	(call 'sys_task :sleep '(r0))
	(loop-start)
		;send services/routing ping message
		(call 'sys_mail :ping)
		(call 'sys_math :i_rand '(1000000) '(r0))
		(vp-cpy-cr 19000000 r1)
		(vp-add-rr r1 r0)
		(call 'sys_task :sleep '(r0))
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)
