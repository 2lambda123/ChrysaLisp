(include 'sys/func.inc)
(include 'sys/link/class.inc)

(def-method 'sys_mail 'in)
	;inputs
	;r0 = link input msg buffer (ptr)
	;trashes
	;all

	(ptr 'rx_msg 'msg 'mbox_addr)
	(uint 'len)

	(push-scope)
	(entry 'sys_mail 'in {rx_msg})

	;look up parcel in mailbox
	(call 'sys_mail 'mbox_addr {rx_msg->lk_msg_stamp.msg_dest.id_mbox} {mbox_addr})
	(vp-def (r_next r_node r_src r_id r_psrc r_pid))
	(assign {mbox_addr, rx_msg->lk_msg_stamp.msg_parcel_src, rx_msg->lk_msg_stamp.msg_parcel_id}
		(list r_next r_src r_id))
	(loop-list-forward r_next mbox_parcel_list r_node r_next)
		(vp-cpy-ir r_node msg_parcel_src r_psrc)
		(continueif (list r_src '!= r_psrc))
		(vp-cpy-ir-ui r_node msg_parcel_id r_pid)
	(loop-until (list r_id '== r_pid))
	(assign (list r_node) {msg})
	(vpif (list r_next '== 0))
		;new parcel
		(call 'sys_mail 'alloc {rx_msg->lk_msg_stamp.msg_parcel_length} {msg, _})
		(assign {rx_msg->lk_msg_stamp.msg_parcel_length} {msg->msg_parcel_length})
		(assign {rx_msg->lk_msg_stamp.msg_dest.id_id} {msg->msg_dest.id_id})
		(assign {rx_msg->lk_msg_stamp.msg_parcel_src} {msg->msg_parcel_src})
		(assign {rx_msg->lk_msg_stamp.msg_parcel_id} {msg->msg_parcel_id})
		(assign {mbox_addr->mbox_parcel_list, msg} (list r_next r_node))
		(lh-add-at-tail r_next r_node r_src)
	(endif)

	;copy fragment data
	(assign {rx_msg->lk_msg_stamp.msg_length} {len})
	(call 'sys_mem 'copy {&rx_msg->lk_msg_data,
		msg->msg_parcel_data + rx_msg->lk_msg_stamp.msg_parcel_offset, len})
	(assign {msg->msg_parcel_offset + len} {msg->msg_parcel_offset})
	(assign {msg->msg_parcel_length - len} {msg->msg_parcel_length})

	;clear link status
	(assign {lk_chan_status_ready} {rx_msg->lk_msg_status})

	;got all needed ?
	(vpifnot {msg->msg_parcel_length})
		;yes, remove parcel and post it
		(assign {msg} (list r_node))
		(ln-remove-node r_node r_next)
		(call 'sys_mail 'send {msg})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
