(include 'sys/func.inc)
(include 'sys/link/class.inc)
(include 'class/obj/class.inc)
(include 'sys/kernel/class.inc)

(def-method 'sys_mail :out)
	;info
	;parcels going off chip or junk mail task

	(ptr 'msg 'data 'frag 'mail_statics)
	(uint 'id 'offset 'ammount 'len)

	(push-scope)

	(call 'sys_task :set_priority '(1))
	(call 'sys_kernel :id nil {id})
	(assign (cat {@} (f-path 'sys_mail :statics)) {mail_statics})

	(loop-start 'mail_loop)
		;read parcel or junk mail
		(call 'sys_mail :mymail nil {msg, data})
		(vpif {msg->msg_dest.id_cpu = id})
			;we got some junk mail, just free it for now
			(call 'sys_mail :free {msg})
			(continue 'mail_loop)
		(endif)

		;create next parcel id
		(assign {mail_statics->ml_statics_parcel_id + 1} {mail_statics->ml_statics_parcel_id})

		;for each fragment
		(assign {0} {offset})
		(assign {msg->msg_frag_length} {ammount})
		(loop-start)
			;create fragment
			(assign {ammount} {len})
			(vpif {len > lk_data_size})
				(assign {lk_data_size} {len})
			(endif)
			(call 'sys_heap :alloc {&mail_statics->ml_statics_msg_heap} {_, frag})
			(call 'obj :ref {msg->msg_obj} {frag->msg_obj})

			;fill in fragment
			(assign {len} {frag->msg_frag_length})
			(assign {msg->msg_dest.id_id} {frag->msg_dest.id_id})
			(assign {data + offset} {frag->msg_frag_data})
			(assign {offset} {frag->msg_frag_offset})
			(assign {msg->msg_frag_length} {frag->msg_total_length})
			(assign {(id << 32) + mail_statics->ml_statics_parcel_id} {frag->msg_parcel_src})

			;move on
			(assign {offset + len} {offset})
			(assign {ammount - len} {ammount})

			;queue it on the outgoing packet list
			(vp-def (head node tmp))
			(assign {&mail_statics->ml_statics_offchip_list, frag} (list head node))
			(lh-add-at-tail head node tmp)

			;let links get at some packets
			(call 'sys_task :sleep '(0))
		(loop-untilnot {ammount})

		;free parcel
		(call 'sys_mail :free {msg})
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)
