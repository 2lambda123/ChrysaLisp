(include "sys/func.inc")
(include "sys/mail/class.inc")
(include "sys/kernel/class.inc")
(include "class/str/class.inc")
(include "class/array/class.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")

(def-method 'sys_mail :lisp_read)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_read '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(list-bind-args r1 '(r0) '(:obj))
	(vp-cpy-ir r0 str_data r0)
	(call 'sys_mail :validate '(r0) '(r0))
	(vpif '(r0 /= 0))
		(call 'sys_mail :read '(r0) '(r0 _))
		(call 'sys_mail :free_obj '(r0) '(r1 _ _))
	(else)
		(assign '((rsp 0)) '(r1))
		(assign '((r1 lisp_sym_nil)) '(r1))
		(class/obj/ref r1 r2)
	(endif)
	(vp-pop r0)

	(exit 'sys_mail :lisp_read '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-read mbox)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'sys_mail :lisp_poll)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_poll '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(list-bind-args r1 '(r1) '(:list))

(errorcases
	(call 'lisp :env_args_match `(r1 (@ ,(f-path 'str :vtable)) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(call 'sys_mail :poll '(r1) '(r0 _ _))
	(vpif '(r0 /= -1))
		(call 'num :create '(r0) '(r1))
	(else)
		(assign '((rsp 0)) '(r1))
		(assign '((r1 lisp_sym_nil)) '(r1))
		(class/obj/ref r1 r2)
	(endif)
	(vp-pop r0)

	(exit 'sys_mail :lisp_poll '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-poll mboxs)" error_msg_wrong_types r1))
	(signature '(list)))

(def-func-end)

(def-method 'sys_mail :lisp_select)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_select '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(list-bind-args r1 '(r1) '(:list))

(errorcases
	(call 'lisp :env_args_match `(r1 (@ ,(f-path 'str :vtable)) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(call 'sys_mail :select '(r1) '(r0))
	(call 'num :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'sys_mail :lisp_select '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-select mboxs)" error_msg_wrong_types r1))
	(signature '(list)))

(def-func-end)

(def-method 'sys_mail :lisp_send)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(entry 'sys_mail :lisp_send {this, args})

(errorcases
	(call 'lisp :env_args_sig {args, $sig, 2} '(r2))
	(gotoif '(r2 = 0) 'error))

	(call 'lisp :env_args_set {args, 0, &arg0})
	(call 'obj :inst_of (cat {arg1, @} (f-path 'str :vtable)))
	(vpif (list (method-output 'obj :inst_of 1) '/= 0))
		(call 'sys_mail :alloc_obj {arg1, &arg1->str_data, arg1->str_length} {arg2})
		(goto 'sendit)
	(endif)
	(call 'obj :inst_of (cat {arg1, @} (f-path 'list :vtable)))
	(vpif (list (method-output 'obj :inst_of 1) '/= 0))
		(call 'sys_mail :alloc_obj {arg1, arg1->array_begin, arg1->array_length * long_size} {arg2})
		(goto 'sendit)
	(endif)
	(call 'obj :inst_of (cat {arg1, @} (f-path 'array :vtable)))
	(errorif (list (method-output 'obj :inst_of 1) '= 0) 'error)
	(call 'str :create_from_buffer {arg1->array_begin, arg1->array_length * long_size} {value})
	(call 'sys_mail :alloc_obj {value, &value->str_data, value->str_length} {arg2})
	(call 'obj :deref {value})
(vp-label 'sendit)
	(assign {ulong(&arg0->str_data.net_id_mbox_id)} {arg2->msg_dest.net_id_mbox_id})
	(assign {ulong(&arg0->str_data.net_id_node_id.node_id_node1)} {arg2->msg_dest.net_id_node_id.node_id_node1})
	(assign {ulong(&arg0->str_data.net_id_node_id.node_id_node2)} {arg2->msg_dest.net_id_node_id.node_id_node2})
	(call 'sys_mail :send {arg2})
	(call 'obj :ref {arg0} {value})

	(exit 'sys_mail :lisp_send {this, value})
	(return)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error {this, "(mail-send mbox obj)", error_msg_wrong_types, args})
	(signature '(str obj)))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_mail :lisp_declare)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_declare '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sys_mail :declare))
	(array-bind-args r1 in)
	(call 'sys_mail :declare in '(r1))
	(vp-pop r0)

	(exit 'sys_mail :lisp_declare '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-declare mbox name info)" error_msg_wrong_types r1))
	(signature '(str str str)))

(def-func-end)

(def-method 'sys_mail :lisp_enquire)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_enquire '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sys_mail :enquire))
	(array-bind-args r1 in)
	(call 'sys_mail :enquire in '(r1))
	(vp-pop r0)

	(exit 'sys_mail :lisp_enquire '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-enquire prefix)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'sys_mail :lisp_forget)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_forget '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sys_mail :forget))
	(array-bind-args r1 in)
	(vp-push (elem 0 in))
	(call 'sys_mail :forget in)
	(vp-pop r1)
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'sys_mail :lisp_forget '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-forget key)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'sys_mail :lisp_alloc_mbox)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_alloc_mbox '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 0) 'error))

	(vp-push r0)
	(call 'str :create_from_buffer '(0 net_id_size) '(r6))
	(call 'sys_mail :alloc_mbox nil `((r6 ,(+ str_data net_id_mbox_id)) _))
	(call 'sys_kernel :id nil
		`((r6 ,(+ str_data net_id_node_id node_id_node1))
		(r6 ,(+ str_data net_id_node_id node_id_node2))))
	(vp-pop r0)

	(exit 'sys_mail :lisp_alloc_mbox '(r0 r6))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-alloc-mbox)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'sys_mail :lisp_free_mbox)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_free_mbox '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sys_mail :free_mbox))
	(list-bind-args r1 in '(:obj))
	(vp-cpy-ir (elem 0 in) str_data (elem 0 in))
	(call 'sys_mail :free_mbox in)
	(vp-pop r0)
	(assign '((r0 lisp_sym_nil)) '(r1))
	(class/obj/ref r1 r2)

	(exit 'sys_mail :lisp_free_mbox '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-free-mbox mbox)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'sys_mail :lisp_devices)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'sys_mail :lisp_devices '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 0) 'error))

	(vp-push r0)
	(call 'sys_mail :devices nil '(r1))
	(vp-pop r0)

	(exit 'sys_mail :lisp_devices '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(mail-nodes)" error_msg_wrong_types r1)))

(def-func-end)
