(include 'sys/func.inc)
(include 'sys/mail/class.inc)
(include 'class/str/class.inc)
(include 'class/array/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

(def-method 'sys_mail 'lisp_mymail)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_value) '(r6 r7))

	(entry 'sys_mail 'lisp_mymail (list r_this r_args))

(errorcases
	(d-call 'vector 'get_length (list r_args))
	(gotoif (list (method-output 'vector 'get_length 1) '!= 0) 'error1))

	(call 'sys_mail 'mymail nil (list r_value '_))
	(call 'sys_mail 'free_obj (list r_value) (list r_value '_ '_))

	(exit 'sys_mail 'lisp_mymail (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(mail-mymail)" error_msg_wrong_types r_args)))

(def-func-end)

(def-method 'sys_mail 'lisp_trymail)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (r_this r_args r_value) '(r6 r7))

	(entry 'sys_mail 'lisp_trymail (list r_this r_args))

(errorcases
	(d-call 'vector 'get_length (list r_args))
	(gotoif (list (method-output 'vector 'get_length 1) '!= 0) 'error1))

	(call 'sys_mail 'trymail nil (list r_value '_))
	(vpif (list r_value '!= 0))
		(call 'sys_mail 'free_obj (list r_value) (list r_value '_ '_))
	(else)
		(call 'obj 'ref (list (list r_this lisp_sym_nil)) (list r_value))
	(endif)

	(exit 'sys_mail 'lisp_trymail (list r_this r_value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list r_this "(mail-trymail)" error_msg_wrong_types r_args)))

(def-func-end)

(def-method 'sys_mail 'lisp_send)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(entry 'sys_mail 'lisp_send {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'obj 'inst_of (cat {arg0, @} (f-path 'str 'vtable)))
	(vpif (list (method-output 'obj 'inst_of 1) '!= 0))
		(call 'sys_mail 'alloc_obj {arg0, &arg0->str_data, arg0->str_length} {arg2})
		(goto 'sendit)
	(endif)
	(call 'obj 'inst_of (cat {arg0, @} (f-path 'vector 'vtable)))
	(vpif (list (method-output 'obj 'inst_of 1) '!= 0))
		(call 'sys_mail 'alloc_obj {arg0, arg0->array_array, arg0->array_length * long_size} {arg2})
		(goto 'sendit)
	(endif)
	(call 'obj 'inst_of (cat {arg0, @} (f-path 'array 'vtable)))
	(errorif (list (method-output 'obj 'inst_of 1) '== 0) 'error1)
	(call 'str 'create_from_buffer {arg0->array_array, arg0->array_length * long_size} {value})
	(call 'sys_mail 'alloc_obj {value, &value->str_data, value->str_length} {arg2})
	(call 'obj 'deref {value})
(vp-label 'sendit)
	(assign {arg1} {arg2->msg_dest.id_id})
	(call 'sys_mail 'send {arg2})
	(call 'obj 'ref {arg0} {value})

	(exit 'sys_mail 'lisp_send {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(mail-send obj mbox)", error_msg_wrong_types, args})
	(signature 'sig 'obj 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_mail 'lisp_declare)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'sys_mail 'lisp_declare {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'sys_mail 'declare {&arg0->str_data, arg1})
	(call 'obj 'ref {arg0} {value})

	(exit 'sys_mail 'lisp_declare {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(mail-declare name mbox)", error_msg_wrong_types, args})
	(signature 'sig 'str 'num))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_mail 'lisp_enquire)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(ulong 'value 'arg0)

	(push-scope)
	(entry 'sys_mail 'lisp_enquire {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1})
	(gotoif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'sys_mail 'enquire {&arg0->str_data} {value})
	(vpif {value})
		(call 'num 'create {value} {value})
	(else)
		(call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

	(exit 'sys_mail 'lisp_enquire {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error {this, "(mail-enquire name)", error_msg_wrong_types, args})
	(signature 'sig 'str))

	(pop-scope-syms)

(def-func-end)
