(include "sys/func.inc")
(include "sys/link/class.inc")
(include "sys/kernel/class.inc")
(include "class/array/class.inc")
(include "class/num/class.inc")

(def-method 'sys_link :out)
	;started by kernel for each link

	(struct 'lk_node 'lk_node)
	(ptr 'task_statics 'params 'msg 'data 'mem 'tx 'tx_msg 'key)
	(pubyte 'pdata)
	(long 'handle)
	(uint 'id)

	(push-scope)

	;decrement task count
	;don't count links in load balancing
	(assign (cat {@} (f-path 'sys_task :statics)) {task_statics})
	(assign {task_statics->tk_statics_task_count - 2} {task_statics->tk_statics_task_count})

	;int and add link node to link array
	(call 'sys_kernel :id nil {id})
	(assign {0, -1} {lk_node.lk_node_task_count, lk_node.lk_node_peer_cpu_id})
	(call 'array :push_back (cat {@} (f-path 'sys_mail :statics) {.ml_statics_links_array, &lk_node}))
	(call 'num :create '(0) {key})

	;read params msg from kernel
	(call 'sys_mail :mymail nil {params, pdata})

	;open shared memory file
	(call 'sys_pii :open_shared {pdata, lk_buffer_size} {handle})

	;map shared object
	(call 'sys_pii :mmap {lk_buffer_size, handle, mmap_shared} {mem})

	;put my towel down if seams available
	(vpifnot {mem->lk_buffer_towel})
		(assign {id} {mem->lk_buffer_towel})
	(endif)

	;start in link and send params
	(call 'sys_mail :alloc {16} {msg, data})
	(call 'sys_task :start (cat {@} (f-path 'sys_link :in)) {_, msg->msg_dest.net_id_id, _})
	(assign {&lk_node} {ptr(data + 0)})
	(assign {mem} {ptr(data + ptr_size)})
	(call 'sys_mail :send {msg})

	;switch to link priority and sleep to
	;let other links join us at this priority
	(call 'sys_task :set_priority '(1))
	(call 'sys_task :sleep '(100000))

	;assign tx channel based on the towel I now see
	(vpif {id = mem->lk_buffer_towel})
		(assign {mem + lk_buffer_chan_1} {tx})
	(else)
		(assign {mem + lk_buffer_chan_2} {tx})
	(endif)
	(assign {&tx->lk_chan_msg0} {tx_msg})

	;write messages through the shared buffer
	(loop-start)
		;write my task count and cpu id
		(assign {task_statics->tk_statics_task_count, id}
			{tx->lk_chan_task_count, tx->lk_chan_peer_cpu_id})

		;do we have a free out slot
		(loop-while {tx_msg->lk_msg_status = lk_chan_status_ready})
			;see if any off chip mail for this link
			(call 'sys_mail :ready {lk_node.lk_node_peer_cpu_id, key} {msg})
			(breakifnot {msg})

			;copy message data
			(call 'sys_mem :copy {msg + ln_node_size, &tx_msg->lk_msg_stamp + ln_node_size, msg_stamp_size - ln_node_size})
			(call 'sys_mem :copy {msg->msg_frag_data, &tx_msg->lk_msg_data, (msg->msg_frag_length + long_size - 1) & - long_size})

			;busy status
			(assign {lk_chan_status_busy} {tx_msg->lk_msg_status})

			;free message
			(call 'sys_mail :free {msg})

			;move on to next msg chan
			(assign {&tx_msg->lk_msg_size} {tx_msg})
			(vpif {tx_msg = &tx->lk_chan_size})
				(assign {&tx->lk_chan_msg0} {tx_msg})
			(endif)

			;let other links run
			(call 'sys_task :sleep '(0))
		(loop-end)

		;small sleep if nothing to do
		(call 'sys_task :sleep '(500))

		;exit if signaled by kernel...
	(loop-end)

	;unmap object
	(call 'sys_pii :munmap {mem, lk_buffer_size, mmap_shared})

	;close it
	(call 'sys_pii :close_shared {pdata, handle})

	;free params msg
	(call 'sys_mail :free {params})

	;remove from links array...
	(call 'num :destroy {key})

	;restore task count
	(assign {task_statics->tk_statics_task_count + 2} {task_statics->tk_statics_task_count})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_link :in)
	;started by out link for each link

	(ptr 'lk_node 'msg 'data 'rx 'rx_msg)
	(uint 'id)

	(push-scope)

	;read params msg from out link
	(call 'sys_mail :mymail nil {msg, data})
	(assign {ptr(data + 0)} {lk_node})
	(assign {ptr(data + ptr_size)} {rx})
	(call 'sys_mail :free {msg})

	;switch to link priority and sleep to
	;let other links join us at this priority
	(call 'sys_task :set_priority '(1))
	(call 'sys_task :sleep '(100000))

	;assign rx channel
	(call 'sys_kernel :id nil {id})
	(vpif {id = rx->lk_buffer_towel})
		(assign {rx + lk_buffer_chan_2} {rx})
	(else)
		(assign {rx + lk_buffer_chan_1} {rx})
	(endif)
	(assign {&rx->lk_chan_msg0} {rx_msg})

	;read messages from the shared buffer
	(loop-start)
		;read neibour task count and peer id
		(assign {rx->lk_chan_task_count, rx->lk_chan_peer_cpu_id}
			{lk_node->lk_node_task_count, lk_node->lk_node_peer_cpu_id})

		;check for received message
		(loop-while {rx_msg->lk_msg_status = lk_chan_status_busy})
			;is this msg part of a parcel for this cpu
			(vpif {rx_msg->lk_msg_stamp.msg_total_length && rx_msg->lk_msg_stamp.msg_dest.net_id_cpu_id = id})
				;copy direct from link buffer to parcel !
				(call 'sys_mail :in {rx_msg})
			(else)
				;allocate msg, copy over data
				(call 'sys_mail :alloc {rx_msg->lk_msg_stamp.msg_frag_length} {msg, data})
				(call 'sys_mem :copy {&rx_msg->lk_msg_stamp + ln_node_size, msg + ln_node_size, msg_stamp_size - ln_node_size})
				(call 'sys_mem :copy {&rx_msg->lk_msg_data, data, rx_msg->lk_msg_stamp.msg_frag_length + long_size - 1) & - long_size})

				;clear status
				(assign {lk_chan_status_ready} {rx_msg->lk_msg_status})

				;send onwards
				(call 'sys_mail :send {msg})
			(endif)

			;move on to next msg chan
			(assign {&rx_msg->lk_msg_size} {rx_msg})
			(vpif {rx_msg = &rx->lk_chan_size})
				(assign {&rx->lk_chan_msg0} {rx_msg})
			(endif)

			;let other links run
			(call 'sys_task :sleep '(0))
		(loop-end)

		;small sleep as nothing to do
		(call 'sys_task :sleep '(500))

		;exit if signaled by kernel...
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)
