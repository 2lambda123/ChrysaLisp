(include 'sys/func.inc)
(include 'sys/math/class.inc)
(include 'class/num/class.inc)
(include 'class/lisp/class.inc)

;generic fixed math op
(defun mathop (_ p)
	(entry 'sys_math _ '(r0 r1))
(errorcases
	(call 'lisp 'env_args_type '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))
	(vp-push r0)
	(class/vector/bind_args r1 '(r0) '(num))
	(exec p)
	(call 'num 'create '(r0) '(r1))
	(vp-pop r0)
	(exit 'sys_math _ '(r0 r1))
	(vp-ret))

(def-method 'sys_math 'lisp_fsin)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_fsin
		'(call 'sys_math 'fsin '(r0) '(r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(fsin angle)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'sys_math 'lisp_fcos)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_fcos
		'(call 'sys_math 'fcos '(r0) '(r0)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(fcos angle)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'sys_math 'lisp_fsqrt)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_fsqrt
		'(progn
			(errorif '(r0 < 0) 'error)
			(call 'sys_math 'fsqrt '(r0) '(r0))))

(errorcases
(vp-label 'error)
	(vp-pop r0)
	(jump 'lisp 'repl_error '(r0 "(fsqrt num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'sys_math 'lisp_frac)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_frac
		'(progn
			(vec-set 1)
			(vec-frac 1)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(frac num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)

(def-method 'sys_math 'lisp_floor)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(mathop 'lisp_floor
		'(progn
			(vec-set 1)
			(vec-floor 1)))

(errorcases
(vp-label 'error)
	(jump 'lisp 'repl_error '(r0 "(floor num)" error_msg_wrong_types r1))
	(signature '(num)))

(def-func-end)
