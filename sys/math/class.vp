(include 'sys/func.inc)
(include 'sys/math/class.inc)

(def-method 'sys_math 'random)
	;inputs
	;r0 = random range (ulong)
	;outputs
	;r0 = random number in range (ulong)
	;trashes
	;r1-r2

	(entry 'sys_math 'random '(r0))

	(vp-cpy-rr r0 r1)
	(vp-cpy-pr 'seed r0)
	(vp-mul-cr 17 r0)
	(vp-cpy-cr 0xa5a5a5a5a5a5a5a5 r2)
	(vp-xor-rr r2 r0)
	(vp-cpy-rp r0 'seed)
	(vp-xor-rr r2 r2)
	(vp-div-rrr r1 r2 r0)
	(vp-cpy-rr r2 r0)

	(exit 'sys_math 'random '(r0))
	(vp-ret)

	(vp-align ptr_size)
(vp-label 'seed)
	(vp-long 1234567890)

(def-func-end)

(def-method 'sys_math 'isqrt)
	;inputs
	;r0 = number (ulong)
	;outputs
	;r0 = sqrt (ulong)
	;trashes
	;r1-r3

	(entry 'sys_math 'isqrt '(r1))

	(vp-xor-rr r0 r0)
	(vp-cpy-cr 0x4000000000000000 r2)
	(loop-while '(r2 > r1))
		(vp-shr-cr 2 r2)
	(loop-end)
	(loop-while '(r2 != 0))
		(vp-lea-d r0 r2 r3)
		(vpif '(r1 > r3))
			(vp-cpy-rr r2 r3)
			(vp-sub-rr r0 r1)
			(vp-shl-cr 1 r3)
			(vp-sub-rr r2 r1)
			(vp-add-rr r3 r0)
		(endif)
		(vp-shr-cr 1 r0)
		(vp-shr-cr 2 r2)
	(loop-end)
	(vpif '(r1 > r0))
		(vp-add-cr 1 r0)
	(endif)

	(exit 'sys_math 'isqrt '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_math 'fsin)
	;inputs
	;r0 = angle in radians (16.16)
	;outputs
	;r0 = sine (16.16)
	;trashes
	;r1-r4

	(entry 'sys_math 'fsin '(r0))
	(vec-set 1)
	(vec-load 1 '(fp_2pi))
	(vec-fmod 1)

	;(assign {(res - fp_pi) *> fp_rpi} {tc})
	;(assign {1.0} {tp})
	;(assign {tc << 1} {u})

	(vp-cpy-rr r0 r3)
	(vp-sub-cr fp_pi r0)
	(vp-mul-cr fp_rpi r0)
	(vp-asr-cr fp_shift r0)
	(vp-cpy-cr 1.0 r1)
	(vp-cpy-rr r0 r4)
	(vp-shl-cr 1 r4)

	;(assign {-37305 *> tc} {res})
	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r0 r3)
	(vp-mul-cr -37305 r3)
	(vp-asr-cr fp_shift r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {43707 *> tc + res} {res})
	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr 43707 r2)
	(vp-asr-cr fp_shift r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {-6834 *> tc + res} {res})
	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr -6834 r2)
	(vp-asr-cr fp_shift r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {448 *> tc + res} {res})
	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr 448 r2)
	(vp-asr-cr fp_shift r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {u *> tc - tp} {tc})
	;(assign {-16 *> tc + res} '(r0))

	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r1 r0)
	(vp-mul-cr -16 r0)
	(vp-asr-cr fp_shift r0)
	(vp-add-rr r3 r0)

	(exit 'sys_math 'fsin '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_math 'fcos)
	;inputs
	;r0 = angle in radians (16.16)
	;outputs
	;r0 = cosine (16.16)
	;trashes
	;r1-r4

	(entry 'sys_math 'fcos '(r0))
	(vec-set 1)
	(vec-load 1 '(fp_2pi))
	(vec-fmod 1)

	;(assign {(res - fp_pi) *> fp_rpi} {tc})
	;(assign {1.0} {tp})
	;(assign {tc << 1} {u})
	;(assign {19939} {res})

	(vp-sub-cr fp_pi r0)
	(vp-mul-cr fp_rpi r0)
	(vp-asr-cr fp_shift r0)
	(vp-cpy-cr 1.0 r1)
	(vp-cpy-rr r0 r4)
	(vp-shl-cr 1 r4)
	(vp-cpy-cr 19939 r3)

	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {63627 *> tc + res} {res})
	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr 63627 r2)
	(vp-asr-cr fp_shift r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {-19848 *> tc + res} {res})
	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr -19848 r2)
	(vp-asr-cr fp_shift r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {1907 *> tc + res} {res})
	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr 1907 r2)
	(vp-asr-cr fp_shift r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {-91 *> tc + res} {res})
	;(assign {u *> tc - tp} {tn})
	;(assign {tc} {tp})
	;(assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr -91 r2)
	(vp-asr-cr fp_shift r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r2 r0)

	;(assign {u *> tc - tp} {tc})
	;(assign {3 *> tc + res} '(r0))

	(vp-mul-rr r4 r0)
	(vp-asr-cr fp_shift r0)
	(vp-sub-rr r1 r0)
	(vp-mul-cr 3 r0)
	(vp-asr-cr fp_shift r0)
	(vp-add-rr r3 r0)

	(exit 'sys_math 'fcos '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_math 'intersect)
	;inputs
	;r0 = p1x (16.16)
	;r1 = p1y (16.16)
	;r2 = p2x (16.16)
	;r3 = p2y (16.16)
	;r4 = v1x (16.16)
	;r5 = v1y (16.16)
	;r6 = v2x (16.16)
	;r7 = v2y (16.16)
	;outputs
	;r0 = ix (16.16)
	;r1 = iy (16.16)
	;trashes
	;all

	(vec-set 8)
	(entry 'sys_math 'intersect (vec-top 8))

	(bind '(p1x p1y p2x p2y v1x v1y v2x v2y) (vec-top 8))
	(defq p1 (list p1x p1y) p2 (list p2x p2y)
		v1 (list v1x v1y) v2 (list v2x v2y))
	(bind '(v1x v1y) (map list v1))
	(bind '(v2x v2y) (map list v2))

	(vec-dup 2 v2)
	(vec-dup 2 p2)
	(vec-add 2)
	(vec-dup 2 p2)
	(vec-fdet 2)
	(defq db (vec-top 1))

	(vec-dup 2 v1)
	(vec-dup 2 p1)
	(vec-add 2)
	(vec-dup 2 p1)
	(vec-fdet 2)
	(defq da (vec-top 1))

	(vec-dup 2 v1)
	(vec-dup 2 v2)
	(vec-fdet 2)
	(defq axb (vec-top 1))

	(vpif `(,(elem 0 axb) != 0))
		(vec-dup 2 (cat da v1x))
		(vec-fdet 2 (cat db v2x))
		(vec-dup 2 (cat da v1y))
		(vec-fdet 2 (cat db v2y))
		(vec-fdiv 2 (cat axb axb))
		(exit 'sys_math 'intersect (vec-pop 2))
	(else)
		(vec-set 4)
		(vec-add 2)
		(vec-load 1 {0.5})
		(vec-fscale 2)
		(exit 'sys_math 'intersect (vec-pop 2))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_math 'distance_sqd)
	;inputs
	;r0 = px (16.16)
	;r1 = py (16.16)
	;r2 = p1x (16.16)
	;r3 = p1y (16.16)
	;r4 = p2x (16.16)
	;r5 = p2y (16.16)
	;outputs
	;r0 = distance squared (16.16)
	;trashes
	;all

	(int 'px 'py 'p1x 'p1y 'p2x 'p2y)

	(push-scope)
	(entry 'sys_math 'distance_sqd {px, py, p1x, p1y, p2x, p2y})

	(vec-set 0)
	(vec-load 2 {px, py})
	(defq p (vec-top 2))
	(vec-load 2 {p1x, p1y})
	(defq p1 (vec-top 2))
	(vec-load 2 {p2x, p2y})
	(defq p2 (vec-top 2))

	(vec-dup 2)
	(vec-sub 2 p1)
	(defq lv (vec-top 2))

	(vec-dup 2 p)
	(vec-sub 2 p1)
	(vec-fdot 2 lv)
	(bind '(c1) (vec-top 1))

	(vpif `(,c1 > 0))
		(vec-dup 2 lv)
		(vec-fdot 2 lv)
		(bind '(c2) (vec-top 1))

		(vpif `(,c2 <= ,c1))
			(vec-cpy 2 p2 p1)
		(else)
			(vec-fdiv 1)
			(vec-fscale 2)
			(vec-add 2 lv p1)
		(endif)
	(endif)
	(vec-set 4)
	(vec-fdistance-squared 2)

	(exit 'sys_math 'distance_sqd (vec-pop 1))
	(pop-scope)
	(return)

(def-func-end)
